
================================================================================
ARQUIVO: C:\web\rw-nv\backend\.env
================================================================================

# Server Configuration
PORT=3001
NODE_ENV=development

# Database Configuration
DB_HOST=base-road-cf-do-user-14245463-0.k.db.ondigitalocean.com
DB_PORT=25060
DB_NAME=road-ultima-versao
DB_USER=doadmin
DB_PASSWORD=AVNS__6zE8Ov_xoMfjMfvNpx
DB_SSL=true
DB_POOL_MIN=2
DB_POOL_MAX=20
DB_CONNECTION_TIMEOUT=60000
DB_IDLE_TIMEOUT=30000

# JWT Configuration
JWT_SECRET=your-super-secret-jwt-key-change-in-production
JWT_EXPIRES_IN=7d
JWT_REFRESH_EXPIRES_IN=30d

# Redis Configuration (Optional)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0
REDIS_TTL=3600

# Security
BCRYPT_SALT_ROUNDS=12

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=100
RATE_LIMIT_AUTH_MAX=5

# File Upload
UPLOAD_MAX_SIZE=5242880
UPLOAD_ALLOWED_TYPES=image/jpeg,image/png,application/pdf
UPLOAD_DESTINATION=uploads/

# Email Configuration
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_SECURE=false
EMAIL_USER=your-email@gmail.com
EMAIL_PASSWORD=your-app-password
EMAIL_FROM=noreply@roadrw.com

# CORS Configuration
CORS_ORIGIN=http://64.23.183.132:3000,http://64.23.183.132:5173,http://localhost:3000,http://localhost:5173


# Logging
LOG_LEVEL=info
LOG_FILE=logs/app.log
LOG_MAX_SIZE=20m
LOG_MAX_FILES=14d

# Pagination
PAGINATION_DEFAULT_LIMIT=20
PAGINATION_MAX_LIMIT=100

# API Configuration
API_PREFIX=/api
API_VERSION=v1


// ==========================================
// 7. VARI√ÅVEIS DE AMBIENTE ADICIONAIS
// ==========================================
// backend/.env.example (ADICIONAR)

# APIs Externas
EXTERNAL_API_ENABLED=true
EXTERNAL_API_RATE_LIMIT=1000
EXTERNAL_API_LOG_RETENTION_DAYS=30

# Tokens espec√≠ficos (opcional - melhor configurar via script)
EXTERNAL_TOKEN_JAMEF=
EXTERNAL_TOKEN_BRASPRESS=
EXTERNAL_TOKEN_TNT=

# Configura√ß√µes de seguran√ßa para APIs externas
EXTERNAL_API_REQUIRE_HTTPS=true
EXTERNAL_API_ALLOWED_IPS=
EXTERNAL_API_MAX_REQUEST_SIZE=10mb

# Webhook configurations
WEBHOOK_TIMEOUT=30000
WEBHOOK_RETRY_ATTEMPTS=3



# APIs Externas - Tokens de Integra√ß√£o
JAMEF_API_TOKEN=seu_token_jamef_aqui
BRASPRESS_API_TOKEN=seu_token_braspress_aqui
TNT_API_TOKEN=seu_token_tnt_aqui

# Configura√ß√µes de Integra√ß√£o
INTEGRATION_POLL_INTERVAL=300
INTEGRATION_CONCURRENT_JOBS=3
INTEGRATION_ENABLED=true

# URLs das APIs (opcional - valores padr√£o j√° configurados)
JAMEF_API_URL=https://api.jamef.com.br
BRASPRESS_API_URL=https://api.braspress.com.br
TNT_API_URL=https://api.tnt.com.br


================================================================================
ARQUIVO: C:\web\rw-nv\backend\.gitignore
================================================================================

node_modules/
.env*
dist/
build/
coverage/
.DS_Store
*.log
.tmp/
.vscode/
android/app/build/
ios/build/



================================================================================
ARQUIVO: C:\web\rw-nv\backend\arquivo-noffis.json
================================================================================

{
  "notfis": [
    {
      "peso_calculo": 0.0,
      "observacoes": "| Rep: 121 - PINHEIRO & SCRIVANTE REP. COMERCIAIS LTD | Ped Cliente: 2413919 Rota: 46509 | N Ped: 2413919 EXP\/ | Transp: 46509 - FEDEX_TNT | Cod Cliente:56440 |REDUCAO DO ICMS PARA 7% CONF.DEC.N¬∫.\r",
      "previsao_entrega": "2025-07-15T09:19:17.000000Z",
      "chave_nf": "35250761418042000131550040018757221276116250",
      "ser": 4,
      "emi_nf": "2025-07-04T00:00:00.000000Z",
      "nro": 1875722,
      "nro_pedido": 2413919,
      "peso_real": 1.032,
      "cod_rep": 121,
      "nome_rep": "PINHEIRO & SCRIVANTE REP. COMERCIAIS LTD",
      "qtd_volumes": 1,
      "metro_cubico": 0.01132866,
      "mensagem": "",
      "valor": 748.14,
      "data_entrega": "",
      "status_nf": "pedido reservado",
      "nf_retida": false,
      "valor_frete": 0.0,
      "recebedor": [
        {
          "cod_cliente": "56440",
          "documento": "24876491000369",
          "nome": "POLICLINICA QUALITY LTDA",
          "endereco": "R RIACHUELO,685",
          "bairro": "CAVALHADA I",
          "cep": "78216-010",
          "cidade": "C√ÅCERES",
          "uf": "MT",
          "contato": "65 32236048"
        }
      ],
      "endereco_entrega": [
        {
          "endereco": "R RIACHUELO,685",
          "bairro": "CAVALHADA I",
          "cep": "78216-010",
          "cidade": "C√ÅCERES",
          "uf": "MT",
          "doca": "71",
          "rota": ""
        }
      ],
      "remetente": [
        {
          "documento": "61418042000131",
          "nome": "CIRURGICA FERNANDES C.MAT.CIR.HO.SO.LTDA"
        }
      ],
      "transportadora": [
        {
          "cnpj": "95591723000119",
          "nome": "TNT MERCURIO CARGAS E ENCOMENDAS EXPRESSAS LTDA",
          "endereco": "AV. MARGINAL DIREITA DO TIETE, 2500",
          "municipio": "S√ÉO PAULO",
          "uf": "SP"
        }
      ]
    }
  ]
}



================================================================================
ARQUIVO: C:\web\rw-nv\backend\collection-nova.json
================================================================================

{
  "info": {
    "name": "API Gest√£o de Transportes",
    "description": "Collection completa para testes da API de gest√£o de transportes e log√≠stica",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "api_prefix",
      "value": "/api",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Auto-refresh token se expirado",
          "if (pm.collectionVariables.get('token') && pm.collectionVariables.get('refresh_token')) {",
          "  // Adicionar l√≥gica de refresh se necess√°rio",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "üîê Autentica√ß√£o",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "  const response = pm.response.json();",
                  "  if (response.token) {",
                  "    pm.collectionVariables.set('token', response.token);",
                  "  }",
                  "  if (response.refreshToken) {",
                  "    pm.collectionVariables.set('refresh_token', response.refreshToken);",
                  "  }",
                  "  pm.test('Login realizado com sucesso', function() {",
                  "    pm.expect(response.success).to.be.true;",
                  "  });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@empresa.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "auth", "login"]
            },
            "description": "Realiza login na API e obt√©m o token de autentica√ß√£o"
          }
        },
        {
          "name": "Registrar Usu√°rio",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Jo√£o Silva\",\n  \"email\": \"joao@empresa.com\",\n  \"password\": \"senha123\",\n  \"confirmPassword\": \"senha123\",\n  \"role\": \"operador\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "auth", "register"]
            }
          }
        },
        {
          "name": "Renovar Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "auth", "refresh"]
            }
          }
        },
        {
          "name": "Esqueci Minha Senha",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"usuario@empresa.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/auth/forgot-password",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "auth", "forgot-password"]
            }
          }
        },
        {
          "name": "Redefinir Senha",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset_token_aqui\",\n  \"password\": \"nova_senha123\",\n  \"confirmPassword\": \"nova_senha123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/auth/reset-password",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "auth", "reset-password"]
            }
          }
        },
        {
          "name": "Alterar Senha",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"senha_atual\",\n  \"newPassword\": \"nova_senha123\",\n  \"confirmPassword\": \"nova_senha123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/auth/change-password",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "auth", "change-password"]
            }
          }
        }
      ]
    },
    {
      "name": "üöõ Transportadoras",
      "item": [
        {
          "name": "Listar Transportadoras",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoras?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoras"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "20"},
                {"key": "nome", "value": "", "disabled": true},
                {"key": "uf", "value": "", "disabled": true}
              ]
            }
          }
        },
        {
          "name": "Buscar Transportadoras",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoras/search?q=transportadora",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoras", "search"],
              "query": [
                {"key": "q", "value": "transportadora"}
              ]
            }
          }
        },
        {
          "name": "Buscar por CNPJ",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoras/cnpj/12.345.678/0001-90",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoras", "cnpj", "12.345.678/0001-90"]
            }
          }
        },
        {
          "name": "Buscar por UF",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoras/uf/SP",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoras", "uf", "SP"]
            }
          }
        },
        {
          "name": "Obter Transportadora",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoras/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoras", "1"]
            }
          }
        },
        {
          "name": "Criar Transportadora",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Transportadora ABC\",\n  \"cnpj\": \"12.345.678/0001-90\",\n  \"inscricao_estadual\": \"123456789\",\n  \"endereco\": \"Rua das Transportadoras, 123\",\n  \"bairro\": \"Centro\",\n  \"cidade\": \"S√£o Paulo\",\n  \"cep\": \"01234-567\",\n  \"uf\": \"SP\",\n  \"telefone\": \"(11) 1234-5678\",\n  \"email\": \"contato@transportadoraabc.com\",\n  \"ativa\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoras",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoras"]
            }
          }
        },
        {
          "name": "Atualizar Transportadora",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Transportadora ABC Atualizada\",\n  \"telefone\": \"(11) 9876-5432\",\n  \"email\": \"novo@transportadoraabc.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoras/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoras", "1"]
            }
          }
        },
        {
          "name": "Deletar Transportadora",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoras/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoras", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "üë• Clientes",
      "item": [
        {
          "name": "Listar Clientes",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/clientes?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "clientes"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "20"},
                {"key": "nome", "value": "", "disabled": true},
                {"key": "documento", "value": "", "disabled": true},
                {"key": "uf", "value": "", "disabled": true}
              ]
            }
          }
        },
        {
          "name": "Buscar Clientes",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/clientes/search?q=cliente",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "clientes", "search"],
              "query": [
                {"key": "q", "value": "cliente"}
              ]
            }
          }
        },
        {
          "name": "Buscar por Documento",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/clientes/documento/12.345.678/0001-90",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "clientes", "documento", "12.345.678/0001-90"]
            }
          }
        },
        {
          "name": "Buscar por UF",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/clientes/uf/SP",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "clientes", "uf", "SP"]
            }
          }
        },
        {
          "name": "Buscar por Cidade",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/clientes/cidade/S√£o Paulo",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "clientes", "cidade", "S√£o Paulo"]
            }
          }
        },
        {
          "name": "Obter Cliente",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/clientes/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "clientes", "1"]
            }
          }
        },
        {
          "name": "Obter Cliente com Estat√≠sticas",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/clientes/1/stats",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "clientes", "1", "stats"]
            }
          }
        },
        {
          "name": "Criar Cliente",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"documento\": \"12.345.678/0001-90\",\n  \"cod_cliente\": \"CLI001\",\n  \"nome\": \"Cliente ABC Ltda\",\n  \"inscricao_estadual\": \"123456789\",\n  \"endereco\": \"Rua dos Clientes, 456\",\n  \"bairro\": \"Centro\",\n  \"cidade\": \"S√£o Paulo\",\n  \"cep\": \"01234-567\",\n  \"uf\": \"SP\",\n  \"telefone\": \"(11) 1234-5678\",\n  \"email\": \"contato@clienteabc.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/clientes",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "clientes"]
            }
          }
        },
        {
          "name": "Atualizar Cliente",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Cliente ABC Atualizado\",\n  \"telefone\": \"(11) 9876-5432\",\n  \"email\": \"novo@clienteabc.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/clientes/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "clientes", "1"]
            }
          }
        },
        {
          "name": "Deletar Cliente",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/clientes/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "clientes", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "üè≠ Embarcadores",
      "item": [
        {
          "name": "Listar Embarcadores",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/embarcadores?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "embarcadores"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "20"},
                {"key": "nome", "value": "", "disabled": true},
                {"key": "documento", "value": "", "disabled": true},
                {"key": "cidade", "value": "", "disabled": true},
                {"key": "uf", "value": "", "disabled": true}
              ]
            }
          }
        },
        {
          "name": "Buscar Embarcadores",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/embarcadores/search?q=embarcador",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "embarcadores", "search"],
              "query": [
                {"key": "q", "value": "embarcador"}
              ]
            }
          }
        },
        {
          "name": "Buscar por Documento",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/embarcadores/documento/11.222.333/0001-81",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "embarcadores", "documento", "11.222.333/0001-81"]
            }
          }
        },
        {
          "name": "Buscar por UF",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/embarcadores/uf/SP",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "embarcadores", "uf", "SP"]
            }
          }
        },
        {
          "name": "Buscar por Cidade",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/embarcadores/cidade/S√£o Paulo",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "embarcadores", "cidade", "S√£o Paulo"]
            }
          }
        },
        {
          "name": "Obter Embarcador",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/embarcadores/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "embarcadores", "1"]
            }
          }
        },
        {
          "name": "Obter Embarcador com Dep√≥sitos",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/embarcadores/1/depositos",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "embarcadores", "1", "depositos"]
            }
          }
        },
        {
          "name": "Criar Embarcador",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"documento\": \"11.222.333/0001-81\",\n  \"nome\": \"Empresa ABC Ltda\",\n  \"inscricao_estadual\": \"123456789\",\n  \"cnpj\": \"11.222.333/0001-81\",\n  \"endereco\": \"Rua das Ind√∫strias, 456\",\n  \"bairro\": \"Distrito Industrial\",\n  \"cidade\": \"S√£o Paulo\",\n  \"cep\": \"01234-567\",\n  \"uf\": \"SP\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/embarcadores",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "embarcadores"]
            }
          }
        },
        {
          "name": "Atualizar Embarcador",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Empresa ABC Atualizada\",\n  \"endereco\": \"Nova Rua das Ind√∫strias, 789\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/embarcadores/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "embarcadores", "1"]
            }
          }
        },
        {
          "name": "Deletar Embarcador",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/embarcadores/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "embarcadores", "1"]
            }
          }
        },
        {
          "name": "Restaurar Embarcador",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/embarcadores/1/restore",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "embarcadores", "1", "restore"]
            }
          }
        }
      ]
    },
    {
      "name": "üöó Motoristas",
      "item": [
        {
          "name": "Listar Motoristas",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/motoristas?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "motoristas"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "20"},
                {"key": "nome", "value": "", "disabled": true},
                {"key": "cpf", "value": "", "disabled": true},
                {"key": "cidade", "value": "", "disabled": true},
                {"key": "estado", "value": "", "disabled": true}
              ]
            }
          }
        },
        {
          "name": "Buscar Motoristas",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/motoristas/search?q=motorista",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "motoristas", "search"],
              "query": [
                {"key": "q", "value": "motorista"}
              ]
            }
          }
        },
        {
          "name": "Buscar por CPF",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/motoristas/cpf/123.456.789-10",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "motoristas", "cpf", "123.456.789-10"]
            }
          }
        },
        {
          "name": "Buscar por Cidade",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/motoristas/cidade/S√£o Paulo",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "motoristas", "cidade", "S√£o Paulo"]
            }
          }
        },
        {
          "name": "Obter Motorista",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/motoristas/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "motoristas", "1"]
            }
          }
        },
        {
          "name": "Criar Motorista",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Jo√£o Silva\",\n  \"cpf\": \"123.456.789-10\",\n  \"cnh\": \"12345678901\",\n  \"categoria_cnh\": \"D\",\n  \"telefone\": \"(11) 99999-9999\",\n  \"email\": \"joao@email.com\",\n  \"endereco\": \"Rua dos Motoristas, 123\",\n  \"bairro\": \"Centro\",\n  \"cidade\": \"S√£o Paulo\",\n  \"estado\": \"SP\",\n  \"cep\": \"01234-567\",\n  \"data_nascimento\": \"1980-05-15\",\n  \"data_vencimento_cnh\": \"2025-12-31\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/motoristas",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "motoristas"]
            }
          }
        },
        {
          "name": "Atualizar Motorista",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"telefone\": \"(11) 88888-8888\",\n  \"email\": \"joao.novo@email.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/motoristas/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "motoristas", "1"]
            }
          }
        },
        {
          "name": "Deletar Motorista",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/motoristas/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "motoristas", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "üìÑ Notas Fiscais",
      "item": [
        {
          "name": "Listar Notas Fiscais",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notasfiscais?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "20"},
                {"key": "chave_nf", "value": "", "disabled": true},
                {"key": "cliente_id", "value": "", "disabled": true},
                {"key": "transportadora_id", "value": "", "disabled": true},
                {"key": "status_nf", "value": "", "disabled": true},
                {"key": "finalizada", "value": "", "disabled": true},
                {"key": "data_inicio", "value": "", "disabled": true},
                {"key": "data_fim", "value": "", "disabled": true}
              ]
            }
          }
        },
        {
          "name": "Buscar por Chave",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notas-fiscais/chave/12345678901234567890123456789012345678901234",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais", "chave", "12345678901234567890123456789012345678901234"]
            }
          }
        },
        {
          "name": "Buscar por N√∫mero e S√©rie",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notas-fiscais/numero/123/serie/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais", "numero", "123", "serie", "1"]
            }
          }
        },
        {
          "name": "Buscar por Cliente",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notas-fiscais/cliente/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais", "cliente", "1"]
            }
          }
        },
        {
          "name": "Buscar por Transportadora",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notas-fiscais/transportadora/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais", "transportadora", "1"]
            }
          }
        },
        {
          "name": "Obter Nota Fiscal",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notas-fiscais/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais", "1"]
            }
          }
        },
        {
          "name": "Buscar NF com Ocorr√™ncias",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notas-fiscais/1/ocorrencias",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais", "1", "ocorrencias"]
            }
          }
        },
        {
          "name": "Estat√≠sticas por Per√≠odo",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notas-fiscais/stats/periodo?data_inicio=2024-01-01&data_fim=2024-12-31",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais", "stats", "periodo"],
              "query": [
                {"key": "data_inicio", "value": "2024-01-01"},
                {"key": "data_fim", "value": "2024-12-31"}
              ]
            }
          }
        },
        {
          "name": "Criar Nota Fiscal",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chave_nf\": \"12345678901234567890123456789012345678901234\",\n  \"numero_nf\": 123,\n  \"serie_nf\": 1,\n  \"data_emissao\": \"2024-01-15\",\n  \"valor_nf\": 1500.50,\n  \"peso\": 500.0,\n  \"volume\": 10,\n  \"cliente_id\": 1,\n  \"transportadora_id\": 1,\n  \"endereco_entrega_id\": 1,\n  \"status_nf\": \"pendente\",\n  \"obs\": \"Observa√ß√µes sobre a nota fiscal\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notasfiscais",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais"]
            }
          }
        },
        {
          "name": "Atualizar Nota Fiscal",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status_nf\": \"em_transito\",\n  \"obs\": \"Nota fiscal em tr√¢nsito\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notas-fiscais/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais", "1"]
            }
          }
        },
        {
          "name": "Atualizar Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status_nf\": \"entregue\",\n  \"data_entrega\": \"2024-01-20T14:30:00Z\",\n  \"obs\": \"Entrega realizada com sucesso\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notas-fiscais/1/status",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais", "1", "status"]
            }
          }
        },
        {
          "name": "Finalizar Nota Fiscal",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"motivo\": \"Entrega realizada com sucesso\",\n  \"data_finalizacao\": \"2024-01-20T15:00:00Z\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notas-fiscais/1/finalizar",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais", "1", "finalizar"]
            }
          }
        },
        {
          "name": "Associar ao Romaneio",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"romaneio_id\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notas-fiscais/1/romaneio",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais", "1", "romaneio"]
            }
          }
        },
        {
          "name": "Deletar Nota Fiscal",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/notas-fiscais/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "notasfiscais", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "üìç Endere√ßos de Entrega",
      "item": [
        {
          "name": "Listar Endere√ßos",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/enderecos-entrega?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "enderecos-entrega"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "20"},
                {"key": "cliente_id", "value": "", "disabled": true},
                {"key": "cidade", "value": "", "disabled": true},
                {"key": "uf", "value": "", "disabled": true},
                {"key": "restrito", "value": "", "disabled": true}
              ]
            }
          }
        },
        {
          "name": "Buscar por Cliente",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/enderecos-entrega/cliente/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "enderecos-entrega", "cliente", "1"]
            }
          }
        },
        {
          "name": "Buscar por Localiza√ß√£o",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/enderecos-entrega/localizacao?cidade=S√£o Paulo&uf=SP",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "enderecos-entrega", "localizacao"],
              "query": [
                {"key": "cidade", "value": "S√£o Paulo"},
                {"key": "uf", "value": "SP"}
              ]
            }
          }
        },
        {
          "name": "Buscar Endere√ßos Restritos",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/enderecos-entrega/restritos",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "enderecos-entrega", "restritos"]
            }
          }
        },
        {
          "name": "Obter Endere√ßo",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/enderecos-entrega/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "enderecos-entrega", "1"]
            }
          }
        },
        {
          "name": "Criar Endere√ßo",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"cliente_id\": 1,\n  \"endereco\": \"Rua da Entrega, 789\",\n  \"numero\": \"789\",\n  \"complemento\": \"Galp√£o 5\",\n  \"bairro\": \"Industrial\",\n  \"cidade\": \"S√£o Paulo\",\n  \"uf\": \"SP\",\n  \"cep\": \"01234-567\",\n  \"contato\": \"Jo√£o Recebedor\",\n  \"telefone\": \"(11) 5555-5555\",\n  \"email\": \"recebimento@cliente.com\",\n  \"horario_funcionamento\": \"08:00 √†s 17:00\",\n  \"restricao_veiculo\": false,\n  \"obs_restricao\": \"\",\n  \"latitude\": -23.550520,\n  \"longitude\": -46.633308\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/enderecos-entrega",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "enderecos-entrega"]
            }
          }
        },
        {
          "name": "Atualizar Endere√ßo",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contato\": \"Maria Recebedora\",\n  \"telefone\": \"(11) 6666-6666\",\n  \"horario_funcionamento\": \"07:00 √†s 18:00\"\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/enderecos-entrega/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "enderecos-entrega", "1"]
            }
          }
        },
        {
          "name": "Atualizar Coordenadas",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"latitude\": -23.550000,\n  \"longitude\": -46.633000\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/enderecos-entrega/1/coordenadas",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "enderecos-entrega", "1", "coordenadas"]
            }
          }
        },
        {
          "name": "Deletar Endere√ßo",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/enderecos-entrega/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "enderecos-entrega", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "üìã Romaneios",
      "item": [
        {
          "name": "Listar Romaneios",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/romaneios?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "romaneios"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "20"},
                {"key": "numero", "value": "", "disabled": true},
                {"key": "placa_cavalo", "value": "", "disabled": true},
                {"key": "motorista_id", "value": "", "disabled": true},
                {"key": "data_inicio", "value": "", "disabled": true},
                {"key": "data_fim", "value": "", "disabled": true}
              ]
            }
          }
        },
        {
          "name": "Buscar por N√∫mero",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/romaneios/numero/12345",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "romaneios", "numero", "12345"]
            }
          }
        },
        {
          "name": "Buscar por Placa",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/romaneios/placa/ABC1234",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "romaneios", "placa", "ABC1234"]
            }
          }
        },
        {
          "name": "Buscar por Motorista",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/romaneios/motorista/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "romaneios", "motorista", "1"]
            }
          }
        },
        {
          "name": "Obter Romaneio",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/romaneios/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "romaneios", "1"]
            }
          }
        },
        {
          "name": "Criar Romaneio",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"numero\": 12345,\n  \"unidade\": \"Centro de Distribui√ß√£o\",\n  \"placa_cavalo\": \"ABC1234\",\n  \"placa_carreta\": \"XYZ5678\",\n  \"emissao\": \"2024-01-15\",\n  \"motorista_id\": 1,\n  \"capacidade_veiculo\": 5000.00,\n  \"roteirizacao\": \"manual\",\n  \"peso\": 2500.50,\n  \"cubagem\": 15.75,\n  \"doca\": \"Doca 1\",\n  \"roteirizar\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/romaneios",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "romaneios"]
            }
          }
        },
        {
          "name": "Atualizar Romaneio",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"doca\": \"Doca 2\",\n  \"peso\": 3000.00,\n  \"cubagem\": 18.50\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/romaneios/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "romaneios", "1"]
            }
          }
        },
        {
          "name": "Deletar Romaneio",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/romaneios/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "romaneios", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "‚ö†Ô∏è Ocorr√™ncias",
      "item": [
        {
          "name": "Listar Ocorr√™ncias",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/ocorrencias?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "ocorrencias"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "20"},
                {"key": "codigo", "value": "", "disabled": true},
                {"key": "tipo", "value": "", "disabled": true},
                {"key": "processo", "value": "", "disabled": true},
                {"key": "finalizadora", "value": "", "disabled": true},
                {"key": "api", "value": "", "disabled": true}
              ]
            }
          }
        },
        {
          "name": "Buscar por C√≥digo",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/ocorrencias/codigo/123",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "ocorrencias", "codigo", "123"]
            }
          }
        },
        {
          "name": "Buscar por Tipo",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/ocorrencias/tipo/entrega",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "ocorrencias", "tipo", "entrega"]
            }
          }
        },
        {
          "name": "Buscar por Processo",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/ocorrencias/processo/entrega",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "ocorrencias", "processo", "entrega"]
            }
          }
        },
        {
          "name": "Buscar Finalizadoras",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/ocorrencias/finalizadoras",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "ocorrencias", "finalizadoras"]
            }
          }
        },
        {
          "name": "Buscar para API",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/ocorrencias/api",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "ocorrencias", "api"]
            }
          }
        },
        {
          "name": "Obter Ocorr√™ncia",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/ocorrencias/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "ocorrencias", "1"]
            }
          }
        },
        {
          "name": "Criar Ocorr√™ncia",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"codigo\": 123,\n  \"descricao\": \"Entrega realizada com sucesso\",\n  \"tipo\": \"entrega\",\n  \"processo\": \"entrega\",\n  \"finalizadora\": true,\n  \"api\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/ocorrencias",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "ocorrencias"]
            }
          }
        },
        {
          "name": "Ativar/Desativar API",
          "request": {
            "method": "PATCH",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/ocorrencias/1/toggle-api",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "ocorrencias", "1", "toggle-api"]
            }
          }
        },
        {
          "name": "Marcar/Desmarcar Finalizadora",
          "request": {
            "method": "PATCH",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/ocorrencias/1/toggle-finalizadora",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "ocorrencias", "1", "toggle-finalizadora"]
            }
          }
        }
      ]
    },
    {
      "name": "üîó V√≠nculos Transportadora-C√≥digo",
      "item": [
        {
          "name": "Listar V√≠nculos",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoracodigo?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoracodigo"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "20"},
                {"key": "transportadora_id", "value": "", "disabled": true},
                {"key": "codigo_ocorrencia_codigo", "value": "", "disabled": true}
              ]
            }
          }
        },
        {
          "name": "Estat√≠sticas dos V√≠nculos",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoracodigo/stats",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoracodigo", "stats"]
            }
          }
        },
        {
          "name": "Buscar por Transportadora",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoracodigo/transportadora/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoracodigo", "transportadora", "1"]
            }
          }
        },
        {
          "name": "Buscar por C√≥digo Ocorr√™ncia",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoracodigo/codigo/123",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoracodigo", "codigo", "123"]
            }
          }
        },
        {
          "name": "Obter V√≠nculo",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoracodigo/1",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoracodigo", "1"]
            }
          }
        },
        {
          "name": "Criar V√≠nculo",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transportadora_id\": 1,\n  \"codigo_ocorrencia_codigo\": 123,\n  \"ativo\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoracodigo",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoracodigo"]
            }
          }
        },
        {
          "name": "Criar M√∫ltiplos V√≠nculos",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transportadora_id\": 1,\n  \"codigos_ocorrencia\": [123, 124, 125],\n  \"ativo\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/transportadoracodigo/multiplos",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "transportadoracodigo", "multiplos"]
            }
          }
        }
      ]
    },
    {
      "name": "‚öôÔ∏è Jobs & Integra√ß√£o",
      "item": [
        {
          "name": "Status dos Jobs",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/jobs/status",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "jobs", "status"]
            }
          }
        },
        {
          "name": "Executar Job Manual",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transportadoraId\": 1,\n  \"force\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/jobs/run",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "jobs", "run"]
            }
          }
        },
        {
          "name": "Parar Jobs",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/jobs/stop",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "jobs", "stop"]
            }
          }
        },
        {
          "name": "Hist√≥rico de Jobs",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/jobs/history?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "jobs", "history"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "20"}
              ]
            }
          }
        },
        {
          "name": "Logs de Integra√ß√£o",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/jobs/logs?transportadoraId=1&level=error",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "jobs", "logs"],
              "query": [
                {"key": "transportadoraId", "value": "1"},
                {"key": "level", "value": "error", "disabled": true},
                {"key": "startDate", "value": "", "disabled": true},
                {"key": "endDate", "value": "", "disabled": true}
              ]
            }
          }
        }
      ]
    },
    {
      "name": "üìä Monitoramento",
      "item": [
        {
          "name": "Dashboard Geral",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/monitoring/dashboard",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "monitoring", "dashboard"]
            }
          }
        },
        {
          "name": "M√©tricas por Transportadora",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/monitoring/transportadora/1/metrics",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "monitoring", "transportadora", "1", "metrics"]
            }
          }
        },
        {
          "name": "Estat√≠sticas de Performance",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/monitoring/performance",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "monitoring", "performance"]
            }
          }
        },
        {
          "name": "Relat√≥rio de Sa√∫de",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/monitoring/health",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "monitoring", "health"]
            }
          }
        },
        {
          "name": "Logs do Sistema",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/monitoring/logs?level=error&limit=50",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "monitoring", "logs"],
              "query": [
                {"key": "level", "value": "error"},
                {"key": "limit", "value": "50"},
                {"key": "startDate", "value": "", "disabled": true},
                {"key": "endDate", "value": "", "disabled": true}
              ]
            }
          }
        },
        {
          "name": "Alertas Ativos",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/monitoring/alerts",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "monitoring", "alerts"]
            }
          }
        },
        {
          "name": "Resumo Status NF",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/monitoring/nf-status",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "monitoring", "nf-status"]
            }
          }
        },
        {
          "name": "Exportar Relat√≥rio",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/monitoring/export?format=excel&type=dashboard",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "monitoring", "export"],
              "query": [
                {"key": "format", "value": "excel"},
                {"key": "type", "value": "dashboard"},
                {"key": "startDate", "value": "", "disabled": true},
                {"key": "endDate", "value": "", "disabled": true}
              ]
            }
          }
        },
        {
          "name": "Configura√ß√£o do Monitoramento",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/monitoring/config",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "monitoring", "config"]
            }
          }
        },
        {
          "name": "Atualizar Configura√ß√£o",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alertas_email\": true,\n  \"intervalo_verificacao\": 300,\n  \"limite_memoria\": 80,\n  \"limite_cpu\": 90\n}"
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/monitoring/config",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}", "monitoring", "config"]
            }
          }
        }
      ]
    },
    {
      "name": "üîß Utilit√°rios",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "Documenta√ß√£o API (JSON)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api-docs.json",
              "host": ["{{base_url}}"],
              "path": ["api-docs.json"]
            }
          }
        },
        {
          "name": "Swagger UI",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api-docs",
              "host": ["{{base_url}}"],
              "path": ["api-docs"]
            }
          }
        }
      ]
    }
  ]
}


================================================================================
ARQUIVO: C:\web\rw-nv\backend\Dockerfile.jobs
================================================================================


// ==========================================
// CONFIGURA√á√ÉO DOCKER (OPCIONAL)
// ==========================================
// backend/Dockerfile.jobs

FROM node:18-alpine

# Instalar depend√™ncias do sistema
RUN apk add --no-cache \
    curl \
    postgresql-client

# Criar diret√≥rio da aplica√ß√£o
WORKDIR /app

# Copiar arquivos de depend√™ncia
COPY package*.json ./

# Instalar depend√™ncias
RUN npm ci --only=production

# Copiar c√≥digo fonte
COPY . .

# Criar diret√≥rios necess√°rios
RUN mkdir -p logs

# Vari√°veis de ambiente
ENV NODE_ENV=production
ENV LOG_LEVEL=info

# Expor porta (se necess√°rio para health check)
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD node scripts/health-check.js

# Comando padr√£o
CMD ["npm", "run", "jobs:prod"]




================================================================================
ARQUIVO: C:\web\rw-nv\backend\EXTERNAL_APIS.md
================================================================================

// ==========================================
// 4. DOCUMENTA√á√ÉO COMPLETA DE USO
// ==========================================
// docs/EXTERNAL_APIS.md

/**
 * # APIs Externas - Road-RW
 * 
 * Sistema completo para integra√ß√£o externa com transportadoras via APIs REST.
 * 
 * ## üöÄ In√≠cio R√°pido
 * 
 * ### 1. Configura√ß√£o Inicial
 * ```bash
 * # Executar setup
 * npm run setup:external
 * 
 * # Criar token para transportadora
 * npm run external:tokens create jamef 365
 * ```
 * 
 * ### 2. Teste de Conex√£o
 * ```bash
 * curl http://localhost:3001/api/external/health
 * ```
 * 
 * ## üîê Autentica√ß√£o
 * 
 * Todas as APIs externas requerem autentica√ß√£o via Bearer Token:
 * 
 * ```bash
 * Authorization: Bearer SEU_TOKEN_AQUI
 * ```
 * 
 * ### Obter Token
 * ```bash
 * # Via script
 * npm run external:tokens create jamef 365
 * 
 * # Via API interna (admin)
 * curl -X POST /api/jobs/api-tokens \
 *   -H "Authorization: Bearer ADMIN_TOKEN" \
 *   -d '{"integracao": "jamef", "token": "TOKEN_PERSONALIZADO"}'
 * ```
 * 
 * ## üìã APIs Dispon√≠veis
 * 
 * ### 1. Enviar Notas Fiscais
 * ```bash
 * POST /api/external/notas-fiscais
 * Content-Type: application/json
 * Authorization: Bearer TOKEN
 * 
 * {
 *   "notfis": [
 *     {
 *       "peso_calculo": 0.0,
 *       "chave_nf": "35250761418042000131550040018757221276116250",
 *       "ser": 4,
 *       "emi_nf": "2025-07-04T00:00:00.000Z",
 *       "nro": 1875722,
 *       "nro_pedido": 2413919,
 *       "peso_real": 1.032,
 *       "qtd_volumes": 1,
 *       "valor": 748.14,
 *       "recebedor": [{
 *         "documento": "24876491000369",
 *         "nome": "POLICLINICA QUALITY LTDA",
 *         "endereco": "R RIACHUELO,685",
 *         "cidade": "C√ÅCERES",
 *         "uf": "MT"
 *       }],
 *       "remetente": [{
 *         "documento": "61418042000131",
 *         "nome": "CIRURGICA FERNANDES LTDA"
 *       }],
 *       "transportadora": [{
 *         "cnpj": "95591723000119",
 *         "nome": "TNT MERCURIO CARGAS LTDA"
 *       }]
 *     }
 *   ]
 * }
 * ```
 * 
 * ### 2. Enviar Ocorr√™ncias
 * ```bash
 * POST /api/external/ocorrencias
 * 
 * {
 *   "ocorrencias": [
 *     {
 *       "nro_nf": 1875722,
 *       "codigo": "ENTREGUE",
 *       "descricao": "Mercadoria entregue",
 *       "data_evento": "2025-07-15T14:30:00Z",
 *       "recebedor": "Jo√£o Silva",
 *       "documento_recebedor": "12345678901",
 *       "latitude": -23.550520,
 *       "longitude": -46.633308
 *     }
 *   ]
 * }
 * ```
 * 
 * ### 3. Consultar Status
 * ```bash
 * GET /api/external/notas-fiscais/35250761418042000131550040018757221276116250/status
 * ```
 * 
 * ### 4. Webhook
 * ```bash
 * POST /api/external/webhook
 * 
 * {
 *   "evento": "ocorrencia",
 *   "dados": {
 *     "nro_nf": 1875722,
 *     "codigo": "EM_TRANSITO"
 *   }
 * }
 * ```
 * 
 * ## üìä C√≥digos de Ocorr√™ncia
 * 
 * | C√≥digo | Descri√ß√£o | Finalizadora |
 * |--------|-----------|--------------|
 * | 1 | Coleta realizada | N√£o |
 * | 2 | Em tr√¢nsito | N√£o |
 * | 3 | Saiu para entrega | N√£o |
 * | 4 | Entregue | Sim |
 * | 5 | Tentativa de entrega | N√£o |
 * | 6 | Devolvido | Sim |
 * | 7 | Extraviado | Sim |
 * | 8 | Avariado | N√£o |
 * 
 * ## üîí Rate Limiting
 * 
 * | Integra√ß√£o | Limite | Janela |
 * |------------|--------|---------|
 * | Jamef | 500 req | 15 min |
 * | Braspress | 1000 req | 15 min |
 * | TNT | 300 req | 15 min |
 * | Outros | 100 req | 15 min |
 * 
 * ## üìù Exemplos Pr√°ticos
 * 
 * ### Exemplo 1: Integra√ß√£o Simples
 * ```javascript
 * const axios = require('axios');
 * 
 * const api = axios.create({
 *   baseURL: 'http://localhost:3001/api/external',
 *   headers: {
 *     'Authorization': 'Bearer SEU_TOKEN',
 *     'Content-Type': 'application/json'
 *   }
 * });
 * 
 * // Enviar nota fiscal
 * const response = await api.post('/notas-fiscais', { notfis: [...] });
 * console.log(response.data);
 * ```
 * 
 * ### Exemplo 2: Com Retry
 * ```javascript
 * async function enviarComRetry(payload, maxTentativas = 3) {
 *   for (let tentativa = 1; tentativa <= maxTentativas; tentativa++) {
 *     try {
 *       const response = await api.post('/notas-fiscais', payload);
 *       return response.data;
 *     } catch (error) {
 *       if (tentativa === maxTentativas) throw error;
 *       
 *       const delay = 1000 * tentativa;
 *       await new Promise(resolve => setTimeout(resolve, delay));
 *     }
 *   }
 * }
 * ```
 * 
 * ## üêõ Troubleshooting
 * 
 * ### Erro 401 - Unauthorized
 * - Verificar se token est√° correto
 * - Verificar se token n√£o expirou
 * - Verificar header Authorization
 * 
 * ### Erro 429 - Rate Limit
 * - Reduzir frequ√™ncia de requests
 * - Implementar backoff exponencial
 * - Verificar limites por integra√ß√£o
 * 
 * ### Erro 400 - Bad Request
 * - Validar JSON schema
 * - Verificar campos obrigat√≥rios
 * - Validar formato de CNPJ/CPF
 * 
 * ## üìä Monitoramento
 * 
 * ```bash
 * # Estat√≠sticas de uso
 * npm run external:stats
 * 
 * # Logs recentes
 * npm run external:logs
 * 
 * # Status do sistema
 * curl /api/external/health
 * ```
 * 
 * ## üîß Configura√ß√£o Avan√ßada
 * 
 * ### Mapeamento de C√≥digos Personalizado
 * ```sql
 * INSERT INTO transportadora_codigo_ocorrencia (
 *   transportadora_id, codigo_ocorrencia_codigo, codigo, descricao
 * ) VALUES (1, 4, 'DELIVERED', 'Entregue com sucesso');
 * ```
 * 
 * ### Rate Limiting Personalizado
 * ```javascript
 * // No .env
 * EXTERNAL_RATE_LIMIT_JAMEF=600
 * EXTERNAL_RATE_LIMIT_BRASPRESS=1200
 * ```
 * 
 * ## üöÄ Deploy e Produ√ß√£o
 * 
 * ### Nginx Config
 * ```nginx
 * location /api/external/ {
 *   proxy_pass http://localhost:3001;
 *   proxy_set_header X-Real-IP $remote_addr;
 *   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 *   client_max_body_size 10M;
 * }
 * ```
 * 
 * ### Monitoramento Produ√ß√£o
 * ```bash
 * # Logs de erro
 * tail -f logs/external-api-errors.log
 * 
 * # M√©tricas em tempo real
 * watch -n 5 "npm run external:stats"
 * ```
 */


================================================================================
ARQUIVO: C:\web\rw-nv\backend\logs\app.log
================================================================================

{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":21184,"service":"road-rw-api","timestamp":"2025-09-22 10:25:00"}
{"duration":"1284ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"165ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":21184,"resource":"user","service":"road-rw-api","timestamp":"2025-09-22 10:25:03","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"582ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"156ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"156ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"156ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:34","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:48","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"157ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:48","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:48","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:48","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:48","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:25:49","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"157ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:26:19","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"158ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:26:47","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:26:49","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"157ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:26:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1514ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais?page=1&limit=20","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:27:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1763ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:27:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"319ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais?page=1&limit=20","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2122ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/clientes","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:27:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"635ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"315ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais/stats","pid":21184,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 10:27:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1096ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/clientes","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"315ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais/stats","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"319ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais?page=1&limit=20","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:27","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"655ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:27","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1133ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/clientes","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:28","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"647ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:28","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"316ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais/stats","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:28","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1286ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais?page=1&limit=20","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:28","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1115ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/clientes","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:29","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"316ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais/stats","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:29","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"324ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais?page=1&limit=20","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"644ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"316ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais?page=1&limit=20","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1133ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/clientes","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"632ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"314ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais/stats","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1118ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/clientes","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"315ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais/stats","pid":21184,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:27:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":4080,"service":"road-rw-api","timestamp":"2025-09-22 10:30:09"}
{"duration":"1949ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras","pid":4080,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:31:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2269ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/clientes","pid":4080,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:31:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2553ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais?page=1&limit=20","pid":4080,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:31:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"315ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais/stats","pid":4080,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:31:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"322ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais?page=1&limit=20","pid":4080,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:31:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1174ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/clientes","pid":4080,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:31:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1603ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras","pid":4080,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:31:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"317ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notas-fiscais/stats","pid":4080,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 10:31:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":12740,"service":"road-rw-api","timestamp":"2025-09-22 10:32:17"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":25220,"service":"road-rw-api","timestamp":"2025-09-22 10:32:33"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":13888,"service":"road-rw-api","timestamp":"2025-09-22 10:32:51"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":11252,"service":"road-rw-api","timestamp":"2025-09-22 10:33:07"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":1648,"service":"road-rw-api","timestamp":"2025-09-22 10:33:10"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":12480,"service":"road-rw-api","timestamp":"2025-09-22 10:47:31"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":2480,"service":"road-rw-api","timestamp":"2025-09-22 16:03:25"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":27732,"service":"road-rw-api","timestamp":"2025-09-22 16:12:23"}
{"duration":"1242ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":27732,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:14:25","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /auth/login","pid":27732,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:21:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":5852,"service":"road-rw-api","timestamp":"2025-09-22 16:23:00"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":2480,"service":"road-rw-api","timestamp":"2025-09-22 16:23:07"}
{"duration":"1282ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /health","pid":2480,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:23:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /auth/login","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:23:28","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /auth/login","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:24:51","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":2480,"resource":"user","service":"road-rw-api","timestamp":"2025-09-22 16:27:09","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"722ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":2480,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:27:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:28:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"10ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:28:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:28:34","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:28:35","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"7ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:34:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:34:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"5ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:35:48","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:35:49","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:35:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:35:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"5ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:38:20","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":2480,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:38:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":23320,"service":"road-rw-api","timestamp":"2025-09-22 16:39:24"}
{"duration":"13ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":23320,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:39:25","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":23320,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:39:26","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"22ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api-docs","pid":23320,"service":"road-rw-api","statusCode":301,"timestamp":"2025-09-22 16:42:32","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"28ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api-docs/","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:42:32","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"85ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api-docs/swagger-ui.css","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:42:32","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"107ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api-docs/swagger-ui-standalone-preset.js","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:42:32","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"25ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api-docs/swagger-ui-init.js","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:42:32","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"224ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api-docs/swagger-ui-bundle.js","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:42:32","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /favicon.ico","pid":23320,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:42:33","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"10ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":23320,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:45:51","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":23320,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:46:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3154ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&search=","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:46:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"652ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&search=&status=ativo","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:46:35","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"640ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&search=&status=inativo","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:46:38","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"518ms","environment":"development","ip":"127.0.0.1","level":"info","message":"PUT /api/transportadoras/38","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:49:13","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"645ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&search=","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:49:13","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"632ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&search=","pid":23320,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 16:49:31","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1650ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&search=t","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:49:37","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1598ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&search=tn","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:49:37","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1683ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&search=tnt","pid":23320,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-22 16:49:37","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":23320,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:49:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":23320,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:49:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"660ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&search=","pid":23320,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 16:49:46","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"4ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":23320,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:49:47","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"4ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":23320,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:55:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/dashboard/stats","pid":23320,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-22 16:56:00","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3078ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&search=","pid":23320,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-22 16:58:00","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":9020,"service":"road-rw-api","timestamp":"2025-09-23 18:39:56"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":9020,"resource":"user","service":"road-rw-api","timestamp":"2025-09-23 19:20:57","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"1812ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":9020,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-23 19:20:57","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"4ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notasfiscais?limit=1","pid":9020,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-23 19:20:58","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notasfiscais?limit=1","pid":9020,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-23 19:20:58","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1286ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/romaneios?limit=1","pid":9020,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-23 19:20:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1455ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/ocorrencias?limit=1","pid":9020,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-23 19:20:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"316ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/ocorrencias?limit=1","pid":9020,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-23 19:20:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1287ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/romaneios?limit=1","pid":9020,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-23 19:21:00","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notasfiscais?limit=1","pid":9020,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-23 19:21:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notasfiscais?limit=1","pid":9020,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-23 19:21:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"317ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/ocorrencias?limit=1","pid":9020,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-23 19:21:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"338ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/romaneios?limit=1","pid":9020,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-23 19:21:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"313ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/ocorrencias?limit=1","pid":9020,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-23 19:21:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"319ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/romaneios?limit=1","pid":9020,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-23 19:21:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notasfiscais?limit=1","pid":9020,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-23 19:21:28","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/notasfiscais?limit=1","pid":9020,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-23 19:21:28","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"314ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/ocorrencias?limit=1","pid":9020,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-23 19:21:29","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"324ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/romaneios?limit=1","pid":9020,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-23 19:21:29","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"314ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/ocorrencias?limit=1","pid":9020,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-23 19:21:29","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"322ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/romaneios?limit=1","pid":9020,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-23 19:21:29","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":30604,"service":"road-rw-api","timestamp":"2025-09-24 10:54:09"}
{"duration":"1521ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 12:28:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"168ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:28:22","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"165ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:28:26","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:28:27","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:28:37","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"166ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:28:37","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"225ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:51:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:51:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"189ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:53:57","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:53:57","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:54:36","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:54:36","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:55:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"171ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:55:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"166ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:55:17","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:55:17","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:55:19","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"165ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:55:19","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: logout","pid":30604,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 12:55:21","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"172ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/logout","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 12:55:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"205ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":30604,"service":"road-rw-api","statusCode":401,"timestamp":"2025-09-24 12:56:41","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":30604,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 12:57:52","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"632ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 12:57:52","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:58:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:58:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:58:19","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 12:58:19","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: logout","pid":30604,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 12:58:21","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"169ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/logout","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 12:58:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":30604,"service":"road-rw-api","statusCode":401,"timestamp":"2025-09-24 13:00:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":30604,"service":"road-rw-api","statusCode":401,"timestamp":"2025-09-24 13:00:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":30604,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 13:00:30","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"591ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 13:00:30","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:00:50","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"166ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:00:50","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:00:58","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:00:58","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:01:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:01:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: logout","pid":30604,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 13:01:10","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"166ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/logout","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 13:01:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":30604,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 13:02:56","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"1260ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 13:02:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"224ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:28:00","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:28:00","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: logout","pid":30604,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 13:29:12","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"179ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/logout","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 13:29:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":30604,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 13:29:40","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"703ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 13:29:40","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:29:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:29:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:30:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:30:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:31:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"158ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:31:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"188ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:41:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"158ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:41:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"167ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:41:22","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"170ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:41:22","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:41:30","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:41:30","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:42:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"165ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:42:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"172ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:45:37","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"178ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:45:37","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:46:13","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:46:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"165ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:46:28","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"174ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:46:28","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"432ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:49:13","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"215ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:49:13","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"211ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:54:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:54:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"166ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:54:20","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 13:54:20","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"186ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:00:38","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"169ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:00:38","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:00:49","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:00:49","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"166ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"168ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"191ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"158ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:32","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:32","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:38","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"165ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:38","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:46","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:02:46","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"229ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:15:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:15:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"227ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:16:13","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"180ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:16:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"176ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:21:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"158ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:21:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"165ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:21:39","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"171ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:21:39","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:21:49","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"175ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:21:50","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: logout","pid":30604,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 14:21:52","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"198ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/logout","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 14:21:52","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"185ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":30604,"service":"road-rw-api","statusCode":401,"timestamp":"2025-09-24 14:21:58","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":30604,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 14:22:30","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"545ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 14:22:30","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:22:52","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:22:52","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:23:19","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:23:20","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:24:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"158ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:24:15","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:24:26","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"171ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:24:26","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"200ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:45:51","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:45:51","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:47:29","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:47:30","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"322ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:47:33","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"158ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:47:33","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:47:40","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:47:40","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:48:20","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:48:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:48:31","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:48:31","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"158ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:48:34","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"165ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:48:35","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"166ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:49:29","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"172ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:49:29","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:49:39","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":30604,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 14:49:39","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: logout","pid":30604,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 14:49:45","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"171ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/logout","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 14:49:45","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":30604,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 14:50:07","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"551ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":30604,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 14:50:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":24288,"service":"road-rw-api","timestamp":"2025-09-24 15:06:43"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":22036,"service":"road-rw-api","timestamp":"2025-09-24 15:09:02"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":22036,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 15:09:10","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"1689ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":22036,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 15:09:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"166ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 15:09:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 15:09:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"214ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:04:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:04:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:05:13","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:05:13","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:05:16","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:05:16","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"209ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:39:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:39:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":22036,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 16:40:08","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"695ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":22036,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 16:40:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"185ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:40:22","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"172ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:40:22","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:40:30","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"174ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:40:30","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:40:33","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"158ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:40:34","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:40:58","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"172ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":22036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 16:40:58","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: forgot_password","pid":22036,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 16:41:14","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"185ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/forgot-password","pid":22036,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 16:41:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"body":{"email":"egles.vieiraa@gmail.com","nome":"Bruna Souza","password":"123@Mudar","role":"gestor"},"environment":"development","errors":[{"field":"name","message":"Nome √© obrigat√≥rio"},{"field":"password_confirmation","message":"Confirma√ß√£o de senha √© obrigat√≥ria"}],"level":"warn","message":"Erro de valida√ß√£o do body:","pid":22036,"service":"road-rw-api","timestamp":"2025-09-24 16:48:59"}
{"duration":"137ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/register","pid":22036,"service":"road-rw-api","statusCode":400,"timestamp":"2025-09-24 16:48:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"body":{"email":"egles.vieiraa@gmail.com","nome":"Bruna Souza","password":"123@Mudar","role":"gestor"},"environment":"development","errors":[{"field":"name","message":"Nome √© obrigat√≥rio"},{"field":"password_confirmation","message":"Confirma√ß√£o de senha √© obrigat√≥ria"}],"level":"warn","message":"Erro de valida√ß√£o do body:","pid":22036,"service":"road-rw-api","timestamp":"2025-09-24 16:49:30"}
{"duration":"200ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/register","pid":22036,"service":"road-rw-api","statusCode":400,"timestamp":"2025-09-24 16:49:30","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":23016,"service":"road-rw-api","timestamp":"2025-09-24 17:02:34"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: register","pid":23016,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 17:02:45","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"4"}
{"duration":"1849ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/register","pid":23016,"service":"road-rw-api","statusCode":201,"timestamp":"2025-09-24 17:02:45","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"167ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 17:03:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:03:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:03:17","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:03:17","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":23016,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 17:06:05","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"881ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":23016,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 17:06:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"243ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 17:22:24","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"179ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:22:24","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"170ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:22:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"171ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:22:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"300ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:56:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"176ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:00","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"165ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"171ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:26","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:27","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:30","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:30","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"166ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:32","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:32","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"173ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:34","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"170ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:35","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"158ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:47","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"158ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:47","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:57:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":23016,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 17:58:05","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"899ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":23016,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 17:58:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"187ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:59:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"37ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"167ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":23016,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 17:59:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"12ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"43ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"5ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"78ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"6ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"12ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"4ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"4ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:08","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"4ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"82ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"9ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"4ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"15ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:13","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:13","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:14","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"15ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:15","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:15","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:15","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:16","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:17","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:17","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:18","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:19","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:20","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:20","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:20","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:22","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:23","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:23","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:23","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":23016,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 17:59:24","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":10656,"service":"road-rw-api","timestamp":"2025-09-24 18:02:02"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":10656,"resource":"user","service":"road-rw-api","timestamp":"2025-09-24 18:02:07","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"1735ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":10656,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-24 18:02:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":10656,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 18:02:39","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":10656,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 18:02:39","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":10656,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 18:04:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:42","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"170ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":10656,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:45","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:45","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:45","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:45","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:45","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:46","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:47","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:47","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:47","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:47","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"4ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:51","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"7ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:52","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:52","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:52","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:52","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:52","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:53","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:54","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:57","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:57","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:58","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:04:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:00","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:00","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:00","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"4ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"5ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"5ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"4ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:03","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"4ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"0ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/email/config","pid":10656,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-24 18:05:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":12476,"service":"road-rw-api","timestamp":"2025-09-24 18:10:20"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":13692,"service":"road-rw-api","timestamp":"2025-09-25 10:35:59"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: forgot_password","pid":13692,"resource":"user","service":"road-rw-api","timestamp":"2025-09-25 10:37:16","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"4"}
{"duration":"1207ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/forgot-password","pid":13692,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 10:37:16","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: forgot_password","pid":13692,"resource":"user","service":"road-rw-api","timestamp":"2025-09-25 10:37:35","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"4"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/forgot-password","pid":13692,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 10:37:35","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: forgot_password","pid":13692,"resource":"user","service":"road-rw-api","timestamp":"2025-09-25 10:37:37","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"4"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/forgot-password","pid":13692,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 10:37:37","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":13692,"resource":"user","service":"road-rw-api","timestamp":"2025-09-25 10:37:52","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"505ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":13692,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 10:37:52","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"Pool de conex√µes PostgreSQL fechado","pid":13692,"service":"road-rw-api","timestamp":"2025-09-25 14:43:25"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":15204,"service":"road-rw-api","timestamp":"2025-09-25 14:44:02"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":15204,"resource":"user","service":"road-rw-api","timestamp":"2025-09-25 14:44:07","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"1694ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":15204,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 14:44:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:44:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras/stats","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:44:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:44:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras/stats","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:44:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras?nome=&uf=CE&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:54:47","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras?nome=&uf=CE&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:54:48","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras?nome=&uf=all&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:54:50","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:54:51","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"2ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:54:52","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"170ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":15204,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 14:58:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"167ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":15204,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 14:58:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:58:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras/stats","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:58:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:58:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras/stats","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 14:58:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 15:00:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras/stats","pid":15204,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 15:00:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","errors":[{"field":"nome","message":"\"nome\" is not allowed to be empty","value":""},{"field":"municipio","message":"\"municipio\" is not allowed to be empty","value":""},{"field":"uf","message":"\"uf\" is not allowed to be empty","value":""}],"level":"warn","message":"Erro de valida√ß√£o da query:","pid":15204,"query":{"limit":"20","municipio":"","nome":"","orderBy":"created_at","orderDirection":"DESC","page":"1","uf":""},"service":"road-rw-api","timestamp":"2025-09-25 15:01:16"}
{"duration":"217ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":400,"timestamp":"2025-09-25 15:01:16","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1660ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":15204,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 15:01:17","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"176ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":15204,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:01:23","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":15204,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:01:23","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","errors":[{"field":"nome","message":"\"nome\" is not allowed to be empty","value":""},{"field":"municipio","message":"\"municipio\" is not allowed to be empty","value":""},{"field":"uf","message":"\"uf\" is not allowed to be empty","value":""}],"level":"warn","message":"Erro de valida√ß√£o da query:","pid":15204,"query":{"limit":"20","municipio":"","nome":"","orderBy":"created_at","orderDirection":"DESC","page":"1","uf":""},"service":"road-rw-api","timestamp":"2025-09-25 15:01:24"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":400,"timestamp":"2025-09-25 15:01:24","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"338ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":15204,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:01:24","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","errors":[{"field":"nome","message":"\"nome\" is not allowed to be empty","value":""},{"field":"municipio","message":"\"municipio\" is not allowed to be empty","value":""},{"field":"uf","message":"\"uf\" is not allowed to be empty","value":""}],"level":"warn","message":"Erro de valida√ß√£o da query:","pid":15204,"query":{"limit":"20","municipio":"","nome":"","orderBy":"created_at","orderDirection":"DESC","page":"1","uf":""},"service":"road-rw-api","timestamp":"2025-09-25 15:01:25"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":400,"timestamp":"2025-09-25 15:01:25","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","errors":[{"field":"nome","message":"\"nome\" is not allowed to be empty","value":""},{"field":"municipio","message":"\"municipio\" is not allowed to be empty","value":""},{"field":"uf","message":"\"uf\" is not allowed to be empty","value":""}],"level":"warn","message":"Erro de valida√ß√£o da query:","pid":15204,"query":{"limit":"20","municipio":"","nome":"","orderBy":"created_at","orderDirection":"DESC","page":"1","uf":""},"service":"road-rw-api","timestamp":"2025-09-25 15:02:43"}
{"duration":"181ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":15204,"service":"road-rw-api","statusCode":400,"timestamp":"2025-09-25 15:02:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":15204,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:03:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":15204,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:03:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"316ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":15204,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:03:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":5464,"service":"road-rw-api","timestamp":"2025-09-25 15:07:43"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":18320,"service":"road-rw-api","timestamp":"2025-09-25 15:19:33"}
{"duration":"1383ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":18320,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:19:49","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":18320,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:19:49","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"498ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":18320,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:19:49","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":12036,"service":"road-rw-api","timestamp":"2025-09-25 15:20:32"}
{"duration":"1370ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:20:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:20:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1425ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:20:57","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"341ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:29:36","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"3ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":12036,"service":"road-rw-api","statusCode":404,"timestamp":"2025-09-25 15:29:47","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"667ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":12036,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 15:30:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:30:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"185ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:30:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"317ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:30:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"645ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:30:13","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:32:01","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:32:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"328ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:32:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"656ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:32:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:32:39","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:32:39","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"660ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?nome=&uf=&municipio=&page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:32:40","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1455ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:32:41","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1237ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:34:09","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:34:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1278ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 15:34:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1683ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=20&orderBy=created_at&orderDirection=DESC","pid":12036,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 15:34:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1194ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:12:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"172ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:13:00","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1284ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:13:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1657ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12036,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 17:13:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1230ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:13:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"160ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:13:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1280ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:13:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1634ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:13:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"663ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/38","pid":12036,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 17:14:05","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1262ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:16:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"169ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:16:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"661ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/38","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:16:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1303ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:16:48","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1611ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:16:48","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"166ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:16:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:16:55","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"324ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:16:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"655ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:16:59","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"662ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/38","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:17:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1245ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:02","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1291ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1605ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:04","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"633ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/38","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:12","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:27","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"163ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:27","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"314ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:29","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"633ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:29","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"158ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:34","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"164ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:34","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"314ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:35","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"646ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:36","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"636ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/38","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:18:39","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"162ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:19:25","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"168ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:19:25","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"630ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:19:26","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1299ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:19:26","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1124ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:21:50","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"159ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/auth/verify","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:21:50","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"645ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/38","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:24:57","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1268ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:26:35","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1585ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12036,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-25 17:26:35","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","errors":[{"field":"id","message":"ID deve ser um n√∫mero","value":"novo"}],"level":"warn","message":"Erro de valida√ß√£o dos par√¢metros:","params":{"id":"novo"},"pid":12036,"service":"road-rw-api","timestamp":"2025-09-25 17:29:50"}
{"duration":"1242ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/novo","pid":12036,"service":"road-rw-api","statusCode":400,"timestamp":"2025-09-25 17:29:50","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","errors":[{"field":"id","message":"ID deve ser um n√∫mero","value":"novo"}],"level":"warn","message":"Erro de valida√ß√£o dos par√¢metros:","params":{"id":"novo"},"pid":12036,"service":"road-rw-api","timestamp":"2025-09-25 17:29:51"}
{"duration":"161ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/novo","pid":12036,"service":"road-rw-api","statusCode":400,"timestamp":"2025-09-25 17:29:51","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1601ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10&uf=AL","pid":12036,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 17:30:07","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"648ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10&uf=SP","pid":12036,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 17:30:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"639ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/35","pid":12036,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-25 17:30:21","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"environment":"development","level":"info","message":"HTTP server listening on http://0.0.0.0:3001","pid":12568,"service":"road-rw-api","timestamp":"2025-09-26 11:19:01"}
{"environment":"development","ip":"127.0.0.1","level":"info","message":"AUDIT: login","pid":12568,"resource":"user","service":"road-rw-api","timestamp":"2025-09-26 11:19:06","type":"audit","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36","userId":"1"}
{"duration":"1662ms","environment":"development","ip":"127.0.0.1","level":"info","message":"POST /api/auth/login","pid":12568,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-26 11:19:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1261ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12568,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-26 11:19:10","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1763ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12568,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-26 11:19:11","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"648ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/36","pid":12568,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-26 11:19:22","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1282ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12568,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-26 11:20:43","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"1612ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12568,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-26 11:20:44","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"314ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12568,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-26 11:20:51","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"637ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12568,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-26 11:20:51","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"650ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/39","pid":12568,"service":"road-rw-api","statusCode":200,"timestamp":"2025-09-26 11:20:56","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"631ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/38","pid":12568,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-26 11:21:06","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"317ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras/stats","pid":12568,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-26 11:51:25","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}
{"duration":"662ms","environment":"development","ip":"127.0.0.1","level":"info","message":"GET /api/transportadoras?page=1&limit=10","pid":12568,"service":"road-rw-api","statusCode":304,"timestamp":"2025-09-26 11:51:25","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"}



================================================================================
ARQUIVO: C:\web\rw-nv\backend\logs\error.log
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\ocker-compose.jobs.yml
================================================================================

// ==========================================
// DOCKER COMPOSE PARA DESENVOLVIMENTO
// ==========================================
// backend/docker-compose.jobs.yml

version: '3.8'

services:
  road-rw-jobs:
    build:
      context: .
      dockerfile: Dockerfile.jobs
    container_name: road-rw-jobs
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=road_rw
      - DB_USER=postgres
      - DB_PASSWORD=password
      - JOBS_ENABLED=true
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - postgres
    networks:
      - road-rw-network
    healthcheck:
      test: ["CMD", "node", "scripts/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    container_name: road-rw-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=road_rw
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - road-rw-network
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    container_name: road-rw-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - road-rw-network
    ports:
      - "6379:6379"

networks:
  road-rw-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:


================================================================================
ARQUIVO: C:\web\rw-nv\backend\package-lock.json
================================================================================

{
  "name": "road-rw-backend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "road-rw-backend",
      "version": "1.0.0",
      "license": "MIT",
      "dependencies": {
        "async": "^3.2.4",
        "axios": "^1.12.1",
        "bcryptjs": "^2.4.3",
        "compression": "^1.7.4",
        "cors": "^2.8.5",
        "dotenv": "^16.3.1",
        "express": "^4.18.2",
        "express-rate-limit": "^6.8.1",
        "express-validator": "^7.0.1",
        "helmet": "^7.0.0",
        "joi": "^17.9.2",
        "jsonwebtoken": "^9.0.2",
        "moment": "^2.29.4",
        "multer": "^1.4.5-lts.1",
        "node-cron": "^3.0.3",
        "nodemailer": "^6.9.4",
        "opossum": "^6.4.0",
        "p-limit": "^4.0.0",
        "p-retry": "^5.1.2",
        "pg": "^8.11.3",
        "redis": "^4.6.7",
        "swagger-jsdoc": "^6.2.8",
        "swagger-ui-express": "^5.0.0",
        "uuid": "^9.0.0",
        "winston": "^3.10.0",
        "xml2js": "^0.6.2"
      },
      "devDependencies": {
        "@types/node": "^20.4.5",
        "eslint": "^8.45.0",
        "eslint-config-standard": "^17.1.0",
        "eslint-plugin-import": "^2.28.0",
        "eslint-plugin-n": "^16.0.1",
        "eslint-plugin-promise": "^6.1.1",
        "jest": "^29.6.2",
        "nodemon": "^3.0.1",
        "supertest": "^6.3.3"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      }
    },
    "node_modules/@apidevtools/json-schema-ref-parser": {
      "version": "9.1.2",
      "resolved": "https://registry.npmjs.org/@apidevtools/json-schema-ref-parser/-/json-schema-ref-parser-9.1.2.tgz",
      "integrity": "sha512-r1w81DpR+KyRWd3f+rk6TNqMgedmAxZP5v5KWlXQWlgMUUtyEJch0DKEci1SorPMiSeM8XPl7MZ3miJ60JIpQg==",
      "dependencies": {
        "@jsdevtools/ono": "^7.1.3",
        "@types/json-schema": "^7.0.6",
        "call-me-maybe": "^1.0.1",
        "js-yaml": "^4.1.0"
      }
    },
    "node_modules/@apidevtools/openapi-schemas": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@apidevtools/openapi-schemas/-/openapi-schemas-2.1.0.tgz",
      "integrity": "sha512-Zc1AlqrJlX3SlpupFGpiLi2EbteyP7fXmUOGup6/DnkRgjP9bgMM/ag+n91rsv0U1Gpz0H3VILA/o3bW7Ua6BQ==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@apidevtools/swagger-methods": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@apidevtools/swagger-methods/-/swagger-methods-3.0.2.tgz",
      "integrity": "sha512-QAkD5kK2b1WfjDS/UQn/qQkbwF31uqRjPTrsCs5ZG9BQGAkjwvqGFjjPqAuzac/IYzpPtRzjCP1WrTuAIjMrXg=="
    },
    "node_modules/@apidevtools/swagger-parser": {
      "version": "10.0.3",
      "resolved": "https://registry.npmjs.org/@apidevtools/swagger-parser/-/swagger-parser-10.0.3.tgz",
      "integrity": "sha512-sNiLY51vZOmSPFZA5TF35KZ2HbgYklQnTSDnkghamzLb3EkNtcQnrBQEj5AOCxHpTtXpqMCRM1CrmV2rG6nw4g==",
      "dependencies": {
        "@apidevtools/json-schema-ref-parser": "^9.0.6",
        "@apidevtools/openapi-schemas": "^2.0.4",
        "@apidevtools/swagger-methods": "^3.0.2",
        "@jsdevtools/ono": "^7.1.3",
        "call-me-maybe": "^1.0.1",
        "z-schema": "^5.0.1"
      },
      "peerDependencies": {
        "openapi-types": ">=7"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.4.tgz",
      "integrity": "sha512-YsmSKC29MJwf0gF8Rjjrg5LQCmyh+j/nD8/eP7f+BeoQTKYqs9RoWbjGOdy0+1Ekr68RJZMUOPVQaQisnIo4Rw==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.4.tgz",
      "integrity": "sha512-2BCOP7TN8M+gVDj7/ht3hsaO/B/n5oDbiAyyvnRlNOs+u1o+JWNYTQrmpuNp1/Wq2gcFrI01JAW+paEKDMx/CA==",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.28.3",
        "@babel/helpers": "^7.28.4",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.4",
        "@babel/types": "^7.28.4",
        "@jridgewell/remapping": "^2.3.5",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@babel/core/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/@babel/generator": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.3.tgz",
      "integrity": "sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==",
      "dev": true,
      "dependencies": {
        "@babel/parser": "^7.28.3",
        "@babel/types": "^7.28.2",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz",
      "integrity": "sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==",
      "dev": true,
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.4.tgz",
      "integrity": "sha512-HFN59MmQXGHVyYadKLVumYsA9dBFun/ldYxipEjzA4196jpLZd8UjEEBLkbEkvfYreDqJhZxYAWFPtrfhNpj4w==",
      "dev": true,
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.4.tgz",
      "integrity": "sha512-yZbBqeM6TkpP9du/I2pUZnJsRMGGvOuIrhjzC1AwHwW+6he4mni6Bp/m8ijn0iOuZuPI2BfkCoSRunpyjnrQKg==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.28.4"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-static-block": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz",
      "integrity": "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-attributes": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.27.1.tgz",
      "integrity": "sha512-oFT0FrKHgF53f4vOsZGi2Hh3I35PfSmVs4IBFLFj4dnafP+hIWDLg3VyKmUHfLoLHlyxY4C7DGtmHuJgn+IGww==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.27.1.tgz",
      "integrity": "sha512-y8YTNIeKoyhGd9O0Jiyzyyqk8gdjnumGTQPsz0xOZOQ2RmkVJeZ1vmmfIvFEKqucBG6axJGBZDE/7iI5suUI/w==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-private-property-in-object": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz",
      "integrity": "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.27.1.tgz",
      "integrity": "sha512-xfYCBMxveHrRMnAWl1ZlPXOZjzkN82THFvLhQhFXFt81Z5HnN+EtUkZhv/zcKpmT3fzmWZB0ywiBrbC3vogbwQ==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.4.tgz",
      "integrity": "sha512-YEzuboP2qvQavAcjgQNVgsvHIDv6ZpwXvcvjmyySP2DIMuByS/6ioU5G9pYrWHM6T2YDfc7xga9iNzYOs12CFQ==",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@babel/traverse/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/@babel/types": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.4.tgz",
      "integrity": "sha512-bkFqkLhh3pMBUQQkpVgWDWq/lqzc2678eUyDlTBhRqhCHFguYYGM0Efga7tYk4TogG/3x0EEl66/OQ+WGbWB/Q==",
      "dev": true,
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "dev": true
    },
    "node_modules/@colors/colors": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/@colors/colors/-/colors-1.6.0.tgz",
      "integrity": "sha512-Ir+AOibqzrIsL6ajt3Rz3LskB7OiMVHqltZmspbW/TJuTVuyOMirVqAkjfY6JISiLHgyNqicAC8AyHHGzNd/dA==",
      "engines": {
        "node": ">=0.1.90"
      }
    },
    "node_modules/@dabh/diagnostics": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@dabh/diagnostics/-/diagnostics-2.0.3.tgz",
      "integrity": "sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==",
      "dependencies": {
        "colorspace": "1.1.x",
        "enabled": "2.0.x",
        "kuler": "^2.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.9.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz",
      "integrity": "sha512-ayVFHdtZ+hsq1t2Dy24wCmGXGe4q9Gu3smhLYALJrr473ZH27MsnSL+LKUlimp4BWJqMDMLmPpx/Q9R3OAlL4g==",
      "dev": true,
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
      "dev": true,
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.6.0",
        "globals": "^13.19.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/@eslint/js": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz",
      "integrity": "sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==",
      "dev": true,
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ=="
    },
    "node_modules/@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@humanwhocodes/config-array": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz",
      "integrity": "sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==",
      "deprecated": "Use @eslint/config-array instead",
      "dev": true,
      "dependencies": {
        "@humanwhocodes/object-schema": "^2.0.3",
        "debug": "^4.3.1",
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@humanwhocodes/config-array/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@humanwhocodes/config-array/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/object-schema": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
      "deprecated": "Use @eslint/object-schema instead",
      "dev": true
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "dev": true,
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "dev": true,
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "dev": true,
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "dev": true,
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "dev": true,
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "dev": true,
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "dev": true,
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.7.0.tgz",
      "integrity": "sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==",
      "dev": true,
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/core": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.7.0.tgz",
      "integrity": "sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==",
      "dev": true,
      "dependencies": {
        "@jest/console": "^29.7.0",
        "@jest/reporters": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^29.7.0",
        "jest-config": "^29.7.0",
        "jest-haste-map": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-regex-util": "^29.6.3",
        "jest-resolve": "^29.7.0",
        "jest-resolve-dependencies": "^29.7.0",
        "jest-runner": "^29.7.0",
        "jest-runtime": "^29.7.0",
        "jest-snapshot": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "jest-watcher": "^29.7.0",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.7.0",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/environment": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.7.0.tgz",
      "integrity": "sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==",
      "dev": true,
      "dependencies": {
        "@jest/fake-timers": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "jest-mock": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.7.0.tgz",
      "integrity": "sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==",
      "dev": true,
      "dependencies": {
        "expect": "^29.7.0",
        "jest-snapshot": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect-utils": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.7.0.tgz",
      "integrity": "sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==",
      "dev": true,
      "dependencies": {
        "jest-get-type": "^29.6.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.7.0.tgz",
      "integrity": "sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==",
      "dev": true,
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@sinonjs/fake-timers": "^10.0.2",
        "@types/node": "*",
        "jest-message-util": "^29.7.0",
        "jest-mock": "^29.7.0",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.7.0.tgz",
      "integrity": "sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==",
      "dev": true,
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/expect": "^29.7.0",
        "@jest/types": "^29.6.3",
        "jest-mock": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.7.0.tgz",
      "integrity": "sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==",
      "dev": true,
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@jridgewell/trace-mapping": "^0.3.18",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^6.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-worker": "^29.7.0",
        "slash": "^3.0.0",
        "string-length": "^4.0.1",
        "strip-ansi": "^6.0.0",
        "v8-to-istanbul": "^9.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/schemas": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
      "integrity": "sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==",
      "dev": true,
      "dependencies": {
        "@sinclair/typebox": "^0.27.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/source-map": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.3.tgz",
      "integrity": "sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==",
      "dev": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.18",
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.7.0.tgz",
      "integrity": "sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==",
      "dev": true,
      "dependencies": {
        "@jest/console": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.7.0.tgz",
      "integrity": "sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==",
      "dev": true,
      "dependencies": {
        "@jest/test-result": "^29.7.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.7.0.tgz",
      "integrity": "sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==",
      "dev": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/types": "^29.6.3",
        "@jridgewell/trace-mapping": "^0.3.18",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "jest-regex-util": "^29.6.3",
        "jest-util": "^29.7.0",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "write-file-atomic": "^4.0.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.3.tgz",
      "integrity": "sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==",
      "dev": true,
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
      "dev": true,
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/remapping": {
      "version": "2.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/remapping/-/remapping-2.3.5.tgz",
      "integrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==",
      "dev": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "dev": true
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.31",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
      "integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
      "dev": true,
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@jsdevtools/ono": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/@jsdevtools/ono/-/ono-7.1.3.tgz",
      "integrity": "sha512-4JQNk+3mVzK3xh2rqd6RB4J46qUR19azEHBneZyTZM+c456qOrbbM/5xcR8huNCCcbVt7+UmizG6GuUvPvKUYg=="
    },
    "node_modules/@noble/hashes": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.8.0.tgz",
      "integrity": "sha512-jCs9ldd7NwzpgXDIf6P3+NrHh9/sD6CQdxHyjQI+h/6rDNo88ypBxxz45UDuZHz9r3tNz7N/VInSVoVdtXEI4A==",
      "dev": true,
      "engines": {
        "node": "^14.21.3 || >=16"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@paralleldrive/cuid2": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/@paralleldrive/cuid2/-/cuid2-2.2.2.tgz",
      "integrity": "sha512-ZOBkgDwEdoYVlSeRbYYXs0S9MejQofiVYoTbKzy/6GQa39/q5tQU2IX46+shYnUkpEl3wc+J6wRlar7r2EK2xA==",
      "dev": true,
      "dependencies": {
        "@noble/hashes": "^1.1.5"
      }
    },
    "node_modules/@redis/bloom": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-1.2.0.tgz",
      "integrity": "sha512-HG2DFjYKbpNmVXsa0keLHp/3leGJz1mjh09f2RLGGLQZzSHpkmZWuwJbAvo3QcRY8p80m5+ZdXZdYOSBLlp7Cg==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/client": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.6.1.tgz",
      "integrity": "sha512-/KCsg3xSlR+nCK8/8ZYSknYxvXHwubJrU82F3Lm1Fp6789VQ0/3RJKfsmRXjqfaTA++23CvC3hqmqe/2GEt6Kw==",
      "dependencies": {
        "cluster-key-slot": "1.1.2",
        "generic-pool": "3.9.0",
        "yallist": "4.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@redis/client/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/@redis/graph": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@redis/graph/-/graph-1.1.1.tgz",
      "integrity": "sha512-FEMTcTHZozZciLRl6GiiIB4zGm5z5F3F6a6FZCyrfxdKOhFlGkiAqlexWMBzCi4DcRoyiOsuLfW+cjlGWyExOw==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/json": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/@redis/json/-/json-1.0.7.tgz",
      "integrity": "sha512-6UyXfjVaTBTJtKNG4/9Z8PSpKE6XgSyEb8iwaqDcy+uKrd/DGYHTWkUdnQDyzm727V7p21WUMhsqz5oy65kPcQ==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/search": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@redis/search/-/search-1.2.0.tgz",
      "integrity": "sha512-tYoDBbtqOVigEDMAcTGsRlMycIIjwMCgD8eR2t0NANeQmgK/lvxNAvYyb6bZDD4frHRhIHkJu2TBRvB0ERkOmw==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@redis/time-series": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-1.1.0.tgz",
      "integrity": "sha512-c1Q99M5ljsIuc4YdaCwfUEXsofakb9c8+Zse2qxTadu8TalLXuAESzLvFAvNVbkmSlvlzIQOLpBCmWI9wTOt+g==",
      "peerDependencies": {
        "@redis/client": "^1.0.0"
      }
    },
    "node_modules/@rtsao/scc": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@rtsao/scc/-/scc-1.1.0.tgz",
      "integrity": "sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==",
      "dev": true
    },
    "node_modules/@scarf/scarf": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/@scarf/scarf/-/scarf-1.4.0.tgz",
      "integrity": "sha512-xxeapPiUXdZAE3che6f3xogoJPeZgig6omHEy1rIY5WVsB3H2BHNnZH+gHG6x91SCWyQCzWGsuL2Hh3ClO5/qQ==",
      "hasInstallScript": true
    },
    "node_modules/@sideway/address": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.5.tgz",
      "integrity": "sha512-IqO/DUQHUkPeixNQ8n0JA6102hT9CmaljNTPmQ1u8MEhBo/R4Q8eKLN/vGZxuebwOroDB4cbpjheD4+/sKFK4Q==",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg=="
    },
    "node_modules/@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==",
      "dev": true
    },
    "node_modules/@sinonjs/commons": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.1.tgz",
      "integrity": "sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==",
      "dev": true,
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
      "dev": true,
      "dependencies": {
        "@sinonjs/commons": "^3.0.0"
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.28.0.tgz",
      "integrity": "sha512-8PvcXf70gTDZBgt9ptxJ8elBeBjcLOAcOtoO/mPJjtji1+CdGbHgm77om1GrsPxsiE+uXIpNSK64UYaIwQXd4Q==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.28.2"
      }
    },
    "node_modules/@types/graceful-fs": {
      "version": "4.1.9",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.9.tgz",
      "integrity": "sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
      "dev": true
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz",
      "integrity": "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==",
      "dev": true,
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
      "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
      "dev": true,
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA=="
    },
    "node_modules/@types/json5": {
      "version": "0.0.29",
      "resolved": "https://registry.npmjs.org/@types/json5/-/json5-0.0.29.tgz",
      "integrity": "sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==",
      "dev": true
    },
    "node_modules/@types/node": {
      "version": "20.19.13",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.13.tgz",
      "integrity": "sha512-yCAeZl7a0DxgNVteXFHt9+uyFbqXGy/ShC4BlcHkoE0AfGXYv/BUiplV72DjMYXHDBXFjhvr6DD1NiRVfB4j8g==",
      "dev": true,
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@types/retry": {
      "version": "0.12.1",
      "resolved": "https://registry.npmjs.org/@types/retry/-/retry-0.12.1.tgz",
      "integrity": "sha512-xoDlM2S4ortawSWORYqsdU+2rxdh4LRW9ytc3zmT37RIKQh6IHyKwwtKhKis9ah8ol07DCkZxPt8BBvPjC6v4g=="
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
      "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
      "dev": true
    },
    "node_modules/@types/triple-beam": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/triple-beam/-/triple-beam-1.3.5.tgz",
      "integrity": "sha512-6WaYesThRMCl19iryMYP7/x2OVgCtbIVflDGFpWnb9irXI3UjYE4AzmYuiUKY1AJstGijoY+MgUszMgRxIYTYw=="
    },
    "node_modules/@types/yargs": {
      "version": "17.0.33",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
      "integrity": "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==",
      "dev": true,
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.3",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
      "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
      "dev": true
    },
    "node_modules/@ungap/structured-clone": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
      "dev": true
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/accepts/node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "dev": true,
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-escapes/node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/append-field": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
      "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw=="
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q=="
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "node_modules/array-includes": {
      "version": "3.1.9",
      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.9.tgz",
      "integrity": "sha512-FmeCCAenzH0KH381SPT5FZmiA/TmpndpcaShhfgEN9eCVjnFBqq3l1xrI42y8+PPLI6hypzou4GXw00WHmPBLQ==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.24.0",
        "es-object-atoms": "^1.1.1",
        "get-intrinsic": "^1.3.0",
        "is-string": "^1.1.1",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.findlastindex": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.6.tgz",
      "integrity": "sha512-F/TKATkzseUExPlfvmwQKGITM3DGTK+vkAsCZoDc5daVygbJBnjEUCbgkAvVFsgfXfX4YIqZ/27G3k3tdXrTxQ==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-shim-unscopables": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flat": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.3.tgz",
      "integrity": "sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flatmap": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.3.tgz",
      "integrity": "sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
      "dev": true,
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "dev": true
    },
    "node_modules/async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA=="
    },
    "node_modules/async-function": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "dev": true,
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/axios": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.12.1.tgz",
      "integrity": "sha512-Kn4kbSXpkFHCGE6rBFNwIv0GQs4AvDT80jlveJDKFxjbTYMUeB4QtsdPCv6H8Cm19Je7IU6VFtRl2zWZI0rudQ==",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.4",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/babel-jest": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.7.0.tgz",
      "integrity": "sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==",
      "dev": true,
      "dependencies": {
        "@jest/transform": "^29.7.0",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^29.6.3",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.8.0"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-istanbul/node_modules/istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "dev": true,
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.6.3.tgz",
      "integrity": "sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==",
      "dev": true,
      "dependencies": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.1.14",
        "@types/babel__traverse": "^7.0.6"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.2.0.tgz",
      "integrity": "sha512-E/VlAEzRrsLEb2+dv8yp3bo4scof3l9nR4lrld+Iy5NyVqgVYUJnDAmunkhPMisRI32Qc4iRiz425d8vM++2fg==",
      "dev": true,
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.12.13",
        "@babel/plugin-syntax-class-static-block": "^7.14.5",
        "@babel/plugin-syntax-import-attributes": "^7.24.7",
        "@babel/plugin-syntax-import-meta": "^7.10.4",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
        "@babel/plugin-syntax-top-level-await": "^7.14.5"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0 || ^8.0.0-0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.6.3.tgz",
      "integrity": "sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==",
      "dev": true,
      "dependencies": {
        "babel-plugin-jest-hoist": "^29.6.3",
        "babel-preset-current-node-syntax": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "node_modules/bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.4",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.4.tgz",
      "integrity": "sha512-4jYpcjabC606xJ3kw2QwGEZKX0Aw7sgQdZCvIK9dhVSPh76BKo+C+btT1RRofH7B+8iNpEbgGNVWiLki5q93yg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "caniuse-lite": "^1.0.30001737",
        "electron-to-chromium": "^1.5.211",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "dev": true,
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ=="
    },
    "node_modules/builtin-modules": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-3.3.0.tgz",
      "integrity": "sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw==",
      "dev": true,
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/builtins": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/builtins/-/builtins-5.1.0.tgz",
      "integrity": "sha512-SW9lzGTLvWTP1AY8xeAMZimqDrIaSdLQUcVr9DMef51niJ022Ri87SwRRKYm4A6iHfkPaiVUu/Duw2Wc4J7kKg==",
      "dev": true,
      "dependencies": {
        "semver": "^7.0.0"
      }
    },
    "node_modules/builtins/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "dev": true,
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-me-maybe": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-me-maybe/-/call-me-maybe-1.0.2.tgz",
      "integrity": "sha512-HpX65o1Hnr9HH25ojC1YGs7HCQLq0GCOibSaWER0eNpgJ/Z1MZv2mTc7+xh6WOPxbRVcmgbv4hGU+uSQ/2xFZQ=="
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001741",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001741.tgz",
      "integrity": "sha512-QGUGitqsc8ARjLdgAfxETDhRbJ0REsP6O3I96TAth/mVjh2cYzN2u+3AzPP3aVSm2FehEItaJw1xd+IGBXWeSw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ]
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "dev": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chokidar/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/ci-info": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.9.0.tgz",
      "integrity": "sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cjs-module-lexer": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.3.tgz",
      "integrity": "sha512-9z8TZaGM1pfswYeXrUpzPrkx8UnWYdhJclsiYMm6x/w5+nN+8Tf/LnAgfLGQCm59qAOxU8WwHEq2vNwF6i4j+Q==",
      "dev": true
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "dev": true,
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/cluster-key-slot": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
      "integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "dev": true,
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "dev": true
    },
    "node_modules/color": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/color/-/color-3.2.1.tgz",
      "integrity": "sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==",
      "dependencies": {
        "color-convert": "^1.9.3",
        "color-string": "^1.6.0"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/color-string": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
      "dependencies": {
        "color-name": "^1.0.0",
        "simple-swizzle": "^0.2.2"
      }
    },
    "node_modules/color/node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/color/node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
    },
    "node_modules/colorspace": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/colorspace/-/colorspace-1.1.4.tgz",
      "integrity": "sha512-BgvKJiuVu1igBUF2kEjRCZXol6wiiGbY5ipL/oVPwm0BL9sIpMIzM8IK7vwuxIIzOXMV3Ey5w+vxhm0rR/TN8w==",
      "dependencies": {
        "color": "^3.1.3",
        "text-hex": "1.0.x"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-6.2.0.tgz",
      "integrity": "sha512-zP4jEKbe8SHzKJYQmq8Y9gYjtO/POJLgIdKgV7B9qNmABVFVc+ctqSX6iXh4mCpJfRBOabiZ2YKPg8ciDw6C+Q==",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/component-emitter": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.1.tgz",
      "integrity": "sha512-T0+barUSQRTUQASh8bx02dl+DhF54GtIDY13Y3m9oWTklKbb3Wv974meRpeZ3lp1JpLVECWWNHC4vaG2XHXouQ==",
      "dev": true,
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/compressible": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.18.tgz",
      "integrity": "sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==",
      "dependencies": {
        "mime-db": ">= 1.43.0 < 2"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/compression": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/compression/-/compression-1.8.1.tgz",
      "integrity": "sha512-9mAqGPHLakhCLeNyxPkK4xVo746zQ/czLH1Ky+vkitMnWfWZps8r0qXuwhwizagCRttsL4lfG4pIOvaWLpAP0w==",
      "dependencies": {
        "bytes": "3.1.2",
        "compressible": "~2.0.18",
        "debug": "2.6.9",
        "negotiator": "~0.6.4",
        "on-headers": "~1.1.0",
        "safe-buffer": "5.2.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
    },
    "node_modules/concat-stream": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
      "engines": [
        "node >= 0.8"
      ],
      "dependencies": {
        "buffer-from": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^2.2.2",
        "typedarray": "^0.0.6"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "node_modules/cookiejar": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz",
      "integrity": "sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==",
      "dev": true
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ=="
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/create-jest": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/create-jest/-/create-jest-29.7.0.tgz",
      "integrity": "sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==",
      "dev": true,
      "dependencies": {
        "@jest/types": "^29.6.3",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-config": "^29.7.0",
        "jest-util": "^29.7.0",
        "prompts": "^2.0.1"
      },
      "bin": {
        "create-jest": "bin/create-jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/inspect-js"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/dedent": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.7.0.tgz",
      "integrity": "sha512-HGFtf8yhuhGhqO07SV79tRp+br4MnbdjeVxotpn1QBl30pcLLCQjX5b2295ll0fv8RKDKsmWYrl05usHM9CewQ==",
      "dev": true,
      "peerDependencies": {
        "babel-plugin-macros": "^3.1.0"
      },
      "peerDependenciesMeta": {
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "dev": true,
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "dev": true,
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "dev": true,
      "dependencies": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "node_modules/diff-sequences": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
      "integrity": "sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==",
      "dev": true,
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/dotenv": {
      "version": "16.6.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.216",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.216.tgz",
      "integrity": "sha512-uVgsufJ+qIiOsZBmqkM2AGPn3gbqPySHl/SLKXJ70nowhI0VsRX4aog+R9EUL2bOjqPPhfR9pG8j8s4Zk4xq+A==",
      "dev": true
    },
    "node_modules/emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true
    },
    "node_modules/enabled": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/enabled/-/enabled-2.0.0.tgz",
      "integrity": "sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ=="
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "dev": true,
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.24.0",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
      "dev": true,
      "dependencies": {
        "array-buffer-byte-length": "^1.0.2",
        "arraybuffer.prototype.slice": "^1.0.4",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "data-view-buffer": "^1.0.2",
        "data-view-byte-length": "^1.0.2",
        "data-view-byte-offset": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-set-tostringtag": "^2.1.0",
        "es-to-primitive": "^1.3.0",
        "function.prototype.name": "^1.1.8",
        "get-intrinsic": "^1.3.0",
        "get-proto": "^1.0.1",
        "get-symbol-description": "^1.1.0",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "internal-slot": "^1.1.0",
        "is-array-buffer": "^3.0.5",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.2",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.2.1",
        "is-set": "^2.0.3",
        "is-shared-array-buffer": "^1.0.4",
        "is-string": "^1.1.1",
        "is-typed-array": "^1.1.15",
        "is-weakref": "^1.1.1",
        "math-intrinsics": "^1.1.0",
        "object-inspect": "^1.13.4",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.7",
        "own-keys": "^1.0.1",
        "regexp.prototype.flags": "^1.5.4",
        "safe-array-concat": "^1.1.3",
        "safe-push-apply": "^1.0.0",
        "safe-regex-test": "^1.1.0",
        "set-proto": "^1.0.0",
        "stop-iteration-iterator": "^1.1.0",
        "string.prototype.trim": "^1.2.10",
        "string.prototype.trimend": "^1.0.9",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.3",
        "typed-array-byte-length": "^1.0.3",
        "typed-array-byte-offset": "^1.0.4",
        "typed-array-length": "^1.0.7",
        "unbox-primitive": "^1.1.0",
        "which-typed-array": "^1.1.19"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
      "dev": true,
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
      "dev": true,
      "dependencies": {
        "is-callable": "^1.2.7",
        "is-date-object": "^1.0.5",
        "is-symbol": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.1.tgz",
      "integrity": "sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==",
      "deprecated": "This version is no longer supported. Please see https://eslint.org/version-support for other options.",
      "dev": true,
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.6.1",
        "@eslint/eslintrc": "^2.1.4",
        "@eslint/js": "8.57.1",
        "@humanwhocodes/config-array": "^0.13.0",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@nodelib/fs.walk": "^1.2.8",
        "@ungap/structured-clone": "^1.2.0",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.2.2",
        "eslint-visitor-keys": "^3.4.3",
        "espree": "^9.6.1",
        "esquery": "^1.4.2",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "globals": "^13.19.0",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "is-path-inside": "^3.0.3",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-compat-utils": {
      "version": "0.5.1",
      "resolved": "https://registry.npmjs.org/eslint-compat-utils/-/eslint-compat-utils-0.5.1.tgz",
      "integrity": "sha512-3z3vFexKIEnjHE3zCMRo6fn/e44U7T1khUjg+Hp0ZQMCigh28rALD0nPFBcGZuiLC5rLZa2ubQHDRln09JfU2Q==",
      "dev": true,
      "dependencies": {
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12"
      },
      "peerDependencies": {
        "eslint": ">=6.0.0"
      }
    },
    "node_modules/eslint-compat-utils/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/eslint-config-standard": {
      "version": "17.1.0",
      "resolved": "https://registry.npmjs.org/eslint-config-standard/-/eslint-config-standard-17.1.0.tgz",
      "integrity": "sha512-IwHwmaBNtDK4zDHQukFDW5u/aTb8+meQWZvNFWkiGmbWjD6bqyuSSBxxXKkCftCUzc1zwCH2m/baCNDLGmuO5Q==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "eslint": "^8.0.1",
        "eslint-plugin-import": "^2.25.2",
        "eslint-plugin-n": "^15.0.0 || ^16.0.0 ",
        "eslint-plugin-promise": "^6.0.0"
      }
    },
    "node_modules/eslint-import-resolver-node": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.9.tgz",
      "integrity": "sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==",
      "dev": true,
      "dependencies": {
        "debug": "^3.2.7",
        "is-core-module": "^2.13.0",
        "resolve": "^1.22.4"
      }
    },
    "node_modules/eslint-import-resolver-node/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-import-resolver-node/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/eslint-module-utils": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.12.1.tgz",
      "integrity": "sha512-L8jSWTze7K2mTg0vos/RuLRS5soomksDPoJLXIslC7c8Wmut3bx7CPpJijDcBZtxQ5lrbUdM+s0OlNbz0DCDNw==",
      "dev": true,
      "dependencies": {
        "debug": "^3.2.7"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependenciesMeta": {
        "eslint": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-module-utils/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-module-utils/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/eslint-plugin-es-x": {
      "version": "7.8.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-es-x/-/eslint-plugin-es-x-7.8.0.tgz",
      "integrity": "sha512-7Ds8+wAAoV3T+LAKeu39Y5BzXCrGKrcISfgKEqTS4BDN8SFEDQd0S43jiQ8vIa3wUKD07qitZdfzlenSi8/0qQ==",
      "dev": true,
      "funding": [
        "https://github.com/sponsors/ota-meshi",
        "https://opencollective.com/eslint"
      ],
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.1.2",
        "@eslint-community/regexpp": "^4.11.0",
        "eslint-compat-utils": "^0.5.1"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "eslint": ">=8"
      }
    },
    "node_modules/eslint-plugin-import": {
      "version": "2.32.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-import/-/eslint-plugin-import-2.32.0.tgz",
      "integrity": "sha512-whOE1HFo/qJDyX4SnXzP4N6zOWn79WhnCUY/iDR0mPfQZO8wcYE4JClzI2oZrhBnnMUCBCHZhO6VQyoBU95mZA==",
      "dev": true,
      "dependencies": {
        "@rtsao/scc": "^1.1.0",
        "array-includes": "^3.1.9",
        "array.prototype.findlastindex": "^1.2.6",
        "array.prototype.flat": "^1.3.3",
        "array.prototype.flatmap": "^1.3.3",
        "debug": "^3.2.7",
        "doctrine": "^2.1.0",
        "eslint-import-resolver-node": "^0.3.9",
        "eslint-module-utils": "^2.12.1",
        "hasown": "^2.0.2",
        "is-core-module": "^2.16.1",
        "is-glob": "^4.0.3",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.8",
        "object.groupby": "^1.0.3",
        "object.values": "^1.2.1",
        "semver": "^6.3.1",
        "string.prototype.trimend": "^1.0.9",
        "tsconfig-paths": "^3.15.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "dev": true,
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/eslint-plugin-n": {
      "version": "16.6.2",
      "resolved": "https://registry.npmjs.org/eslint-plugin-n/-/eslint-plugin-n-16.6.2.tgz",
      "integrity": "sha512-6TyDmZ1HXoFQXnhCTUjVFULReoBPOAjpuiKELMkeP40yffI/1ZRO+d9ug/VC6fqISo2WkuIBk3cvuRPALaWlOQ==",
      "dev": true,
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.4.0",
        "builtins": "^5.0.1",
        "eslint-plugin-es-x": "^7.5.0",
        "get-tsconfig": "^4.7.0",
        "globals": "^13.24.0",
        "ignore": "^5.2.4",
        "is-builtin-module": "^3.2.1",
        "is-core-module": "^2.12.1",
        "minimatch": "^3.1.2",
        "resolve": "^1.22.2",
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      },
      "peerDependencies": {
        "eslint": ">=7.0.0"
      }
    },
    "node_modules/eslint-plugin-n/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/eslint-plugin-promise": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-6.6.0.tgz",
      "integrity": "sha512-57Zzfw8G6+Gq7axm2Pdo3gW/Rx3h9Yywgn61uE/3elTCOePEHVrn2i5CdfBwA1BLK0Q0WqctICIUSqXZW/VprQ==",
      "dev": true,
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^7.0.0 || ^8.0.0 || ^9.0.0"
      }
    },
    "node_modules/eslint-scope": {
      "version": "7.2.2",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
      "dev": true,
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/eslint/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/espree": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
      "dev": true,
      "dependencies": {
        "acorn": "^8.9.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.4.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "dev": true,
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "dev": true,
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expect": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/expect/-/expect-29.7.0.tgz",
      "integrity": "sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==",
      "dev": true,
      "dependencies": {
        "@jest/expect-utils": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "jest-matcher-utils": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express-rate-limit": {
      "version": "6.11.2",
      "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-6.11.2.tgz",
      "integrity": "sha512-a7uwwfNTh1U60ssiIkuLFWHt4hAC5yxlLGU2VP0X4YNlyEDZAqF4tK3GD3NSitVBrCQmQ0++0uOyFOgC2y4DDw==",
      "engines": {
        "node": ">= 14"
      },
      "peerDependencies": {
        "express": "^4 || ^5"
      }
    },
    "node_modules/express-validator": {
      "version": "7.2.1",
      "resolved": "https://registry.npmjs.org/express-validator/-/express-validator-7.2.1.tgz",
      "integrity": "sha512-CjNE6aakfpuwGaHQZ3m8ltCG2Qvivd7RHtVMS/6nVxOM7xVGqr4bhflsm4+N5FP5zI7Zxp+Hae+9RE+o8e3ZOQ==",
      "dependencies": {
        "lodash": "^4.17.21",
        "validator": "~13.12.0"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true
    },
    "node_modules/fast-safe-stringify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
      "dev": true
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "dev": true,
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/fecha": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw=="
    },
    "node_modules/file-entry-cache": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
      "dev": true,
      "dependencies": {
        "flat-cache": "^3.0.4"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
      "dev": true,
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.3",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true
    },
    "node_modules/fn.name": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fn.name/-/fn.name-1.1.0.tgz",
      "integrity": "sha512-GRnmB5gPyJpAhTQdSZTSp9uaPSvl09KoYcMQtsB9rQoOmzs9dH6ffeccH+Z+cv6P68Hu5bC6JjRh4Ah/mHSNRw=="
    },
    "node_modules/follow-redirects": {
      "version": "1.15.11",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.11.tgz",
      "integrity": "sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "dev": true,
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/formidable": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-2.1.5.tgz",
      "integrity": "sha512-Oz5Hwvwak/DCaXVVUtPn4oLMLLy1CdclLKO1LFgU7XzDpVMUU5UjlSLpGMocyQNNk8F6IJW9M/YdooSn2MRI+Q==",
      "dev": true,
      "dependencies": {
        "@paralleldrive/cuid2": "^2.2.2",
        "dezalgo": "^1.0.4",
        "once": "^1.4.0",
        "qs": "^6.11.0"
      },
      "funding": {
        "url": "https://ko-fi.com/tunnckoCore/commissions"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw=="
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "functions-have-names": "^1.2.3",
        "hasown": "^2.0.2",
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "dev": true,
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/generic-pool": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/generic-pool/-/generic-pool-3.9.0.tgz",
      "integrity": "sha512-hymDOu5B53XvN4QT9dBmZxPX4CWhBPPLguTZ9MMFeFa/Kg0xWVfylOVNlJji/E7yTZWFd/q9GO5TxDLq156D7g==",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "dev": true,
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "dev": true,
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-tsconfig": {
      "version": "4.10.1",
      "resolved": "https://registry.npmjs.org/get-tsconfig/-/get-tsconfig-4.10.1.tgz",
      "integrity": "sha512-auHyJ4AgMz7vgS8Hp3N6HXSmlMdUyhSUrfBF16w153rxtLIEOE+HGqaBppczZvnHLqQJfiHotCYpNhl0lUROFQ==",
      "dev": true,
      "dependencies": {
        "resolve-pkg-maps": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/privatenumber/get-tsconfig?sponsor=1"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dev": true,
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "dev": true,
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "dev": true,
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "dev": true
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "dev": true,
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
      "dev": true,
      "dependencies": {
        "dunder-proto": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/helmet": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-7.2.0.tgz",
      "integrity": "sha512-ZRiwvN089JfMXokizgqEPXsl2Guk094yExfoDXR0cBYWxtBbaSww/w+vT4WEJsBW2iTUi1GgZ6swmoug3Oy4Xw==",
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "dev": true
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "dev": true,
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/import-local": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
      "dev": true,
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "dev": true,
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "dev": true
    },
    "node_modules/is-async-function": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
      "dev": true,
      "dependencies": {
        "async-function": "^1.0.0",
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "dev": true,
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-builtin-module": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/is-builtin-module/-/is-builtin-module-3.2.1.tgz",
      "integrity": "sha512-BSLE3HnV2syZ0FK0iMA/yUGplUeMmNz4AW5fnTunbCIqZi4vG3WjJT9FHMy5D69xmAYBHXQhJdALdpwVxV501A==",
      "dev": true,
      "dependencies": {
        "builtin-modules": "^3.3.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "dev": true,
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.0",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "dev": true,
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ=="
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-6.0.3.tgz",
      "integrity": "sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==",
      "dev": true,
      "dependencies": {
        "@babel/core": "^7.23.9",
        "@babel/parser": "^7.23.9",
        "@istanbuljs/schema": "^0.1.3",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-instrument/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "dev": true,
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "dev": true,
      "dependencies": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/istanbul-reports": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.2.0.tgz",
      "integrity": "sha512-HGYWWS/ehqTV3xN10i23tkPkpH46MLCIMFNCaaKNavAXTF1RkqxawEPtnjnGZ6XKSInBKkiOA5BKS+aZiY3AvA==",
      "dev": true,
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest/-/jest-29.7.0.tgz",
      "integrity": "sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==",
      "dev": true,
      "dependencies": {
        "@jest/core": "^29.7.0",
        "@jest/types": "^29.6.3",
        "import-local": "^3.0.2",
        "jest-cli": "^29.7.0"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.7.0.tgz",
      "integrity": "sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==",
      "dev": true,
      "dependencies": {
        "execa": "^5.0.0",
        "jest-util": "^29.7.0",
        "p-limit": "^3.1.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-changed-files/node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-changed-files/node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-circus": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.7.0.tgz",
      "integrity": "sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==",
      "dev": true,
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/expect": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^1.0.0",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^29.7.0",
        "jest-matcher-utils": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-runtime": "^29.7.0",
        "jest-snapshot": "^29.7.0",
        "jest-util": "^29.7.0",
        "p-limit": "^3.1.0",
        "pretty-format": "^29.7.0",
        "pure-rand": "^6.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-circus/node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-circus/node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-cli": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.7.0.tgz",
      "integrity": "sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==",
      "dev": true,
      "dependencies": {
        "@jest/core": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/types": "^29.6.3",
        "chalk": "^4.0.0",
        "create-jest": "^29.7.0",
        "exit": "^0.1.2",
        "import-local": "^3.0.2",
        "jest-config": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "yargs": "^17.3.1"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.7.0.tgz",
      "integrity": "sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==",
      "dev": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/test-sequencer": "^29.7.0",
        "@jest/types": "^29.6.3",
        "babel-jest": "^29.7.0",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^29.7.0",
        "jest-environment-node": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "jest-regex-util": "^29.6.3",
        "jest-resolve": "^29.7.0",
        "jest-runner": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^29.7.0",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@types/node": "*",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-diff": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.7.0.tgz",
      "integrity": "sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==",
      "dev": true,
      "dependencies": {
        "chalk": "^4.0.0",
        "diff-sequences": "^29.6.3",
        "jest-get-type": "^29.6.3",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-docblock": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.7.0.tgz",
      "integrity": "sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==",
      "dev": true,
      "dependencies": {
        "detect-newline": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.7.0.tgz",
      "integrity": "sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==",
      "dev": true,
      "dependencies": {
        "@jest/types": "^29.6.3",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.6.3",
        "jest-util": "^29.7.0",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-environment-node": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.7.0.tgz",
      "integrity": "sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==",
      "dev": true,
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/fake-timers": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "jest-mock": "^29.7.0",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-get-type": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.6.3.tgz",
      "integrity": "sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==",
      "dev": true,
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.7.0.tgz",
      "integrity": "sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==",
      "dev": true,
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/graceful-fs": "^4.1.3",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^29.6.3",
        "jest-util": "^29.7.0",
        "jest-worker": "^29.7.0",
        "micromatch": "^4.0.4",
        "walker": "^1.0.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.7.0.tgz",
      "integrity": "sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==",
      "dev": true,
      "dependencies": {
        "jest-get-type": "^29.6.3",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.7.0.tgz",
      "integrity": "sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==",
      "dev": true,
      "dependencies": {
        "chalk": "^4.0.0",
        "jest-diff": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-message-util": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.7.0.tgz",
      "integrity": "sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^29.6.3",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.7.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-mock": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.7.0.tgz",
      "integrity": "sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==",
      "dev": true,
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "dev": true,
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.6.3.tgz",
      "integrity": "sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==",
      "dev": true,
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.7.0.tgz",
      "integrity": "sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==",
      "dev": true,
      "dependencies": {
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "resolve": "^1.20.0",
        "resolve.exports": "^2.0.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.7.0.tgz",
      "integrity": "sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==",
      "dev": true,
      "dependencies": {
        "jest-regex-util": "^29.6.3",
        "jest-snapshot": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runner": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.7.0.tgz",
      "integrity": "sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==",
      "dev": true,
      "dependencies": {
        "@jest/console": "^29.7.0",
        "@jest/environment": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^29.7.0",
        "jest-environment-node": "^29.7.0",
        "jest-haste-map": "^29.7.0",
        "jest-leak-detector": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-resolve": "^29.7.0",
        "jest-runtime": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-watcher": "^29.7.0",
        "jest-worker": "^29.7.0",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runner/node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-runner/node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-runtime": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.7.0.tgz",
      "integrity": "sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==",
      "dev": true,
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/fake-timers": "^29.7.0",
        "@jest/globals": "^29.7.0",
        "@jest/source-map": "^29.6.3",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-mock": "^29.7.0",
        "jest-regex-util": "^29.6.3",
        "jest-resolve": "^29.7.0",
        "jest-snapshot": "^29.7.0",
        "jest-util": "^29.7.0",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.7.0.tgz",
      "integrity": "sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==",
      "dev": true,
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-jsx": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/types": "^7.3.3",
        "@jest/expect-utils": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^29.7.0",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "jest-matcher-utils": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0",
        "natural-compare": "^1.4.0",
        "pretty-format": "^29.7.0",
        "semver": "^7.5.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-snapshot/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jest-util": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.7.0.tgz",
      "integrity": "sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==",
      "dev": true,
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.7.0.tgz",
      "integrity": "sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==",
      "dev": true,
      "dependencies": {
        "@jest/types": "^29.6.3",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.6.3",
        "leven": "^3.1.0",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate/node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-watcher": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.7.0.tgz",
      "integrity": "sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==",
      "dev": true,
      "dependencies": {
        "@jest/test-result": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "jest-util": "^29.7.0",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.7.0.tgz",
      "integrity": "sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==",
      "dev": true,
      "dependencies": {
        "@types/node": "*",
        "jest-util": "^29.7.0",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "dev": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/joi": {
      "version": "17.13.3",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.13.3.tgz",
      "integrity": "sha512-otDA4ldcIx+ZXsKHWmp0YizCweVRZG96J10b0FevjfuncLO1oX59THoAmHkNubYJ+9gWsYsp5k8v4ib6oDv1fA==",
      "dependencies": {
        "@hapi/hoek": "^9.3.0",
        "@hapi/topo": "^5.1.0",
        "@sideway/address": "^4.1.5",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "dev": true
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/jsonwebtoken/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jwa": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/kuler": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/kuler/-/kuler-2.0.0.tgz",
      "integrity": "sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A=="
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "dev": true
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "node_modules/lodash.get": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/lodash.get/-/lodash.get-4.4.2.tgz",
      "integrity": "sha512-z+Uw/vLuy6gQe8cfaFWD7p0wVv8fJl3mbzXh33RS+0oW2wvUqiRXiQ69gLWSLpgB5/6sU+r6BlQR0MBILadqTQ==",
      "deprecated": "This package is deprecated. Use the optional chaining (?.) operator instead."
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w=="
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg=="
    },
    "node_modules/lodash.isequal": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.isequal/-/lodash.isequal-4.5.0.tgz",
      "integrity": "sha512-pDo3lu8Jhfjqls6GkMgpahsF9kCyayhgykjyLMNFTKWrpVdAQtYyB4muAMWozBB4ig/dtWAmsMxLEI8wuz+DYQ==",
      "deprecated": "This package is deprecated. Use require('node:util').isDeepStrictEqual instead."
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA=="
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw=="
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA=="
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw=="
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true
    },
    "node_modules/lodash.mergewith": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.mergewith/-/lodash.mergewith-4.6.2.tgz",
      "integrity": "sha512-GK3g5RPZWTRSeLSpgP8Xhra+pnjBC56q9FZYe1d5RN3TJ35dbkGy3YqBSMbyCrlbi+CM9Z3Jk5yTL7RCsqboyQ=="
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg=="
    },
    "node_modules/logform": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/logform/-/logform-2.7.0.tgz",
      "integrity": "sha512-TFYA4jnP7PVbmlBIfhlSe+WKxs9dklXMTEGcBCIvLhE/Tn3H6Gk1norupVW7m5Cnd4bLcr08AytbyV/xj7f/kQ==",
      "dependencies": {
        "@colors/colors": "1.6.0",
        "@types/triple-beam": "^1.3.2",
        "fecha": "^4.2.0",
        "ms": "^2.1.1",
        "safe-stable-stringify": "^2.3.1",
        "triple-beam": "^1.3.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/logform/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "dev": true,
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "dev": true,
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "dev": true
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.54.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.54.0.tgz",
      "integrity": "sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types/node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "dependencies": {
        "minimist": "^1.2.6"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/moment": {
      "version": "2.30.1",
      "resolved": "https://registry.npmjs.org/moment/-/moment-2.30.1.tgz",
      "integrity": "sha512-uEmtNhbDOrWPFS+hdjFCBfy9f2YoyzRpwcl+DqpC6taX21FzsTLQVbMV/W7PzNSX6x/bhC1zA3c2UQ5NzH6how==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/multer": {
      "version": "1.4.5-lts.2",
      "resolved": "https://registry.npmjs.org/multer/-/multer-1.4.5-lts.2.tgz",
      "integrity": "sha512-VzGiVigcG9zUAoCNU+xShztrlr1auZOlurXynNvO9GiWD1/mTBbUljOKY+qMeazBqXgRnjzeEgJI/wyjJUHg9A==",
      "deprecated": "Multer 1.x is impacted by a number of vulnerabilities, which have been patched in 2.x. You should upgrade to the latest 2.x version.",
      "dependencies": {
        "append-field": "^1.0.0",
        "busboy": "^1.0.0",
        "concat-stream": "^1.5.2",
        "mkdirp": "^0.5.4",
        "object-assign": "^4.1.1",
        "type-is": "^1.6.4",
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true
    },
    "node_modules/negotiator": {
      "version": "0.6.4",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.4.tgz",
      "integrity": "sha512-myRT3DiWPHqho5PrJaIRyaMv2kgYf0mUVgBNOYMuCH5Ki1yEiQaf/ZJuQ62nvpc44wL5WDbTX7yGJi1Neevw8w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-cron": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/node-cron/-/node-cron-3.0.3.tgz",
      "integrity": "sha512-dOal67//nohNgYWb+nWmg5dkFdIwDm8EpeGYMekPMrngV3637lqnX0lbUcCtgibHTz6SEz7DAIjKvKDFYCnO1A==",
      "dependencies": {
        "uuid": "8.3.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/node-cron/node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "dev": true
    },
    "node_modules/node-releases": {
      "version": "2.0.20",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.20.tgz",
      "integrity": "sha512-7gK6zSXEH6neM212JgfYFXe+GmZQM+fia5SsusuBIUgnPheLFBmIPhtFoAQRj8/7wASYQnbDlHPVwY0BefoFgA==",
      "dev": true
    },
    "node_modules/nodemailer": {
      "version": "6.10.1",
      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.10.1.tgz",
      "integrity": "sha512-Z+iLaBGVaSjbIzQ4pX6XV41HrooLsQ10ZWPUehGmuantvzWoDVBnmsdUcOIDM1t+yPor5pDhVlDESgOMEGxhHA==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/nodemon": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.10.tgz",
      "integrity": "sha512-WDjw3pJ0/0jMFmyNDp3gvY2YizjLmmOUQo6DEBY+JgdvW/yQ9mEeSw6H5ythl5Ny2ytb7f9C2nIbjSxMNzbJXw==",
      "dev": true,
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^4",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^7.5.3",
        "simple-update-notifier": "^2.0.0",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/nodemon/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/nodemon/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/nodemon/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "dev": true,
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.fromentries": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.groupby": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.3.tgz",
      "integrity": "sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.values": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.1.tgz",
      "integrity": "sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.1.0.tgz",
      "integrity": "sha512-737ZY3yNnXy37FHkQxPzt4UZ2UWPWiCZWLvFZ4fu5cueciegX0zGPnrlY6bwRg4FdQOe9YU8MkmJwGhoMybl8A==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/one-time": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/one-time/-/one-time-1.0.0.tgz",
      "integrity": "sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==",
      "dependencies": {
        "fn.name": "1.x.x"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "dev": true,
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/openapi-types": {
      "version": "12.1.3",
      "resolved": "https://registry.npmjs.org/openapi-types/-/openapi-types-12.1.3.tgz",
      "integrity": "sha512-N4YtSYJqghVu4iek2ZUvcN/0aqH1kRDuNqzcycDxhOUpg7GdvLa2F3DgS6yBNhInhv2r/6I0Flkn7CqL8+nIcw==",
      "peer": true
    },
    "node_modules/opossum": {
      "version": "6.4.0",
      "resolved": "https://registry.npmjs.org/opossum/-/opossum-6.4.0.tgz",
      "integrity": "sha512-JVSEBsP3L1S8n6OEyFFfXqE9jzmM7QBeDGMT7/EPfv/TMHvbkFUxgXfklE3j1YeOIfIixfpT/4oKbNMhpAsHUQ==",
      "engines": {
        "node": "^18 || ^16 || ^14 || ^12"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/own-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
      "dev": true,
      "dependencies": {
        "get-intrinsic": "^1.2.6",
        "object-keys": "^1.1.1",
        "safe-push-apply": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/p-limit": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-4.0.0.tgz",
      "integrity": "sha512-5b0R4txpzjPWVw/cXXUResoD4hb6U/x9BH08L7nw+GN1sezDzPdxeRvpc9c433fZhBan/wusjbCsqwqm4EIBIQ==",
      "dependencies": {
        "yocto-queue": "^1.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate/node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate/node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-retry": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/p-retry/-/p-retry-5.1.2.tgz",
      "integrity": "sha512-couX95waDu98NfNZV+i/iLt+fdVxmI7CbrrdC2uDWfPdUAApyxT4wmDlyOtR5KtTDmkDO0zDScDjDou9YHhd9g==",
      "dependencies": {
        "@types/retry": "0.12.1",
        "retry": "^0.13.1"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ=="
    },
    "node_modules/pg": {
      "version": "8.16.3",
      "resolved": "https://registry.npmjs.org/pg/-/pg-8.16.3.tgz",
      "integrity": "sha512-enxc1h0jA/aq5oSDMvqyW3q89ra6XIIDZgCX9vkMrnz5DFTw/Ny3Li2lFQ+pt3L6MCgm/5o2o8HW9hiJji+xvw==",
      "dependencies": {
        "pg-connection-string": "^2.9.1",
        "pg-pool": "^3.10.1",
        "pg-protocol": "^1.10.3",
        "pg-types": "2.2.0",
        "pgpass": "1.0.5"
      },
      "engines": {
        "node": ">= 16.0.0"
      },
      "optionalDependencies": {
        "pg-cloudflare": "^1.2.7"
      },
      "peerDependencies": {
        "pg-native": ">=3.0.1"
      },
      "peerDependenciesMeta": {
        "pg-native": {
          "optional": true
        }
      }
    },
    "node_modules/pg-cloudflare": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.2.7.tgz",
      "integrity": "sha512-YgCtzMH0ptvZJslLM1ffsY4EuGaU0cx4XSdXLRFae8bPP4dS5xL1tNB3k2o/N64cHJpwU7dxKli/nZ2lUa5fLg==",
      "optional": true
    },
    "node_modules/pg-connection-string": {
      "version": "2.9.1",
      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.9.1.tgz",
      "integrity": "sha512-nkc6NpDcvPVpZXxrreI/FOtX3XemeLl8E0qFr6F2Lrm/I8WOnaWNhIPK2Z7OHpw7gh5XJThi6j6ppgNoaT1w4w=="
    },
    "node_modules/pg-int8": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
      "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/pg-pool": {
      "version": "3.10.1",
      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.10.1.tgz",
      "integrity": "sha512-Tu8jMlcX+9d8+QVzKIvM/uJtp07PKr82IUOYEphaWcoBhIYkoHpLXN3qO59nAI11ripznDsEzEv8nUxBVWajGg==",
      "peerDependencies": {
        "pg": ">=8.0"
      }
    },
    "node_modules/pg-protocol": {
      "version": "1.10.3",
      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.10.3.tgz",
      "integrity": "sha512-6DIBgBQaTKDJyxnXaLiLR8wBpQQcGWuAESkRBX/t6OwA8YsqP+iVSiond2EDy6Y/dsGk8rh/jtax3js5NeV7JQ=="
    },
    "node_modules/pg-types": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
      "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
      "dependencies": {
        "pg-int8": "1.0.1",
        "postgres-array": "~2.0.0",
        "postgres-bytea": "~1.0.0",
        "postgres-date": "~1.0.4",
        "postgres-interval": "^1.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/pgpass": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
      "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
      "dependencies": {
        "split2": "^4.1.0"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
      "integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "dev": true,
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "dev": true,
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "dev": true,
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "dev": true,
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pkg-dir/node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "dev": true,
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/postgres-array": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
      "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postgres-bytea": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
      "integrity": "sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-date": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
      "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-interval": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
      "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
      "dependencies": {
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag=="
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "dev": true,
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pure-rand": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.1.0.tgz",
      "integrity": "sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/dubzzz"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fast-check"
        }
      ]
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true
    },
    "node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/readable-stream/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/redis": {
      "version": "4.7.1",
      "resolved": "https://registry.npmjs.org/redis/-/redis-4.7.1.tgz",
      "integrity": "sha512-S1bJDnqLftzHXHP8JsT5II/CtHWQrASX5K96REjWjlmWKrviSOLWmM7QnRLstAWsu1VBBV1ffV6DzCvxNP0UJQ==",
      "dependencies": {
        "@redis/bloom": "1.2.0",
        "@redis/client": "1.6.1",
        "@redis/graph": "1.1.1",
        "@redis/json": "1.0.7",
        "@redis/search": "1.2.0",
        "@redis/time-series": "1.1.0"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.7",
        "get-proto": "^1.0.1",
        "which-builtin-type": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "dev": true,
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "dev": true,
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-cwd/node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/resolve-pkg-maps": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/resolve-pkg-maps/-/resolve-pkg-maps-1.0.0.tgz",
      "integrity": "sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==",
      "dev": true,
      "funding": {
        "url": "https://github.com/privatenumber/resolve-pkg-maps?sponsor=1"
      }
    },
    "node_modules/resolve.exports": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.3.tgz",
      "integrity": "sha512-OcXjMsGdhL4XnbShKpAcSqPMzQoYkYyhbEaeSko47MjRP9NfEQMhZkXL1DoFlt9LWQn4YttrdnV6X2OiyzBi+A==",
      "dev": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "has-symbols": "^1.1.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-array-concat/node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "dev": true
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safe-push-apply": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
      "dev": true,
      "dependencies": {
        "es-errors": "^1.3.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-push-apply/node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "dev": true
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-stable-stringify": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.5.0.tgz",
      "integrity": "sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/sax": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/sax/-/sax-1.4.1.tgz",
      "integrity": "sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg=="
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "dev": true,
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "dev": true,
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-proto": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
      "dev": true,
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "dev": true
    },
    "node_modules/simple-swizzle": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
      "dependencies": {
        "is-arrayish": "^0.3.1"
      }
    },
    "node_modules/simple-swizzle/node_modules/is-arrayish": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ=="
    },
    "node_modules/simple-update-notifier": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
      "dev": true,
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/simple-update-notifier/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "dev": true
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "dev": true,
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/split2": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
      "integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
      "engines": {
        "node": ">= 10.x"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "dev": true
    },
    "node_modules/stack-trace": {
      "version": "0.0.10",
      "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz",
      "integrity": "sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "dev": true,
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/stack-utils/node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "dev": true,
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/string_decoder/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "dev": true,
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-data-property": "^1.1.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-object-atoms": "^1.0.0",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/superagent": {
      "version": "8.1.2",
      "resolved": "https://registry.npmjs.org/superagent/-/superagent-8.1.2.tgz",
      "integrity": "sha512-6WTxW1EB6yCxV5VFOIPQruWGHqc3yI7hEmZK6h+pyk69Lk/Ut7rLUY6W/ONF2MjBuGjvmMiIpsrVJ2vjrHlslA==",
      "deprecated": "Please upgrade to superagent v10.2.2+, see release notes at https://github.com/forwardemail/superagent/releases/tag/v10.2.2 - maintenance is supported by Forward Email @ https://forwardemail.net",
      "dev": true,
      "dependencies": {
        "component-emitter": "^1.3.0",
        "cookiejar": "^2.1.4",
        "debug": "^4.3.4",
        "fast-safe-stringify": "^2.1.1",
        "form-data": "^4.0.0",
        "formidable": "^2.1.2",
        "methods": "^1.1.2",
        "mime": "2.6.0",
        "qs": "^6.11.0",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">=6.4.0 <13 || >=14"
      }
    },
    "node_modules/superagent/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/superagent/node_modules/mime": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
      "integrity": "sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==",
      "dev": true,
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/superagent/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/superagent/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/supertest": {
      "version": "6.3.4",
      "resolved": "https://registry.npmjs.org/supertest/-/supertest-6.3.4.tgz",
      "integrity": "sha512-erY3HFDG0dPnhw4U+udPfrzXa4xhSG+n4rxfRuZWCUvjFWwKl+OxWf/7zk50s84/fAAs7vf5QAb9uRa0cCykxw==",
      "deprecated": "Please upgrade to supertest v7.1.3+, see release notes at https://github.com/forwardemail/supertest/releases/tag/v7.1.3 - maintenance is supported by Forward Email @ https://forwardemail.net",
      "dev": true,
      "dependencies": {
        "methods": "^1.1.2",
        "superagent": "^8.1.2"
      },
      "engines": {
        "node": ">=6.4.0"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/swagger-jsdoc": {
      "version": "6.2.8",
      "resolved": "https://registry.npmjs.org/swagger-jsdoc/-/swagger-jsdoc-6.2.8.tgz",
      "integrity": "sha512-VPvil1+JRpmJ55CgAtn8DIcpBs0bL5L3q5bVQvF4tAW/k/9JYSj7dCpaYCAv5rufe0vcCbBRQXGvzpkWjvLklQ==",
      "dependencies": {
        "commander": "6.2.0",
        "doctrine": "3.0.0",
        "glob": "7.1.6",
        "lodash.mergewith": "^4.6.2",
        "swagger-parser": "^10.0.3",
        "yaml": "2.0.0-1"
      },
      "bin": {
        "swagger-jsdoc": "bin/swagger-jsdoc.js"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/swagger-jsdoc/node_modules/glob": {
      "version": "7.1.6",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.6.tgz",
      "integrity": "sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/swagger-parser": {
      "version": "10.0.3",
      "resolved": "https://registry.npmjs.org/swagger-parser/-/swagger-parser-10.0.3.tgz",
      "integrity": "sha512-nF7oMeL4KypldrQhac8RyHerJeGPD1p2xDh900GPvc+Nk7nWP6jX2FcC7WmkinMoAmoO774+AFXcWsW8gMWEIg==",
      "dependencies": {
        "@apidevtools/swagger-parser": "10.0.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/swagger-ui-dist": {
      "version": "5.29.0",
      "resolved": "https://registry.npmjs.org/swagger-ui-dist/-/swagger-ui-dist-5.29.0.tgz",
      "integrity": "sha512-gqs7Md3AxP4mbpXAq31o5QW+wGUZsUzVatg70yXpUR245dfIis5jAzufBd+UQM/w2xSfrhvA1eqsrgnl2PbezQ==",
      "dependencies": {
        "@scarf/scarf": "=1.4.0"
      }
    },
    "node_modules/swagger-ui-express": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/swagger-ui-express/-/swagger-ui-express-5.0.1.tgz",
      "integrity": "sha512-SrNU3RiBGTLLmFU8GIJdOdanJTl4TOmT27tt3bWWHppqYmAZ6IDuEuBvMU6nZq0zLEe6b/1rACXCgLZqO6ZfrA==",
      "dependencies": {
        "swagger-ui-dist": ">=5.0.0"
      },
      "engines": {
        "node": ">= v0.10.32"
      },
      "peerDependencies": {
        "express": ">=4.0.0 || >=5.0.0-beta"
      }
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "dev": true,
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/text-hex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/text-hex/-/text-hex-1.0.0.tgz",
      "integrity": "sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg=="
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "dev": true
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "dev": true
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
      "dev": true,
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/triple-beam": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/triple-beam/-/triple-beam-1.4.1.tgz",
      "integrity": "sha512-aZbgViZrg1QNcG+LULa7nhZpJTZSLm/mXnHXnbAbjmN5aSa0y7V+wvv6+4WaBtpISJzThKy+PIPxc1Nq1EJ9mg==",
      "engines": {
        "node": ">= 14.0.0"
      }
    },
    "node_modules/tsconfig-paths": {
      "version": "3.15.0",
      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
      "integrity": "sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==",
      "dev": true,
      "dependencies": {
        "@types/json5": "^0.0.29",
        "json5": "^1.0.2",
        "minimist": "^1.2.6",
        "strip-bom": "^3.0.0"
      }
    },
    "node_modules/tsconfig-paths/node_modules/json5": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
      "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
      "dev": true,
      "dependencies": {
        "minimist": "^1.2.0"
      },
      "bin": {
        "json5": "lib/cli.js"
      }
    },
    "node_modules/tsconfig-paths/node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
      "dev": true,
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.15",
        "reflect.getprototypeof": "^1.0.9"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
      "dev": true,
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0",
        "reflect.getprototypeof": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typedarray": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
      "integrity": "sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA=="
    },
    "node_modules/unbox-primitive": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.1.0",
        "which-boxed-primitive": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "dev": true
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-to-istanbul": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.3.0.tgz",
      "integrity": "sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==",
      "dev": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^2.0.0"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/validator": {
      "version": "13.12.0",
      "resolved": "https://registry.npmjs.org/validator/-/validator-13.12.0.tgz",
      "integrity": "sha512-c1Q0mCiPlgdTVVVIJIrBuxNicYE+t/7oKeI9MWLj3fh/uq2Pxh/3eeWbVZ4OcGW1TUf53At0njHw5SMdA3tmMg==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "dev": true,
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "dev": true,
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
      "dev": true,
      "dependencies": {
        "call-bound": "^1.0.2",
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.1.0",
        "is-finalizationregistry": "^1.1.0",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.2.1",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.1.0",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type/node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "dev": true
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "dev": true,
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "dev": true,
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/winston": {
      "version": "3.17.0",
      "resolved": "https://registry.npmjs.org/winston/-/winston-3.17.0.tgz",
      "integrity": "sha512-DLiFIXYC5fMPxaRg832S6F5mJYvePtmO5G9v9IgUFPhXm9/GkXarH/TUrBAVzhTCzAj9anE/+GjrgXp/54nOgw==",
      "dependencies": {
        "@colors/colors": "^1.6.0",
        "@dabh/diagnostics": "^2.0.2",
        "async": "^3.2.3",
        "is-stream": "^2.0.0",
        "logform": "^2.7.0",
        "one-time": "^1.0.0",
        "readable-stream": "^3.4.0",
        "safe-stable-stringify": "^2.3.1",
        "stack-trace": "0.0.x",
        "triple-beam": "^1.3.0",
        "winston-transport": "^4.9.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/winston-transport": {
      "version": "4.9.0",
      "resolved": "https://registry.npmjs.org/winston-transport/-/winston-transport-4.9.0.tgz",
      "integrity": "sha512-8drMJ4rkgaPo1Me4zD/3WLfI/zPdA9o2IipKODunnGDcuqbHwjsbB79ylv04LCGGzU0xQ6vTznOMpQGaLhhm6A==",
      "dependencies": {
        "logform": "^2.7.0",
        "readable-stream": "^3.6.2",
        "triple-beam": "^1.3.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/winston-transport/node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/winston/node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "node_modules/write-file-atomic": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
      "dev": true,
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/xml2js": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.6.2.tgz",
      "integrity": "sha512-T4rieHaC1EXcES0Kxxj4JWgaUQHDk+qwHcYOCFHfiwKz7tOVPLq7Hjq9dM1WCMhylqMEfP7hMcOIChvotiZegA==",
      "dependencies": {
        "sax": ">=0.6.0",
        "xmlbuilder": "~11.0.0"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/xmlbuilder": {
      "version": "11.0.1",
      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-11.0.1.tgz",
      "integrity": "sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA==",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true
    },
    "node_modules/yaml": {
      "version": "2.0.0-1",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.0.0-1.tgz",
      "integrity": "sha512-W7h5dEhywMKenDJh2iX/LABkbFnBxasD27oyXWDS/feDsxiw0dD5ncXdYXgkvAsXIY2MpW/ZKkr9IU30DBdMNQ==",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "dev": true,
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "dev": true,
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yocto-queue": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-1.2.1.tgz",
      "integrity": "sha512-AyeEbWOu/TAXdxlV9wmGcR0+yh2j3vYPGOECcIj2S7MkrLyC7ne+oye2BKTItt0ii2PHk4cDy+95+LshzbXnGg==",
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/z-schema": {
      "version": "5.0.5",
      "resolved": "https://registry.npmjs.org/z-schema/-/z-schema-5.0.5.tgz",
      "integrity": "sha512-D7eujBWkLa3p2sIpJA0d1pr7es+a7m0vFAnZLlCEKq/Ij2k0MLi9Br2UPxoxdYystm5K1yeBGzub0FlYUEWj2Q==",
      "dependencies": {
        "lodash.get": "^4.4.2",
        "lodash.isequal": "^4.5.0",
        "validator": "^13.7.0"
      },
      "bin": {
        "z-schema": "bin/z-schema"
      },
      "engines": {
        "node": ">=8.0.0"
      },
      "optionalDependencies": {
        "commander": "^9.4.1"
      }
    },
    "node_modules/z-schema/node_modules/commander": {
      "version": "9.5.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-9.5.0.tgz",
      "integrity": "sha512-KRs7WVDKg86PWiuAqhDrAQnTXZKraVcCc6vFdL14qrZ/DcWwuRo7VoiYXalXO7S5GKpqYiVEwCbgFDfxNHKJBQ==",
      "optional": true,
      "engines": {
        "node": "^12.20.0 || >=14"
      }
    }
  }
}



================================================================================
ARQUIVO: C:\web\rw-nv\backend\package.json
================================================================================

{
  "name": "road-rw-backend",
  "version": "1.0.0",
  "description": "Sistema de Gest√£o Log√≠stica - Backend API",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "setup": "node scripts/setup.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "migrate": "node src/database/migrate.js",
    "seed": "node src/database/seed.js",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "docs": "swagger-jsdoc -d swaggerDef.js src/routes/*.js -o swagger.json",

    "setup:jobs": "node src/scripts/setup-jobs.js",
    "jobs": "node scripts/control-jobs.js",
    "jobs:start": "node src/scripts/start-jobs.js",
    "jobs:stop": "node src/scripts/stop-jobs.js",
    "jobs:restart": "npm run jobs:stop && sleep 3 && npm run jobs:start",
    "jobs:status": "node src/scripts/status-jobs.js",
    "jobs:run": "node src/scripts/control-jobs.js run",


    "daemon:start": "node src/cripts/jobs-daemon.js start",
    "daemon:stop": "node src/scripts/jobs-daemon.js stop",
    "daemon:restart": "node src/scripts/jobs-daemon.js restart",
    "daemon:status": "node src/scripts/jobs-daemon.js status",
    
    "jobs:dev": "NODE_ENV=development npm run jobs:start",
    "jobs:prod": "NODE_ENV=production npm run daemon:start",
    
    "maintenance": "node src/scripts/maintenance.js",
    "health-check": "node src/scripts/health-check.js",




    "setup:external": "node scripts/setup-external-apis.js",
    "external:tokens": "node scripts/manage-external-tokens.js",
    
    "external:test": "node scripts/test-external-apis.js",
    "external:docs": "node scripts/generate-external-docs.js",
    "external:stats": "node scripts/external-stats.js",
    
    "test:external": "jest tests/external --verbose",
    "test:external:watch": "jest tests/external --watch",
    "maintenance:external": "node scripts/maintenance-external-apis.js",
    
    "external:migrate": "node scripts/migrate-external-data.js",
    "external:setup-cron": "bash scripts/setup-cron-external.sh",
    
    "external:logs": "tail -f logs/app.log | grep external",
    "external:errors": "grep ERROR logs/app.log | grep external | tail -20",
    "external:health-check": "curl -s http://localhost:3001/api/external/health | jq",
    "add:api-config": "node scripts/add-api-config-column.js",
    "add:routes": "node scripts/add-external-routes.js",
 "add:routes:basic": "node scripts/add-external-routes.js --create-basic"

  },
  "keywords": [
    "logistics",
    "transport",
    "api",
    "nodejs",
    "express",
    "postgresql",
    "jobs",
    "cron",
    "integration"
  ],
  "author": "Road-RW Team",
  "license": "MIT",
  "dependencies": {
    "async": "^3.2.4",
    "axios": "^1.12.1",
    "bcryptjs": "^2.4.3",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-rate-limit": "^6.8.1",
    "express-validator": "^7.0.1",
    "helmet": "^7.0.0",
    "joi": "^17.9.2",
    "jsonwebtoken": "^9.0.2",
    "moment": "^2.29.4",
    "multer": "^1.4.5-lts.1",
    "node-cron": "^3.0.3",
    "nodemailer": "^6.9.4",
    "opossum": "^6.4.0",
    "p-limit": "^4.0.0",
    "p-retry": "^5.1.2",
    "pg": "^8.11.3",
    "redis": "^4.6.7",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.0",
    "uuid": "^9.0.0",
    "winston": "^3.10.0",
    "xml2js": "^0.6.2"
  },
  "devDependencies": {
    "@types/node": "^20.4.5",
    "eslint": "^8.45.0",
    "eslint-config-standard": "^17.1.0",
    "eslint-plugin-import": "^2.28.0",
    "eslint-plugin-n": "^16.0.1",
    "eslint-plugin-promise": "^6.1.1",
    "jest": "^29.6.2",
    "nodemon": "^3.0.1",
    "supertest": "^6.3.3"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  
  "jest": {
    "testEnvironment": "node",
    "collectCoverageFrom": [
      "src/**/*.js",
      "!src/database/**",
      "!src/config/**"
    ],
    "testMatch": [
      "**/tests/**/*.test.js"
    ]
  }

}



================================================================================
ARQUIVO: C:\web\rw-nv\backend\padrao-ocorrencia.json
================================================================================

{   
  "ocorrencias": [
        {
            "nro_nf": "1875722",
            "dataHoraEvento": "2025-09-17T19:25:32.416Z",
            "dataHoraEnvio": "2025-09-17T19:25:32.416Z",
            "codigo": "82",
            "descricao": "SAIDA DA UNIDADE",
            "complemento": "Saida da unidade JUNDIAI em 07/11/19, 00:18h. Previsao de chegada na unidade FEIRA DE SANTANA em 09/11/19, 06:16h.",
            "nomeRecebedor": "carlos roberto",
            "docRecebedor": "845.879.625-85",    
            "latitude": 0,
            "longitude": 0,
            "linkComprovante": "https://heavycomprovante.nyc3.cdn.digitaloceanspaces.com/comprovantes/cfernandes/1215192_2d5b30de76e1daa1fc950f35d34566b7.pdf",
            "dataHoraAgendamento": "2025-09-17T19:25:32.416Z",
            "novaDataPrevisao": "2025-09-17T19:25:32.416Z"
        }        
   ]
}


================================================================================
ARQUIVO: C:\web\rw-nv\backend\README.md
================================================================================







ssh root@64.23.183.132


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\add-api-config-column.js
================================================================================

// scripts/add-api-config-column.js
require('dotenv').config();
const db = require('../src/database/connection');

console.log('üîß Adicionando coluna api_config na tabela transportadoras...');

async function addApiConfigColumn() {
  try {
    // Verificar se a coluna j√° existe
    const columnExists = await db.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.columns 
        WHERE table_name = 'transportadoras' 
        AND column_name = 'api_config'
        AND table_schema = 'public'
      )
    `);

    if (columnExists.rows[0].exists) {
      console.log('‚ÑπÔ∏è  Coluna api_config j√° existe na tabela transportadoras');
      return;
    }

    // Adicionar a coluna
    await db.query(`
      ALTER TABLE transportadoras 
      ADD COLUMN api_config JSONB
    `);

    console.log('‚úÖ Coluna api_config adicionada com sucesso!');

    // Atualizar transportadoras existentes com configura√ß√µes padr√£o
    const transportadoras = await db.query('SELECT id, nome FROM transportadoras');
    
    for (const transportadora of transportadoras.rows) {
      let config = {};
      
      // Configura√ß√µes baseadas no nome da transportadora
      if (transportadora.nome.toLowerCase().includes('jamef')) {
        config = {
          base_url: 'https://api.jamef.com.br',
          timeout: 15000,
          retry_attempts: 3,
          rate_limit: { requests: 100, per: 'minute' }
        };
      } else if (transportadora.nome.toLowerCase().includes('braspress')) {
        config = {
          base_url: 'https://api.braspress.com.br',
          timeout: 45000,
          retry_attempts: 3,
          rate_limit: { requests: 500, per: 'hour' }
        };
      } else if (transportadora.nome.toLowerCase().includes('tnt')) {
        config = {
          base_url: 'https://api.tnt.com.br',
          timeout: 20000,
          retry_attempts: 3,
          rate_limit: { requests: 200, per: 'minute' }
        };
      } else {
        config = {
          base_url: '',
          timeout: 30000,
          retry_attempts: 3,
          rate_limit: { requests: 100, per: 'hour' }
        };
      }

      await db.query(
        'UPDATE transportadoras SET api_config = $1 WHERE id = $2',
        [JSON.stringify(config), transportadora.id]
      );

      console.log(`‚úÖ Configura√ß√£o API atualizada para: ${transportadora.nome}`);
    }

  } catch (error) {
    console.error('‚ùå Erro ao adicionar coluna api_config:', error.message);
  } finally {
    await db.disconnect();
  }
}

if (require.main === module) {
  addApiConfigColumn();
}

module.exports = { addApiConfigColumn };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\add-routes-to-server.js
================================================================================

// scripts/add-routes-to-server.js
const fs = require('fs');
const path = require('path');

function addRoutesToServer() {
  console.log('üîß Adicionando rotas ao server.js...');

  const serverPath = path.join(__dirname, '..', 'server.js');
  
  if (!fs.existsSync(serverPath)) {
    console.log('‚ùå Arquivo server.js n√£o encontrado');
    return false;
  }

  let content = fs.readFileSync(serverPath, 'utf8');

  // Importa√ß√µes das novas rotas
  const imports = `
// ========================================
// IMPORTAR ROTAS DAS APIs EXTERNAS
// ========================================
const integrationsRoutes = require('./src/routes/integrations.routes');
const externalApisRoutes = require('./src/routes/external-apis.routes');
const webhooksRoutes = require('./src/routes/webhooks.routes');
const logsRoutes = require('./src/routes/logs.routes');`;

  // Uso das rotas
  const routeUsage = `
// ========================================
// ROTAS DAS APIs EXTERNAS
// ========================================
app.use('/api/integrations', integrationsRoutes);
app.use('/api/external-apis', externalApisRoutes);
app.use('/api/webhooks', webhooksRoutes);
app.use('/api/logs', logsRoutes);`;

  // Verificar se as importa√ß√µes j√° existem
  if (content.includes('integrationsRoutes')) {
    console.log('‚ÑπÔ∏è  Importa√ß√µes das rotas j√° existem');
  } else {
    // Adicionar importa√ß√µes ap√≥s as outras importa√ß√µes de rotas
    const lastImportIndex = content.lastIndexOf('const tabelaOcorrenciasRoutes');
    if (lastImportIndex !== -1) {
      const lineEnd = content.indexOf('\n', lastImportIndex);
      content = 
        content.slice(0, lineEnd) + 
        imports + 
        content.slice(lineEnd);
      console.log('‚úÖ Importa√ß√µes adicionadas');
    }
  }

  // Verificar se o uso das rotas j√° existe
  if (content.includes("app.use('/api/integrations'")) {
    console.log('‚ÑπÔ∏è  Rotas j√° est√£o sendo usadas');
  } else {
    // Adicionar uso das rotas ap√≥s as rotas existentes
    const lastRouteIndex = content.lastIndexOf("app.use('/api/tabelacodigosocorrencia'");
    if (lastRouteIndex !== -1) {
      const lineEnd = content.indexOf('\n', lastRouteIndex);
      content = 
        content.slice(0, lineEnd) + 
        routeUsage + 
        content.slice(lineEnd);
      console.log('‚úÖ Uso das rotas adicionado');
    }
  }

  // Remover rotas comentadas se existirem
  content = content
    .replace(/\/\/ app\.use\('\/api\/integrations',.*?\);/g, '')
    .replace(/\/\/ app\.use\('\/api\/external-apis',.*?\);/g, '')
    .replace(/\/\/ app\.use\('\/api\/webhooks',.*?\);/g, '')
    .replace(/\/\/ app\.use\('\/api\/logs',.*?\);/g, '');

  // Salvar arquivo
  fs.writeFileSync(serverPath + '.backup', fs.readFileSync(serverPath, 'utf8'));
  fs.writeFileSync(serverPath, content);
  
  console.log('‚úÖ server.js atualizado');
  return true;
}

if (require.main === module) {
  addRoutesToServer();
}

module.exports = { addRoutesToServer };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\backup-external-data.js
================================================================================


// ==========================================
// 2. SISTEMA DE BACKUP E RESTORE
// ==========================================
// backend/scripts/backup-external-data.js

const path = require('path');
const fs = require('fs').promises;
require('dotenv').config({ path: path.join(__dirname, '../.env') });

const Database = require('../src/database/connection');
const logger = require('../src/config/logger');

class ExternalDataBackup {
  constructor() {
    this.database = null;
    this.backupDir = path.join(__dirname, '../backups/external');
  }

  async initialize() {
    this.database = new Database();
    await this.database.connect();
    
    // Criar diret√≥rio de backup se n√£o existir
    await fs.mkdir(this.backupDir, { recursive: true });
  }

  async createBackup() {
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const backupFile = path.join(this.backupDir, `external-backup-${timestamp}.json`);

      logger.info('Iniciando backup dos dados das APIs externas...');

      const backupData = {
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        data: {
          api_tokens: await this.backupApiTokens(),
          external_logs: await this.backupRecentLogs(),
          transportadora_mappings: await this.backupTransportadoraMappings(),
          integration_settings: await this.backupIntegrationSettings()
        }
      };

      await fs.writeFile(backupFile, JSON.stringify(backupData, null, 2));
      
      logger.info(`Backup criado com sucesso: ${backupFile}`);
      return backupFile;

    } catch (error) {
      logger.error('Erro ao criar backup:', error);
      throw error;
    }
  }

  async backupApiTokens() {
    const query = `
      SELECT integracao, expires_at, active, description, created_at
      FROM api_tokens 
      WHERE active = true
      ORDER BY integracao
    `;

    const result = await this.database.query(query);
    return result.rows;
  }

  async backupRecentLogs() {
    // Backup apenas dos logs dos √∫ltimos 30 dias para evitar arquivos enormes
    const query = `
      SELECT integracao, operacao, resultado, created_at
      FROM external_logs 
      WHERE created_at >= NOW() - INTERVAL '30 days'
      ORDER BY created_at DESC
      LIMIT 1000
    `;

    const result = await this.database.query(query);
    return result.rows;
  }

  async backupTransportadoraMappings() {
    const query = `
      SELECT 
        t.cnpj, t.nome, t.integracao_ocorrencia,
        array_agg(
          json_build_object(
            'codigo', tco.codigo,
            'descricao', tco.descricao,
            'codigo_ocorrencia', tco.codigo_ocorrencia_codigo
          )
        ) as mappings
      FROM transportadoras t
      LEFT JOIN transportadora_codigo_ocorrencia tco ON tco.transportadora_id = t.id
      WHERE t.integracao_ocorrencia IS NOT NULL 
        AND t.integracao_ocorrencia != 'manual'
      GROUP BY t.cnpj, t.nome, t.integracao_ocorrencia
    `;

    const result = await this.database.query(query);
    return result.rows;
  }

  async backupIntegrationSettings() {
    const query = `
      SELECT slug, settings
      FROM settings 
      WHERE slug IN ('integration_config', 'monitoring_config')
    `;

    const result = await this.database.query(query);
    return result.rows;
  }

  async restoreBackup(backupFile) {
    try {
      logger.info(`Iniciando restore do backup: ${backupFile}`);

      const backupContent = await fs.readFile(backupFile, 'utf-8');
      const backupData = JSON.parse(backupContent);

      // Validar vers√£o do backup
      if (!backupData.version || !backupData.data) {
        throw new Error('Formato de backup inv√°lido');
      }

      // Restaurar dados
      await this.restoreApiTokens(backupData.data.api_tokens);
      await this.restoreTransportadoraMappings(backupData.data.transportadora_mappings);
      await this.restoreIntegrationSettings(backupData.data.integration_settings);

      logger.info('Restore conclu√≠do com sucesso');

    } catch (error) {
      logger.error('Erro no restore:', error);
      throw error;
    }
  }

  async restoreApiTokens(tokens) {
    if (!tokens || tokens.length === 0) return;

    logger.info(`Restaurando ${tokens.length} tokens...`);

    for (const token of tokens) {
      // Verificar se token j√° existe
      const existsQuery = `
        SELECT id FROM api_tokens 
        WHERE integracao = $1 AND active = true
      `;
      
      const exists = await this.database.query(existsQuery, [token.integracao]);
      
      if (exists.rows.length === 0) {
        // Criar token (sem o valor real por seguran√ßa)
        const insertQuery = `
          INSERT INTO api_tokens (integracao, token, expires_at, active, description, created_at)
          VALUES ($1, $2, $3, false, $4, $5)
        `;
        
        await this.database.query(insertQuery, [
          token.integracao,
          `RESTORED_${token.integracao.toUpperCase()}_${Date.now()}`,
          token.expires_at,
          `Restaurado do backup - ${token.description || ''}`,
          token.created_at
        ]);

        logger.info(`Token restaurado para ${token.integracao} (inativo - configure manualmente)`);
      }
    }
  }

  async restoreTransportadoraMappings(mappings) {
    // Implementar restore de mapeamentos se necess√°rio
    logger.info('Mapeamentos de transportadora verificados');
  }

  async restoreIntegrationSettings(settings) {
    if (!settings || settings.length === 0) return;

    for (const setting of settings) {
      const query = `
        INSERT INTO settings (slug, env, settings, created_at, updated_at)
        VALUES ($1, 'production', $2, NOW(), NOW())
        ON CONFLICT (slug, env) DO NOTHING
      `;

      await this.database.query(query, [setting.slug, JSON.stringify(setting.settings)]);
      logger.info(`Configura√ß√£o ${setting.slug} restaurada`);
    }
  }

  async listBackups() {
    try {
      const files = await fs.readdir(this.backupDir);
      const backupFiles = files
        .filter(file => file.startsWith('external-backup-') && file.endsWith('.json'))
        .sort()
        .reverse();

      return backupFiles.map(file => ({
        file: file,
        path: path.join(this.backupDir, file),
        date: file.match(/external-backup-(.+)\.json/)[1].replace(/-/g, ':')
      }));

    } catch (error) {
      logger.error('Erro ao listar backups:', error);
      return [];
    }
  }

  async disconnect() {
    if (this.database) {
      await this.database.disconnect();
    }
  }
}

// Script de linha de comando
async function runBackupRestore() {
  const command = process.argv[2];
  const arg = process.argv[3];

  const backup = new ExternalDataBackup();
  
  try {
    await backup.initialize();

    switch (command) {
      case 'create':
        const backupFile = await backup.createBackup();
        console.log(`Backup criado: ${backupFile}`);
        break;

      case 'restore':
        if (!arg) {
          console.error('Uso: backup-external-data.js restore <arquivo_backup>');
          process.exit(1);
        }
        await backup.restoreBackup(arg);
        console.log('Restore conclu√≠do');
        break;

      case 'list':
        const backups = await backup.listBackups();
        console.log('Backups dispon√≠veis:');
        backups.forEach(b => console.log(`- ${b.file} (${b.date})`));
        break;

      default:
        console.log('Comandos: create, restore <arquivo>, list');
        break;
    }

  } catch (error) {
    console.error('Erro:', error.message);
    process.exit(1);
  } finally {
    await backup.disconnect();
  }
}

if (require.main === module) {
  runBackupRestore();
}

module.exports = { ExternalDataBackup };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\check-swagger-config.js
================================================================================

// scripts/check-swagger-config.js
const fs = require('fs');
const path = require('path');

function checkSwaggerConfig() {
  console.log('üîç Verificando configura√ß√£o do Swagger...');

  // Verificar swaggerDef.js
  const swaggerDefPath = path.join(__dirname, '..', 'swaggerDef.js');
  
  if (fs.existsSync(swaggerDefPath)) {
    console.log('üìÑ Arquivo swaggerDef.js encontrado');
    
    const content = fs.readFileSync(swaggerDefPath, 'utf8');
    
    // Verificar se h√° basePath ou servers configurados incorretamente
    if (content.includes('basePath')) {
      console.log('‚ö†Ô∏è  Configura√ß√£o basePath encontrada no swaggerDef.js');
      console.log('   Isso pode causar duplica√ß√£o de paths (/api/api/)');
    }
    
    if (content.includes('servers')) {
      console.log('‚ö†Ô∏è  Configura√ß√£o servers encontrada no swaggerDef.js');
      if (content.includes('url') && content.includes('/api')) {
        console.log('   ‚ùå URL do servidor inclui /api - isso causa duplica√ß√£o!');
        console.log('   üí° Remova /api da URL do servidor ou dos paths das rotas');
      }
    }
    
    // Procurar por configura√ß√µes problem√°ticas
    const problematicPatterns = [
      { pattern: /basePath.*\/api/i, message: 'basePath inclui /api' },
      { pattern: /url.*\/api/i, message: 'URL do servidor inclui /api' }
    ];
    
    problematicPatterns.forEach(({ pattern, message }) => {
      if (pattern.test(content)) {
        console.log(`   ‚ùå Problema encontrado: ${message}`);
      }
    });
    
  } else {
    console.log('‚ùå Arquivo swaggerDef.js n√£o encontrado');
    console.log('üí° Criando arquivo swaggerDef.js b√°sico...');
    createBasicSwaggerDef();
  }
}

function createBasicSwaggerDef() {
  const swaggerDefContent = `// swaggerDef.js
module.exports = {
  openapi: '3.0.0',
  info: {
    title: 'Road-RW API',
    version: '1.0.0',
    description: 'Sistema de Gest√£o Log√≠stica - API Documentation',
  },
  servers: [
    {
      url: 'http://localhost:3001',
      description: 'Servidor de Desenvolvimento'
    }
  ],
  components: {
    securitySchemes: {
      bearerAuth: {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT'
      }
    }
  },
  security: [
    {
      bearerAuth: []
    }
  ]
};`;

  const swaggerDefPath = path.join(__dirname, '..', 'swaggerDef.js');
  fs.writeFileSync(swaggerDefPath, swaggerDefContent);
  console.log('‚úÖ Arquivo swaggerDef.js criado');
}

function fixSwaggerConfig() {
  console.log('üîß Corrigindo configura√ß√£o do Swagger...');
  
  const swaggerDefPath = path.join(__dirname, '..', 'swaggerDef.js');
  
  if (!fs.existsSync(swaggerDefPath)) {
    createBasicSwaggerDef();
    return;
  }
  
  let content = fs.readFileSync(swaggerDefPath, 'utf8');
  let modified = false;
  
  // Corrigir URLs problem√°ticas
  if (content.includes('http://localhost:3001/api')) {
    content = content.replace(/http:\/\/localhost:3001\/api/g, 'http://localhost:3001');
    modified = true;
    console.log('‚úÖ URL do servidor corrigida (removido /api)');
  }
  
  // Remover basePath se existir
  if (content.includes('basePath')) {
    content = content.replace(/basePath:.*,?\n/g, '');
    modified = true;
    console.log('‚úÖ basePath removido');
  }
  
  if (modified) {
    fs.writeFileSync(swaggerDefPath + '.backup', fs.readFileSync(swaggerDefPath, 'utf8'));
    fs.writeFileSync(swaggerDefPath, content);
    console.log('‚úÖ Configura√ß√£o do Swagger corrigida');
  } else {
    console.log('‚ÑπÔ∏è  Configura√ß√£o do Swagger parece estar correta');
  }
}

if (require.main === module) {
  checkSwaggerConfig();
  fixSwaggerConfig();
}

module.exports = { checkSwaggerConfig, fixSwaggerConfig };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\complete-routes-setup.js
================================================================================

// scripts/fix-all-routes-CLEAN.js
// üöÄ SCRIPT CORRIGIDO - SEM ERROS DE SINTAXE

const fs = require('fs');
const path = require('path');

function fixAllRoutesClean() {
  console.log('üöÄ CONFIGURANDO TODAS AS ROTAS - VERS√ÉO CORRIGIDA\n');

  try {
    // 1. Criar todas as rotas
    createAllRoutes();
    
    // 2. Atualizar server.js
    updateServer();
    
    // 3. Corrigir swagger
    fixSwagger();
    
    console.log('üéâ CONCLU√çDO! Reinicie o servidor: npm run dev');
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  }
}

function createAllRoutes() {
  console.log('1Ô∏è‚É£ Criando arquivos de rotas...\n');
  
  const routesDir = path.join(__dirname, '..', 'src', 'routes');
  
  if (!fs.existsSync(routesDir)) {
    fs.mkdirSync(routesDir, { recursive: true });
  }

  // ========================================
  // INTEGRATIONS ROUTE
  // ========================================
  const integrationsRoute = `// src/routes/integrations.routes.js
const express = require('express');
const router = express.Router();
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * /api/integrations:
 *   get:
 *     summary: Listar integra√ß√µes dispon√≠veis
 *     tags: [Integrations]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Lista de integra√ß√µes
 */
router.get('/', auth, (req, res) => {
  res.json({
    success: true,
    data: [
      { name: 'jamef', status: 'active', description: 'Integra√ß√£o JAMEF' },
      { name: 'braspress', status: 'active', description: 'Integra√ß√£o Braspress' },
      { name: 'tnt', status: 'active', description: 'Integra√ß√£o TNT' }
    ]
  });
});

/**
 * @swagger
 * /api/integrations/{transportadora}/test:
 *   post:
 *     summary: Testar conex√£o com transportadora
 *     tags: [Integrations]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - name: transportadora
 *         in: path
 *         required: true
 *         schema: { type: string, example: "jamef" }
 *     responses:
 *       200:
 *         description: Teste realizado
 */
router.post('/:transportadora/test', auth, (req, res) => {
  res.json({
    success: true,
    message: \`Teste \${req.params.transportadora} realizado com sucesso\`,
    data: { status: 'success', response_time: '150ms' }
  });
});

/**
 * @swagger
 * /api/integrations/{transportadora}/status:
 *   get:
 *     summary: Status da integra√ß√£o
 *     tags: [Integrations]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - name: transportadora
 *         in: path
 *         required: true
 *         schema: { type: string }
 *     responses:
 *       200:
 *         description: Status da integra√ß√£o
 */
router.get('/:transportadora/status', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      transportadora: req.params.transportadora,
      status: 'active',
      lastSync: new Date().toISOString(),
      isConfigured: true
    }
  });
});

module.exports = router;`;

  // ========================================
  // EXTERNAL APIS ROUTE
  // ========================================
  const externalApisRoute = `// src/routes/external-apis.routes.js
const express = require('express');
const router = express.Router();
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * /api/external-apis/tokens:
 *   get:
 *     summary: Listar tokens de API
 *     tags: [External APIs]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Lista de tokens
 */
router.get('/tokens', auth, (req, res) => {
  res.json({
    success: true,
    data: [
      { integracao: 'jamef', active: true, created_at: new Date().toISOString() },
      { integracao: 'braspress', active: false, created_at: new Date().toISOString() },
      { integracao: 'tnt', active: true, created_at: new Date().toISOString() }
    ]
  });
});

/**
 * @swagger
 * /api/external-apis/settings:
 *   get:
 *     summary: Configura√ß√µes das APIs
 *     tags: [External APIs]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Configura√ß√µes
 */
router.get('/settings', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      enabled: true,
      pollInterval: 300,
      concurrentJobs: 3,
      rateLimits: {
        jamef: { requests: 100, per: 'minute' },
        braspress: { requests: 500, per: 'hour' },
        tnt: { requests: 200, per: 'minute' }
      }
    }
  });
});

module.exports = router;`;

  // ========================================
  // WEBHOOKS ROUTE
  // ========================================
  const webhooksRoute = `// src/routes/webhooks.routes.js
const express = require('express');
const router = express.Router();

/**
 * @swagger
 * /api/webhooks/jamef:
 *   post:
 *     summary: Webhook JAMEF
 *     tags: [Webhooks]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               numeroNF: { type: string }
 *               status: { type: string }
 *     responses:
 *       200:
 *         description: Processado com sucesso
 */
router.post('/jamef', (req, res) => {
  console.log('Webhook JAMEF:', req.body);
  res.json({ success: true, message: 'Webhook JAMEF processado' });
});

/**
 * @swagger
 * /api/webhooks/braspress:
 *   post:
 *     summary: Webhook Braspress
 *     tags: [Webhooks]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema: { type: object }
 *     responses:
 *       200:
 *         description: Processado com sucesso
 */
router.post('/braspress', (req, res) => {
  console.log('Webhook Braspress:', req.body);
  res.json({ success: true, message: 'Webhook Braspress processado' });
});

/**
 * @swagger
 * /api/webhooks/tnt:
 *   post:
 *     summary: Webhook TNT
 *     tags: [Webhooks]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema: { type: object }
 *     responses:
 *       200:
 *         description: Processado com sucesso
 */
router.post('/tnt', (req, res) => {
  console.log('Webhook TNT:', req.body);
  res.json({ success: true, message: 'Webhook TNT processado' });
});

/**
 * @swagger
 * /api/webhooks/status:
 *   get:
 *     summary: Status dos webhooks
 *     tags: [Webhooks]
 *     responses:
 *       200:
 *         description: Status dos webhooks
 */
router.get('/status', (req, res) => {
  res.json({
    success: true,
    data: {
      jamef: 'active',
      braspress: 'active', 
      tnt: 'active',
      timestamp: new Date().toISOString()
    }
  });
});

module.exports = router;`;

  // ========================================
  // LOGS ROUTE
  // ========================================
  const logsRoute = `// src/routes/logs.routes.js
const express = require('express');
const router = express.Router();
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * /api/logs:
 *   get:
 *     summary: Listar logs do sistema
 *     tags: [Logs]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - name: level
 *         in: query
 *         schema: { type: string, enum: ['error', 'warn', 'info', 'debug'] }
 *       - name: limit
 *         in: query
 *         schema: { type: integer, default: 50 }
 *     responses:
 *       200:
 *         description: Lista de logs
 */
router.get('/', auth, (req, res) => {
  const { level, limit = 50 } = req.query;
  
  const logs = [
    { id: 1, level: 'info', message: 'Sistema iniciado', timestamp: new Date().toISOString() },
    { id: 2, level: 'info', message: 'Jobs inicializados', timestamp: new Date().toISOString() },
    { id: 3, level: 'warn', message: 'Token expirando', timestamp: new Date().toISOString() },
    { id: 4, level: 'error', message: 'Falha na sincroniza√ß√£o', timestamp: new Date().toISOString() }
  ];

  const filteredLogs = level ? logs.filter(log => log.level === level) : logs;
  
  res.json({
    success: true,
    data: {
      logs: filteredLogs.slice(0, limit),
      total: filteredLogs.length
    }
  });
});

/**
 * @swagger
 * /api/logs/stats:
 *   get:
 *     summary: Estat√≠sticas dos logs
 *     tags: [Logs]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Estat√≠sticas
 */
router.get('/stats', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      total: 1250,
      errors: 15,
      warnings: 45,
      info: 1190
    }
  });
});

module.exports = router;`;

  // ========================================
  // REPORTS ROUTE
  // ========================================
  const reportsRoute = `// src/routes/reports.routes.js
const express = require('express');
const router = express.Router();
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * /api/reports/dashboard:
 *   get:
 *     summary: Dados para dashboard
 *     tags: [Reports]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Dados do dashboard
 */
router.get('/dashboard', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      summary: {
        total_nfs: 15420,
        nfs_today: 340,
        active_jobs: 3,
        success_rate: 98.5
      },
      integrations_status: {
        jamef: 'active',
        braspress: 'warning',
        tnt: 'active'
      }
    }
  });
});

module.exports = router;`;

  // ========================================
  // CRIAR TODOS OS ARQUIVOS
  // ========================================
  const routes = {
    'integrations.routes.js': integrationsRoute,
    'external-apis.routes.js': externalApisRoute,
    'webhooks.routes.js': webhooksRoute,
    'logs.routes.js': logsRoute,
    'reports.routes.js': reportsRoute
  };

  Object.entries(routes).forEach(([filename, content]) => {
    const filePath = path.join(routesDir, filename);
    fs.writeFileSync(filePath, content);
    console.log(`   ‚úÖ ${filename} criado`);
  });
  
  console.log('');
}

function updateServer() {
  console.log('2Ô∏è‚É£ Atualizando server.js...\n');
  
  const serverPath = path.join(__dirname, '..', 'server.js');
  let content = fs.readFileSync(serverPath, 'utf8');
  
  // Backup
  fs.writeFileSync(serverPath + '.backup', content);

  // Adicionar importa√ß√µes se n√£o existirem
  if (!content.includes('integrationsRoutes')) {
    const importPoint = content.indexOf('const tabelaOcorrenciasRoutes');
    if (importPoint !== -1) {
      const lineEnd = content.indexOf('\n', importPoint);
      const newImports = `
// ========================================
// IMPORTAR ROTAS DAS APIs EXTERNAS
// ========================================
const integrationsRoutes = require('./src/routes/integrations.routes');
const externalApisRoutes = require('./src/routes/external-apis.routes');
const webhooksRoutes = require('./src/routes/webhooks.routes');
const logsRoutes = require('./src/routes/logs.routes');
const reportsRoutes = require('./src/routes/reports.routes');`;
      
      content = content.slice(0, lineEnd) + newImports + content.slice(lineEnd);
      console.log('   ‚úÖ Importa√ß√µes adicionadas');
    }
  }

  // Adicionar uso das rotas se n√£o existirem
  if (!content.includes("app.use('/api/integrations'")) {
    const routePoint = content.indexOf("app.use('/api/tabelacodigosocorrencia'");
    if (routePoint !== -1) {
      const lineEnd = content.indexOf('\n', routePoint);
      const newRoutes = `
// ========================================
// ROTAS DAS APIs EXTERNAS
// ========================================
app.use('/api/integrations', integrationsRoutes);
app.use('/api/external-apis', externalApisRoutes);
app.use('/api/webhooks', webhooksRoutes);
app.use('/api/logs', logsRoutes);
app.use('/api/reports', reportsRoutes);`;
      
      content = content.slice(0, lineEnd) + newRoutes + content.slice(lineEnd);
      console.log('   ‚úÖ Rotas adicionadas');
    }
  }

  fs.writeFileSync(serverPath, content);
  console.log('');
}

function fixSwagger() {
  console.log('3Ô∏è‚É£ Corrigindo swaggerDef.js...\n');
  
  const swaggerDefPath = path.join(__dirname, '..', 'swaggerDef.js');
  
  const correctSwaggerDef = `// swaggerDef.js - VERS√ÉO CORRETA
module.exports = {
  openapi: '3.0.0',
  info: {
    title: 'Road-RW API',
    version: '1.0.0',
    description: 'Sistema de Gest√£o Log√≠stica - Backend API'
  },
  servers: [
    {
      url: 'http://localhost:3001',
      description: 'Servidor de Desenvolvimento'
    }
  ],
  components: {
    securitySchemes: {
      bearerAuth: {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT'
      }
    }
  },
  tags: [
    { name: 'Auth', description: 'Autentica√ß√£o' },
    { name: 'Transportadoras', description: 'Transportadoras' },
    { name: 'Clientes', description: 'Clientes' },
    { name: 'Embarcadores', description: 'Embarcadores' },
    { name: 'Motoristas', description: 'Motoristas' },
    { name: 'Notas Fiscais', description: 'Notas Fiscais' },
    { name: 'Romaneios', description: 'Romaneios' },
    { name: 'Ocorr√™ncias', description: 'Ocorr√™ncias' },
    { name: 'Jobs', description: 'Jobs de Integra√ß√£o' },
    { name: 'Monitoring', description: 'Monitoramento' },
    { name: 'Integrations', description: 'Integra√ß√µes' },
    { name: 'External APIs', description: 'APIs Externas' },
    { name: 'Webhooks', description: 'Webhooks' },
    { name: 'Logs', description: 'Logs' },
    { name: 'Reports', description: 'Relat√≥rios' }
  ]
};`;

  fs.writeFileSync(swaggerDefPath, correctSwaggerDef);
  console.log('   ‚úÖ swaggerDef.js corrigido');
  console.log('');
  
  console.log('üìã ENDPOINTS QUE DEVEM FUNCIONAR:');
  console.log('   ‚úÖ GET /api/webhooks/status (sem auth)');
  console.log('   ‚úÖ GET /api/integrations (com auth)');
  console.log('   ‚úÖ GET /api/external-apis/tokens (com auth)');
  console.log('   ‚úÖ GET /api/logs (com auth)');
  console.log('   ‚úÖ GET /api/reports/dashboard (com auth)');
  console.log('');
  console.log('üîê Para endpoints com auth: fa√ßa login em /api/auth/login primeiro');
}

// Executar tudo
if (require.main === module) {
  fixAllRoutesClean();
}

module.exports = { fixAllRoutesClean };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\create-missing-routes.js
================================================================================

// scripts/create-missing-routes.js
const fs = require('fs');
const path = require('path');

function createMissingRoutes() {
  console.log('üìÅ Criando arquivos de rotas faltantes...');

  const routesDir = path.join(__dirname, '..', 'src', 'routes');
  
  // Garantir que o diret√≥rio existe
  if (!fs.existsSync(routesDir)) {
    fs.mkdirSync(routesDir, { recursive: true });
  }

  // Templates para cada tipo de rota
  const routes = [
    {
      file: 'integrations.routes.js',
      content: `// src/routes/integrations.routes.js
const express = require('express');
const router = express.Router();

// Middleware de autentica√ß√£o
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * tags:
 *   name: Integrations
 *   description: Opera√ß√µes de integra√ß√£o com transportadoras
 */

/**
 * @swagger
 * /api/integrations:
 *   get:
 *     summary: Listar todas as integra√ß√µes dispon√≠veis
 *     tags: [Integrations]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Lista de integra√ß√µes
 */
router.get('/', auth, (req, res) => {
  res.json({
    success: true,
    message: 'Integra√ß√µes dispon√≠veis',
    data: [
      { name: 'jamef', status: 'available', description: 'Integra√ß√£o JAMEF' },
      { name: 'braspress', status: 'available', description: 'Integra√ß√£o Braspress' },
      { name: 'tnt', status: 'available', description: 'Integra√ß√£o TNT' }
    ]
  });
});

/**
 * @swagger
 * /api/integrations/{transportadora}/test:
 *   post:
 *     summary: Testar conex√£o com API da transportadora
 *     tags: [Integrations]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - in: path
 *         name: transportadora
 *         required: true
 *         schema: { type: string, example: "jamef" }
 *     responses:
 *       200:
 *         description: Teste realizado com sucesso
 */
router.post('/:transportadora/test', auth, (req, res) => {
  const { transportadora } = req.params;
  res.json({
    success: true,
    message: \`Teste de conex√£o com \${transportadora} realizado\`,
    data: {
      transportadora,
      status: 'success',
      timestamp: new Date().toISOString()
    }
  });
});

/**
 * @swagger
 * /api/integrations/{transportadora}/status:
 *   get:
 *     summary: Obter status de uma integra√ß√£o espec√≠fica
 *     tags: [Integrations]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - in: path
 *         name: transportadora
 *         required: true
 *         schema: { type: string }
 *     responses:
 *       200:
 *         description: Status da integra√ß√£o
 */
router.get('/:transportadora/status', auth, (req, res) => {
  const { transportadora } = req.params;
  res.json({
    success: true,
    data: {
      transportadora,
      status: 'active',
      lastSync: new Date().toISOString(),
      isConfigured: true
    }
  });
});

module.exports = router;`
    },
    {
      file: 'external-apis.routes.js',
      content: `// src/routes/external-apis.routes.js
const express = require('express');
const router = express.Router();

// Middleware de autentica√ß√£o
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * tags:
 *   name: External APIs
 *   description: Configura√ß√£o e gerenciamento de APIs externas
 */

/**
 * @swagger
 * /api/external-apis/tokens:
 *   get:
 *     summary: Listar tokens de API configurados
 *     tags: [External APIs]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Lista de tokens
 */
router.get('/tokens', auth, (req, res) => {
  res.json({
    success: true,
    message: 'Tokens de API',
    data: [
      { integracao: 'jamef', active: true, expires_at: null },
      { integracao: 'braspress', active: false, expires_at: null },
      { integracao: 'tnt', active: true, expires_at: null }
    ]
  });
});

/**
 * @swagger
 * /api/external-apis/settings:
 *   get:
 *     summary: Obter configura√ß√µes gerais das APIs
 *     tags: [External APIs]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Configura√ß√µes das APIs
 */
router.get('/settings', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      enabled: true,
      pollInterval: 300,
      concurrentJobs: 3,
      rateLimits: {
        jamef: { requests: 100, per: 'minute' },
        braspress: { requests: 500, per: 'hour' },
        tnt: { requests: 200, per: 'minute' }
      }
    }
  });
});

module.exports = router;`
    },
    {
      file: 'webhooks.routes.js',
      content: `// src/routes/webhooks.routes.js
const express = require('express');
const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Webhooks
 *   description: Endpoints para receber dados das transportadoras
 */

/**
 * @swagger
 * /api/webhooks/jamef:
 *   post:
 *     summary: Webhook para receber dados da JAMEF
 *     tags: [Webhooks]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               numeroNF: { type: string }
 *               status: { type: string }
 *     responses:
 *       200:
 *         description: Dados processados com sucesso
 */
router.post('/jamef', (req, res) => {
  console.log('Webhook JAMEF recebido:', req.body);
  res.json({
    success: true,
    message: 'Webhook JAMEF processado',
    timestamp: new Date().toISOString()
  });
});

/**
 * @swagger
 * /api/webhooks/braspress:
 *   post:
 *     summary: Webhook para receber dados da Braspress
 *     tags: [Webhooks]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *     responses:
 *       200:
 *         description: Dados processados com sucesso
 */
router.post('/braspress', (req, res) => {
  console.log('Webhook Braspress recebido:', req.body);
  res.json({
    success: true,
    message: 'Webhook Braspress processado',
    timestamp: new Date().toISOString()
  });
});

/**
 * @swagger
 * /api/webhooks/tnt:
 *   post:
 *     summary: Webhook para receber dados da TNT
 *     tags: [Webhooks]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *     responses:
 *       200:
 *         description: Dados processados com sucesso
 */
router.post('/tnt', (req, res) => {
  console.log('Webhook TNT recebido:', req.body);
  res.json({
    success: true,
    message: 'Webhook TNT processado',
    timestamp: new Date().toISOString()
  });
});

/**
 * @swagger
 * /api/webhooks/status:
 *   get:
 *     summary: Status dos webhooks
 *     tags: [Webhooks]
 *     responses:
 *       200:
 *         description: Status dos webhooks
 */
router.get('/status', (req, res) => {
  res.json({
    success: true,
    message: 'Webhooks funcionando',
    data: {
      jamef: 'active',
      braspress: 'active',
      tnt: 'active',
      timestamp: new Date().toISOString()
    }
  });
});

module.exports = router;`
    },
    {
      file: 'logs.routes.js',
      content: `// src/routes/logs.routes.js
const express = require('express');
const router = express.Router();

// Middleware de autentica√ß√£o
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * tags:
 *   name: Logs
 *   description: Visualiza√ß√£o e gerenciamento de logs do sistema
 */

/**
 * @swagger
 * /api/logs:
 *   get:
 *     summary: Listar logs do sistema
 *     tags: [Logs]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - in: query
 *         name: page
 *         schema: { type: integer, default: 1 }
 *       - in: query
 *         name: limit
 *         schema: { type: integer, default: 50 }
 *       - in: query
 *         name: level
 *         schema: { type: string, enum: ['error', 'warn', 'info', 'debug'] }
 *     responses:
 *       200:
 *         description: Lista de logs
 */
router.get('/', auth, (req, res) => {
  const { page = 1, limit = 50, level } = req.query;
  
  // Simula√ß√£o de logs
  const logs = [
    {
      id: 1,
      level: 'info',
      message: 'Sistema iniciado',
      timestamp: new Date().toISOString(),
      service: 'road-rw-api'
    },
    {
      id: 2,
      level: 'info',
      message: 'Jobs inicializados',
      timestamp: new Date().toISOString(),
      service: 'jobs'
    }
  ];

  res.json({
    success: true,
    data: {
      logs: level ? logs.filter(log => log.level === level) : logs,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total: logs.length,
        totalPages: Math.ceil(logs.length / limit)
      }
    }
  });
});

/**
 * @swagger
 * /api/logs/stats:
 *   get:
 *     summary: Estat√≠sticas dos logs
 *     tags: [Logs]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Estat√≠sticas dos logs
 */
router.get('/stats', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      total: 1250,
      errors: 15,
      warnings: 45,
      info: 1190,
      period: '24h'
    }
  });
});

module.exports = router;`
    }
  ];

  // Criar cada arquivo
  routes.forEach(route => {
    const filePath = path.join(routesDir, route.file);
    
    if (fs.existsSync(filePath)) {
      console.log(`‚ÑπÔ∏è  ${route.file} j√° existe`);
    } else {
      fs.writeFileSync(filePath, route.content);
      console.log(`‚úÖ ${route.file} criado`);
    }
  });

  console.log('\n‚úÖ Todos os arquivos de rotas foram criados!');
}

if (require.main === module) {
  createMissingRoutes();
}

module.exports = { createMissingRoutes };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\external-stats.js
================================================================================

// ==========================================
// 2. SCRIPT DE ESTAT√çSTICAS DETALHADAS
// ==========================================
// backend/scripts/external-stats.js

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

const Database = require('../src/database/connection');
const logger = require('../src/config/logger');

async function showStats() {
  const database = new Database();
  
  try {
    await database.connect();
    
    const periodo = process.argv[2] || '7'; // dias
    
    logger.info(`=== ESTAT√çSTICAS DAS APIS EXTERNAS (${periodo} dias) ===`);

    // 1. Resumo geral
    await showGeneralStats(database, periodo);
    
    // 2. Estat√≠sticas por integra√ß√£o
    await showIntegrationStats(database, periodo);
    
    // 3. Estat√≠sticas por opera√ß√£o
    await showOperationStats(database, periodo);
    
    // 4. Top IPs
    await showTopIPs(database, periodo);
    
    // 5. Hor√°rios de pico
    await showPeakHours(database, periodo);

  } catch (error) {
    logger.error('Erro ao gerar estat√≠sticas:', error);
  } finally {
    await database.disconnect();
  }
}

async function showGeneralStats(database, periodo) {
  const query = `
    SELECT 
      COUNT(*) as total_requests,
      COUNT(DISTINCT integracao) as total_integracoes,
      COUNT(DISTINCT ip) as total_ips,
      COUNT(CASE WHEN resultado->>'error' IS NULL THEN 1 END) as successful,
      COUNT(CASE WHEN resultado->>'error' IS NOT NULL THEN 1 END) as failed,
      ROUND(AVG(request_size), 2) as avg_size,
      MIN(created_at) as first_request,
      MAX(created_at) as last_request
    FROM external_logs 
    WHERE created_at >= NOW() - INTERVAL '${periodo} days'
  `;

  const result = await database.query(query);
  const stats = result.rows[0];

  const successRate = stats.total_requests > 0 ? 
    Math.round((stats.successful / stats.total_requests) * 100) : 0;

  logger.info('\nüìä RESUMO GERAL:');
  logger.info(`Total de requests: ${stats.total_requests}`);
  logger.info(`Integra√ß√µes ativas: ${stats.total_integracoes}`);
  logger.info(`IPs √∫nicos: ${stats.total_ips}`);
  logger.info(`Taxa de sucesso: ${successRate}% (${stats.successful}/${stats.total_requests})`);
  logger.info(`Tamanho m√©dio: ${stats.avg_size} bytes`);
  
  if (stats.first_request) {
    logger.info(`Primeiro request: ${stats.first_request}`);
    logger.info(`√öltimo request: ${stats.last_request}`);
  }
}

async function showIntegrationStats(database, periodo) {
  const query = `
    SELECT 
      integracao,
      COUNT(*) as total_requests,
      COUNT(CASE WHEN resultado->>'error' IS NULL THEN 1 END) as successful,
      COUNT(CASE WHEN resultado->>'error' IS NOT NULL THEN 1 END) as failed,
      ROUND(AVG(request_size), 2) as avg_size,
      COUNT(DISTINCT ip) as unique_ips
    FROM external_logs 
    WHERE created_at >= NOW() - INTERVAL '${periodo} days'
    GROUP BY integracao
    ORDER BY total_requests DESC
  `;

  const result = await database.query(query);

  logger.info('\nüìà POR INTEGRA√á√ÉO:');
  
  if (result.rows.length === 0) {
    logger.info('Nenhuma atividade encontrada');
    return;
  }

  result.rows.forEach(row => {
    const successRate = Math.round((row.successful / row.total_requests) * 100);
    logger.info(
      `${row.integracao}: ${row.total_requests} requests, ` +
      `${successRate}% sucesso, ${row.unique_ips} IPs`
    );
  });
}

async function showOperationStats(database, periodo) {
  const query = `
    SELECT 
      operacao,
      COUNT(*) as total_requests,
      COUNT(CASE WHEN resultado->>'error' IS NULL THEN 1 END) as successful,
      ROUND(AVG(request_size), 2) as avg_size
    FROM external_logs 
    WHERE created_at >= NOW() - INTERVAL '${periodo} days'
    GROUP BY operacao
    ORDER BY total_requests DESC
  `;

  const result = await database.query(query);

  logger.info('\nüîß POR OPERA√á√ÉO:');
  result.rows.forEach(row => {
    const successRate = Math.round((row.successful / row.total_requests) * 100);
    logger.info(
      `${row.operacao}: ${row.total_requests} requests, ` +
      `${successRate}% sucesso`
    );
  });
}

async function showTopIPs(database, periodo) {
  const query = `
    SELECT 
      ip,
      COUNT(*) as requests,
      COUNT(DISTINCT integracao) as integracoes
    FROM external_logs 
    WHERE created_at >= NOW() - INTERVAL '${periodo} days'
      AND ip IS NOT NULL
    GROUP BY ip
    ORDER BY requests DESC
    LIMIT 10
  `;

  const result = await database.query(query);

  logger.info('\nüåê TOP 10 IPs:');
  result.rows.forEach((row, index) => {
    logger.info(`${index + 1}. ${row.ip}: ${row.requests} requests, ${row.integracoes} integra√ß√µes`);
  });
}

async function showPeakHours(database, periodo) {
  const query = `
    SELECT 
      EXTRACT(HOUR FROM created_at) as hora,
      COUNT(*) as requests
    FROM external_logs 
    WHERE created_at >= NOW() - INTERVAL '${periodo} days'
    GROUP BY EXTRACT(HOUR FROM created_at)
    ORDER BY requests DESC
    LIMIT 5
  `;

  const result = await database.query(query);

  logger.info('\n‚è∞ HOR√ÅRIOS DE PICO:');
  result.rows.forEach((row, index) => {
    logger.info(`${index + 1}. ${row.hora}h: ${row.requests} requests`);
  });
}

// Executar se chamado diretamente
if (require.main === module) {
  showStats();
}

module.exports = { showStats };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\fix-all-endpoints.js
================================================================================

// scripts/fix-all-endpoints.js
const fs = require('fs');
const path = require('path');

function fixJobManager() {
  console.log('üîß Corrigindo JobManager...');
  
  const jobManagerPath = path.join(__dirname, '..', 'src', 'services', 'jobs', 'job-manager.service.js');
  
  if (!fs.existsSync(jobManagerPath)) {
    console.log('‚ùå Arquivo job-manager.service.js n√£o encontrado');
    return false;
  }

  let content = fs.readFileSync(jobManagerPath, 'utf8');
  
  // Verificar se o m√©todo j√° existe
  if (content.includes('getHealthStatus')) {
    console.log('‚ÑπÔ∏è JobManager j√° possui m√©todo getHealthStatus');
    return true;
  }

  // M√©todo para adicionar
  const healthStatusMethod = `
  // M√©todos para status e sa√∫de dos jobs
  async getHealthStatus() {
    try {
      if (!this.isInitialized) {
        return { status: 'not_initialized' };
      }

      return {
        status: 'running',
        initialized: this.isInitialized,
        scheduler: this.scheduler ? 'active' : 'inactive',
        repositories: Object.keys(this.repositories || {}),
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return { 
        status: 'error', 
        message: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  async getStatus() {
    return await this.getHealthStatus();
  }

  async getIntegrationsStatus() {
    try {
      if (!this.repositories || !this.repositories.monitoring) {
        return [];
      }
      return [];
    } catch (error) {
      return [];
    }
  }`;

  // Encontrar o final da classe
  const classEndIndex = content.lastIndexOf('}');
  if (classEndIndex === -1) {
    console.log('‚ùå N√£o foi poss√≠vel encontrar o final da classe JobManager');
    return false;
  }

  // Inserir os m√©todos
  const newContent = 
    content.slice(0, classEndIndex) + 
    healthStatusMethod + 
    '\n' + 
    content.slice(classEndIndex);

  // Fazer backup e salvar
  fs.writeFileSync(jobManagerPath + '.backup', content);
  fs.writeFileSync(jobManagerPath, newContent);
  
  console.log('‚úÖ JobManager corrigido');
  return true;
}

function fixServerJs() {
  console.log('üîß Corrigindo server.js...');
  
  const serverPath = path.join(__dirname, '..', 'server.js');
  
  if (!fs.existsSync(serverPath)) {
    console.log('‚ùå Arquivo server.js n√£o encontrado');
    return false;
  }

  let content = fs.readFileSync(serverPath, 'utf8');
  
  // Verificar se o endpoint j√° existe
  if (content.includes('/api/system/status')) {
    console.log('‚ÑπÔ∏è Endpoint /api/system/status j√° existe');
    return true;
  }

  // Endpoint para adicionar
  const systemStatusEndpoint = `
// ========================================
// STATUS GERAL DO SISTEMA
// ========================================
app.get('/api/system/status', async (req, res) => {
  try {
    const status = {
      server: {
        status: 'running',
        port: config.port,
        environment: config.nodeEnv,
        uptime: process.uptime(),
        timestamp: new Date().toISOString()
      },
      database: await db.healthCheck(),
      jobs: { status: 'not_initialized' },
      integrations: []
    };

    // Verificar jobs se dispon√≠vel
    if (jobManager && jobManager.isInitialized) {
      try {
        if (jobManager.getHealthStatus) {
          status.jobs = await jobManager.getHealthStatus();
        } else {
          status.jobs = { 
            status: 'active', 
            initialized: jobManager.isInitialized 
          };
        }

        if (jobManager.getIntegrationsStatus) {
          status.integrations = await jobManager.getIntegrationsStatus();
        }
      } catch (error) {
        status.jobs = { status: 'error', message: error.message };
      }
    }
    
    res.json({
      success: true,
      data: status
    });
  } catch (error) {
    logger.error('Erro ao obter status do sistema:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao obter status do sistema',
      error: error.message
    });
  }
});
`;

  // Encontrar onde inserir (ap√≥s o health check)
  const healthCheckIndex = content.indexOf("app.get('/health'");
  if (healthCheckIndex === -1) {
    console.log('‚ùå N√£o foi poss√≠vel encontrar o endpoint /health');
    return false;
  }

  // Encontrar o final do health check
  const healthCheckEnd = content.indexOf('});', healthCheckIndex);
  if (healthCheckEnd === -1) {
    console.log('‚ùå N√£o foi poss√≠vel encontrar o final do endpoint /health');
    return false;
  }

  const insertPoint = healthCheckEnd + 3; // ap√≥s '});'

  // Inserir o novo endpoint
  const newContent = 
    content.slice(0, insertPoint) + 
    '\n' + 
    systemStatusEndpoint + 
    content.slice(insertPoint);

  // Fazer backup e salvar
  fs.writeFileSync(serverPath + '.backup', content);
  fs.writeFileSync(serverPath, newContent);
  
  console.log('‚úÖ server.js corrigido');
  return true;
}

function main() {
  console.log('üöÄ Corrigindo todos os endpoints...\n');
  
  const jobManagerFixed = fixJobManager();
  const serverFixed = fixServerJs();
  
  if (jobManagerFixed && serverFixed) {
    console.log('\nüéâ Todas as corre√ß√µes aplicadas!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Reinicie o servidor: npm run dev');
    console.log('2. Teste os endpoints:');
    console.log('   ‚Ä¢ http://localhost:3001/health');
    console.log('   ‚Ä¢ http://localhost:3001/api/system/status');
    console.log('   ‚Ä¢ http://localhost:3001/api/jobs/status');
    console.log('   ‚Ä¢ http://localhost:3001/api/monitoring/dashboard');
  } else {
    console.log('\n‚ùå Algumas corre√ß√µes falharam. Verifique os logs acima.');
  }
}

if (require.main === module) {
  main();
}

module.exports = { fixJobManager, fixServerJs };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\fix-all-routes-CLEAN.js
================================================================================

// scripts/fix-all-routes-CLEAN.js
// üöÄ SCRIPT CORRIGIDO - SEM ERROS DE SINTAXE

const fs = require('fs');
const path = require('path');

function fixAllRoutesClean() {
  console.log('üöÄ CONFIGURANDO TODAS AS ROTAS - VERS√ÉO CORRIGIDA\n');

  try {
    // 1. Criar todas as rotas
    createAllRoutes();
    
    // 2. Atualizar server.js
    updateServer();
    
    // 3. Corrigir swagger
    fixSwagger();
    
    console.log('üéâ CONCLU√çDO! Reinicie o servidor: npm run dev');
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  }
}

function createAllRoutes() {
  console.log('1Ô∏è‚É£ Criando arquivos de rotas...\n');
  
  const routesDir = path.join(__dirname, '..', 'src', 'routes');
  
  if (!fs.existsSync(routesDir)) {
    fs.mkdirSync(routesDir, { recursive: true });
  }

  // ========================================
  // INTEGRATIONS ROUTE
  // ========================================
  const integrationsRoute = `// src/routes/integrations.routes.js
const express = require('express');
const router = express.Router();
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * /api/integrations:
 *   get:
 *     summary: Listar integra√ß√µes dispon√≠veis
 *     tags: [Integrations]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Lista de integra√ß√µes
 */
router.get('/', auth, (req, res) => {
  res.json({
    success: true,
    data: [
      { name: 'jamef', status: 'active', description: 'Integra√ß√£o JAMEF' },
      { name: 'braspress', status: 'active', description: 'Integra√ß√£o Braspress' },
      { name: 'tnt', status: 'active', description: 'Integra√ß√£o TNT' }
    ]
  });
});

/**
 * @swagger
 * /api/integrations/{transportadora}/test:
 *   post:
 *     summary: Testar conex√£o com transportadora
 *     tags: [Integrations]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - name: transportadora
 *         in: path
 *         required: true
 *         schema: { type: string, example: "jamef" }
 *     responses:
 *       200:
 *         description: Teste realizado
 */
router.post('/:transportadora/test', auth, (req, res) => {
  res.json({
    success: true,
    message: \`Teste \${req.params.transportadora} realizado com sucesso\`,
    data: { status: 'success', response_time: '150ms' }
  });
});

/**
 * @swagger
 * /api/integrations/{transportadora}/status:
 *   get:
 *     summary: Status da integra√ß√£o
 *     tags: [Integrations]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - name: transportadora
 *         in: path
 *         required: true
 *         schema: { type: string }
 *     responses:
 *       200:
 *         description: Status da integra√ß√£o
 */
router.get('/:transportadora/status', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      transportadora: req.params.transportadora,
      status: 'active',
      lastSync: new Date().toISOString(),
      isConfigured: true
    }
  });
});

module.exports = router;`;

  // ========================================
  // EXTERNAL APIS ROUTE
  // ========================================
  const externalApisRoute = `// src/routes/external-apis.routes.js
const express = require('express');
const router = express.Router();
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * /api/external-apis/tokens:
 *   get:
 *     summary: Listar tokens de API
 *     tags: [External APIs]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Lista de tokens
 */
router.get('/tokens', auth, (req, res) => {
  res.json({
    success: true,
    data: [
      { integracao: 'jamef', active: true, created_at: new Date().toISOString() },
      { integracao: 'braspress', active: false, created_at: new Date().toISOString() },
      { integracao: 'tnt', active: true, created_at: new Date().toISOString() }
    ]
  });
});

/**
 * @swagger
 * /api/external-apis/settings:
 *   get:
 *     summary: Configura√ß√µes das APIs
 *     tags: [External APIs]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Configura√ß√µes
 */
router.get('/settings', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      enabled: true,
      pollInterval: 300,
      concurrentJobs: 3,
      rateLimits: {
        jamef: { requests: 100, per: 'minute' },
        braspress: { requests: 500, per: 'hour' },
        tnt: { requests: 200, per: 'minute' }
      }
    }
  });
});

module.exports = router;`;

  // ========================================
  // WEBHOOKS ROUTE
  // ========================================
  const webhooksRoute = `// src/routes/webhooks.routes.js
const express = require('express');
const router = express.Router();

/**
 * @swagger
 * /api/webhooks/jamef:
 *   post:
 *     summary: Webhook JAMEF
 *     tags: [Webhooks]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               numeroNF: { type: string }
 *               status: { type: string }
 *     responses:
 *       200:
 *         description: Processado com sucesso
 */
router.post('/jamef', (req, res) => {
  console.log('Webhook JAMEF:', req.body);
  res.json({ success: true, message: 'Webhook JAMEF processado' });
});

/**
 * @swagger
 * /api/webhooks/braspress:
 *   post:
 *     summary: Webhook Braspress
 *     tags: [Webhooks]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema: { type: object }
 *     responses:
 *       200:
 *         description: Processado com sucesso
 */
router.post('/braspress', (req, res) => {
  console.log('Webhook Braspress:', req.body);
  res.json({ success: true, message: 'Webhook Braspress processado' });
});

/**
 * @swagger
 * /api/webhooks/tnt:
 *   post:
 *     summary: Webhook TNT
 *     tags: [Webhooks]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema: { type: object }
 *     responses:
 *       200:
 *         description: Processado com sucesso
 */
router.post('/tnt', (req, res) => {
  console.log('Webhook TNT:', req.body);
  res.json({ success: true, message: 'Webhook TNT processado' });
});

/**
 * @swagger
 * /api/webhooks/status:
 *   get:
 *     summary: Status dos webhooks
 *     tags: [Webhooks]
 *     responses:
 *       200:
 *         description: Status dos webhooks
 */
router.get('/status', (req, res) => {
  res.json({
    success: true,
    data: {
      jamef: 'active',
      braspress: 'active', 
      tnt: 'active',
      timestamp: new Date().toISOString()
    }
  });
});

module.exports = router;`;

  // ========================================
  // LOGS ROUTE
  // ========================================
  const logsRoute = `// src/routes/logs.routes.js
const express = require('express');
const router = express.Router();
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * /api/logs:
 *   get:
 *     summary: Listar logs do sistema
 *     tags: [Logs]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - name: level
 *         in: query
 *         schema: { type: string, enum: ['error', 'warn', 'info', 'debug'] }
 *       - name: limit
 *         in: query
 *         schema: { type: integer, default: 50 }
 *     responses:
 *       200:
 *         description: Lista de logs
 */
router.get('/', auth, (req, res) => {
  const { level, limit = 50 } = req.query;
  
  const logs = [
    { id: 1, level: 'info', message: 'Sistema iniciado', timestamp: new Date().toISOString() },
    { id: 2, level: 'info', message: 'Jobs inicializados', timestamp: new Date().toISOString() },
    { id: 3, level: 'warn', message: 'Token expirando', timestamp: new Date().toISOString() },
    { id: 4, level: 'error', message: 'Falha na sincroniza√ß√£o', timestamp: new Date().toISOString() }
  ];

  const filteredLogs = level ? logs.filter(log => log.level === level) : logs;
  
  res.json({
    success: true,
    data: {
      logs: filteredLogs.slice(0, limit),
      total: filteredLogs.length
    }
  });
});

/**
 * @swagger
 * /api/logs/stats:
 *   get:
 *     summary: Estat√≠sticas dos logs
 *     tags: [Logs]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Estat√≠sticas
 */
router.get('/stats', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      total: 1250,
      errors: 15,
      warnings: 45,
      info: 1190
    }
  });
});

module.exports = router;`;

  // ========================================
  // REPORTS ROUTE
  // ========================================
  const reportsRoute = `// src/routes/reports.routes.js
const express = require('express');
const router = express.Router();
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * /api/reports/dashboard:
 *   get:
 *     summary: Dados para dashboard
 *     tags: [Reports]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Dados do dashboard
 */
router.get('/dashboard', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      summary: {
        total_nfs: 15420,
        nfs_today: 340,
        active_jobs: 3,
        success_rate: 98.5
      },
      integrations_status: {
        jamef: 'active',
        braspress: 'warning',
        tnt: 'active'
      }
    }
  });
});

module.exports = router;`;

  // ========================================
  // CRIAR TODOS OS ARQUIVOS
  // ========================================
  const routes = {
    'integrations.routes.js': integrationsRoute,
    'external-apis.routes.js': externalApisRoute,
    'webhooks.routes.js': webhooksRoute,
    'logs.routes.js': logsRoute,
    'reports.routes.js': reportsRoute
  };

  Object.entries(routes).forEach(([filename, content]) => {
    const filePath = path.join(routesDir, filename);
    fs.writeFileSync(filePath, content);
    console.log(`   ‚úÖ ${filename} criado`);
  });
  
  console.log('');
}

function updateServer() {
  console.log('2Ô∏è‚É£ Atualizando server.js...\n');
  
  const serverPath = path.join(__dirname, '..', 'server.js');
  let content = fs.readFileSync(serverPath, 'utf8');
  
  // Backup
  fs.writeFileSync(serverPath + '.backup', content);

  // Adicionar importa√ß√µes se n√£o existirem
  if (!content.includes('integrationsRoutes')) {
    const importPoint = content.indexOf('const tabelaOcorrenciasRoutes');
    if (importPoint !== -1) {
      const lineEnd = content.indexOf('\n', importPoint);
      const newImports = `
// ========================================
// IMPORTAR ROTAS DAS APIs EXTERNAS
// ========================================
const integrationsRoutes = require('./src/routes/integrations.routes');
const externalApisRoutes = require('./src/routes/external-apis.routes');
const webhooksRoutes = require('./src/routes/webhooks.routes');
const logsRoutes = require('./src/routes/logs.routes');
const reportsRoutes = require('./src/routes/reports.routes');`;
      
      content = content.slice(0, lineEnd) + newImports + content.slice(lineEnd);
      console.log('   ‚úÖ Importa√ß√µes adicionadas');
    }
  }

  // Adicionar uso das rotas se n√£o existirem
  if (!content.includes("app.use('/api/integrations'")) {
    const routePoint = content.indexOf("app.use('/api/tabelacodigosocorrencia'");
    if (routePoint !== -1) {
      const lineEnd = content.indexOf('\n', routePoint);
      const newRoutes = `
// ========================================
// ROTAS DAS APIs EXTERNAS
// ========================================
app.use('/api/integrations', integrationsRoutes);
app.use('/api/external-apis', externalApisRoutes);
app.use('/api/webhooks', webhooksRoutes);
app.use('/api/logs', logsRoutes);
app.use('/api/reports', reportsRoutes);`;
      
      content = content.slice(0, lineEnd) + newRoutes + content.slice(lineEnd);
      console.log('   ‚úÖ Rotas adicionadas');
    }
  }

  fs.writeFileSync(serverPath, content);
  console.log('');
}

function fixSwagger() {
  console.log('3Ô∏è‚É£ Corrigindo swaggerDef.js...\n');
  
  const swaggerDefPath = path.join(__dirname, '..', 'swaggerDef.js');
  
  const correctSwaggerDef = `// swaggerDef.js - VERS√ÉO CORRETA
module.exports = {
  openapi: '3.0.0',
  info: {
    title: 'Road-RW API',
    version: '1.0.0',
    description: 'Sistema de Gest√£o Log√≠stica - Backend API'
  },
  servers: [
    {
      url: 'http://localhost:3001',
      description: 'Servidor de Desenvolvimento'
    }
  ],
  components: {
    securitySchemes: {
      bearerAuth: {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT'
      }
    }
  },
  tags: [
    { name: 'Auth', description: 'Autentica√ß√£o' },
    { name: 'Transportadoras', description: 'Transportadoras' },
    { name: 'Clientes', description: 'Clientes' },
    { name: 'Embarcadores', description: 'Embarcadores' },
    { name: 'Motoristas', description: 'Motoristas' },
    { name: 'Notas Fiscais', description: 'Notas Fiscais' },
    { name: 'Romaneios', description: 'Romaneios' },
    { name: 'Ocorr√™ncias', description: 'Ocorr√™ncias' },
    { name: 'Jobs', description: 'Jobs de Integra√ß√£o' },
    { name: 'Monitoring', description: 'Monitoramento' },
    { name: 'Integrations', description: 'Integra√ß√µes' },
    { name: 'External APIs', description: 'APIs Externas' },
    { name: 'Webhooks', description: 'Webhooks' },
    { name: 'Logs', description: 'Logs' },
    { name: 'Reports', description: 'Relat√≥rios' }
  ]
};`;

  fs.writeFileSync(swaggerDefPath, correctSwaggerDef);
  console.log('   ‚úÖ swaggerDef.js corrigido');
  console.log('');
  
  console.log('üìã ENDPOINTS QUE DEVEM FUNCIONAR:');
  console.log('   ‚úÖ GET /api/webhooks/status (sem auth)');
  console.log('   ‚úÖ GET /api/integrations (com auth)');
  console.log('   ‚úÖ GET /api/external-apis/tokens (com auth)');
  console.log('   ‚úÖ GET /api/logs (com auth)');
  console.log('   ‚úÖ GET /api/reports/dashboard (com auth)');
  console.log('');
  console.log('üîê Para endpoints com auth: fa√ßa login em /api/auth/login primeiro');
}

// Executar tudo
if (require.main === module) {
  fixAllRoutesClean();
}

module.exports = { fixAllRoutesClean };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\fix-api-tokens-table.js
================================================================================

// scripts/fix-api-tokens-table.js
require('dotenv').config();
const db = require('../src/database/connection');
const logger = require('../src/config/logger');

async function fixApiTokensTable() {
  try {
    logger.info('üîß Verificando e corrigindo tabela api_tokens...');

    // 1. Verificar estrutura atual da tabela
    const currentColumns = await db.query(`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'api_tokens' AND table_schema = 'public'
      ORDER BY ordinal_position
    `);

    logger.info(`üìã Colunas atuais: ${currentColumns.rows.map(r => r.column_name).join(', ')}`);

    const existingColumns = currentColumns.rows.map(row => row.column_name);
    const requiredColumns = ['active', 'expires_at', 'created_at', 'updated_at'];
    
    // 2. Adicionar colunas faltantes
    for (const column of requiredColumns) {
      if (!existingColumns.includes(column)) {
        let columnDefinition = '';
        
        switch (column) {
          case 'active':
            columnDefinition = 'BOOLEAN DEFAULT true';
            break;
          case 'expires_at':
            columnDefinition = 'TIMESTAMP';
            break;
          case 'created_at':
          case 'updated_at':
            columnDefinition = 'TIMESTAMP DEFAULT NOW()';
            break;
        }

        await db.query(`ALTER TABLE api_tokens ADD COLUMN ${column} ${columnDefinition}`);
        logger.info(`‚úÖ Coluna ${column} adicionada`);
      } else {
        logger.info(`‚ÑπÔ∏è  Coluna ${column} j√° existe`);
      }
    }

    // 3. Atualizar registros existentes que podem n√£o ter valores para as novas colunas
    await db.query(`
      UPDATE api_tokens 
      SET 
        active = COALESCE(active, true),
        created_at = COALESCE(created_at, NOW()),
        updated_at = COALESCE(updated_at, NOW())
      WHERE active IS NULL OR created_at IS NULL OR updated_at IS NULL
    `);

    logger.info('‚úÖ Tabela api_tokens corrigida com sucesso!');

    // 4. Mostrar estrutura final
    const finalColumns = await db.query(`
      SELECT column_name, data_type, column_default
      FROM information_schema.columns 
      WHERE table_name = 'api_tokens' AND table_schema = 'public'
      ORDER BY ordinal_position
    `);

    logger.info('üìã Estrutura final da tabela api_tokens:');
    finalColumns.rows.forEach(row => {
      logger.info(`   ‚Ä¢ ${row.column_name} (${row.data_type}) ${row.column_default ? '- default: ' + row.column_default : ''}`);
    });

  } catch (error) {
    logger.error('‚ùå Erro ao corrigir tabela api_tokens:', error);
    throw error;
  } finally {
    await db.disconnect();
  }
}

if (require.main === module) {
  fixApiTokensTable();
}

module.exports = { fixApiTokensTable };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\fix-job-manager-health.js
================================================================================

// scripts/fix-job-manager-health.js
// Patch tempor√°rio para adicionar m√©todo getHealthStatus ao JobManager

const fs = require('fs');
const path = require('path');

function fixJobManagerHealth() {
  const jobManagerPath = path.join(__dirname, '..', 'src', 'services', 'jobs', 'job-manager.service.js');
  
  if (!fs.existsSync(jobManagerPath)) {
    console.log('‚ùå Arquivo job-manager.service.js n√£o encontrado');
    return;
  }

  let content = fs.readFileSync(jobManagerPath, 'utf8');
  
  // Verificar se o m√©todo j√° existe
  if (content.includes('getHealthStatus')) {
    console.log('‚ÑπÔ∏è M√©todo getHealthStatus j√° existe');
    return;
  }

  // M√©todo para adicionar
  const healthStatusMethod = `
  // M√©todo para verificar sa√∫de dos jobs
  async getHealthStatus() {
    try {
      if (!this.isInitialized) {
        return { status: 'not_initialized' };
      }

      const status = {
        status: 'running',
        initialized: this.isInitialized,
        scheduler: this.scheduler ? 'active' : 'inactive',
        repositories: Object.keys(this.repositories || {}),
        timestamp: new Date().toISOString()
      };

      // Verificar se h√° jobs rodando
      if (this.scheduler && this.scheduler.getStatus) {
        status.jobs = await this.scheduler.getStatus();
      }

      return status;
    } catch (error) {
      return { 
        status: 'error', 
        message: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  // M√©todo para obter status geral
  async getStatus() {
    try {
      return await this.getHealthStatus();
    } catch (error) {
      return { status: 'error', message: error.message };
    }
  }

  // M√©todo para obter status das integra√ß√µes
  async getIntegrationsStatus() {
    try {
      if (!this.repositories || !this.repositories.monitoring) {
        return [];
      }

      // Buscar status das integra√ß√µes do banco
      const integrations = await this.repositories.monitoring.getIntegrationsStatus();
      return integrations || [];
    } catch (error) {
      console.error('Erro ao obter status das integra√ß√µes:', error);
      return [];
    }
  }`;

  // Encontrar o final da classe e adicionar os m√©todos antes
  const classEndIndex = content.lastIndexOf('}');
  if (classEndIndex === -1) {
    console.log('‚ùå N√£o foi poss√≠vel encontrar o final da classe');
    return;
  }

  // Inserir os m√©todos antes do fechamento da classe
  const newContent = 
    content.slice(0, classEndIndex) + 
    healthStatusMethod + 
    '\n' + 
    content.slice(classEndIndex);

  // Fazer backup do arquivo original
  fs.writeFileSync(jobManagerPath + '.backup', content);
  
  // Escrever o novo conte√∫do
  fs.writeFileSync(jobManagerPath, newContent);
  
  console.log('‚úÖ M√©todos getHealthStatus, getStatus e getIntegrationsStatus adicionados');
  console.log('üìÅ Backup criado: job-manager.service.js.backup');
}

if (require.main === module) {
  fixJobManagerHealth();
}

module.exports = { fixJobManagerHealth };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\fix-swagger-duplicate-api.js
================================================================================

// scripts/fix-swagger-duplicate-api.js
const fs = require('fs');
const path = require('path');

function fixSwaggerDuplicateAPI() {
  console.log('üîß Corrigindo duplica√ß√£o /api/api/ no Swagger...');

  const swaggerDefPath = path.join(__dirname, '..', 'swaggerDef.js');
  
  if (!fs.existsSync(swaggerDefPath)) {
    console.log('‚ùå Arquivo swaggerDef.js n√£o encontrado. Criando...');
    createCorrectSwaggerDef();
    return;
  }

  // Ler arquivo atual
  let content = fs.readFileSync(swaggerDefPath, 'utf8');
  console.log('üìÑ Conte√∫do atual do swaggerDef.js:');
  console.log(content.substring(0, 300) + '...');

  // Fazer backup
  fs.writeFileSync(swaggerDefPath + '.backup', content);

  // Criar vers√£o corrigida
  createCorrectSwaggerDef();
  
  console.log('‚úÖ swaggerDef.js corrigido!');
}

function createCorrectSwaggerDef() {
  const swaggerDefPath = path.join(__dirname, '..', 'swaggerDef.js');
  
  // Configura√ß√£o CORRETA sem duplica√ß√£o
  const correctSwaggerDef = `// swaggerDef.js - Configura√ß√£o CORRETA
module.exports = {
  openapi: '3.0.0',
  info: {
    title: 'Road-RW API',
    version: '1.0.0',
    description: 'Sistema de Gest√£o Log√≠stica - Backend API',
    contact: {
      name: 'Road-RW Team',
      email: 'suporte@road-rw.com'
    }
  },
  // IMPORTANTE: N√ÉO incluir /api na URL do servidor
  servers: [
    {
      url: 'http://localhost:3001',
      description: 'Servidor de Desenvolvimento'
    },
    {
      url: 'http://localhost:3000',
      description: 'Servidor Alternativo'
    }
  ],
  components: {
    securitySchemes: {
      bearerAuth: {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        description: 'JWT token obtido atrav√©s do endpoint /api/auth/login'
      }
    },
    responses: {
      UnauthorizedError: {
        description: 'Token de acesso n√£o fornecido ou inv√°lido',
        content: {
          'application/json': {
            schema: {
              type: 'object',
              properties: {
                success: { type: 'boolean', example: false },
                message: { type: 'string', example: 'Token inv√°lido' }
              }
            }
          }
        }
      },
      NotFound: {
        description: 'Recurso n√£o encontrado',
        content: {
          'application/json': {
            schema: {
              type: 'object',
              properties: {
                success: { type: 'boolean', example: false },
                message: { type: 'string', example: 'Recurso n√£o encontrado' }
              }
            }
          }
        }
      }
    }
  },
  // N√£o definir security global - deixar cada rota definir individualmente
  tags: [
    { name: 'Auth', description: 'Autentica√ß√£o e autoriza√ß√£o' },
    { name: 'Transportadoras', description: 'Gerenciamento de transportadoras' },
    { name: 'Clientes', description: 'Gerenciamento de clientes' },
    { name: 'Notas Fiscais', description: 'Gerenciamento de notas fiscais' },
    { name: 'Jobs', description: 'Gerenciamento de jobs de integra√ß√£o' },
    { name: 'Monitoring', description: 'Monitoramento do sistema' },
    { name: 'Integrations', description: 'Opera√ß√µes de integra√ß√£o com transportadoras' },
    { name: 'External APIs', description: 'Configura√ß√£o de APIs externas' },
    { name: 'Webhooks', description: 'Endpoints para receber dados externos' },
    { name: 'Logs', description: 'Visualiza√ß√£o de logs do sistema' }
  ]
};`;

  fs.writeFileSync(swaggerDefPath, correctSwaggerDef);
  console.log('‚úÖ Arquivo swaggerDef.js criado/atualizado corretamente');
}

function checkServerJsSwaggerConfig() {
  console.log('üîç Verificando configura√ß√£o do Swagger no server.js...');
  
  const serverPath = path.join(__dirname, '..', 'server.js');
  
  if (!fs.existsSync(serverPath)) {
    console.log('‚ùå server.js n√£o encontrado');
    return;
  }

  const content = fs.readFileSync(serverPath, 'utf8');
  
  // Verificar se h√° configura√ß√µes problem√°ticas
  const problems = [];
  
  if (content.includes('basePath')) {
    problems.push('basePath encontrado no server.js (deve estar no swaggerDef.js)');
  }
  
  if (content.match(/servers.*\/api/)) {
    problems.push('URL do servidor inclui /api (remove /api da URL)');
  }
  
  if (problems.length > 0) {
    console.log('‚ö†Ô∏è  Problemas encontrados no server.js:');
    problems.forEach(problem => console.log(`   ‚Ä¢ ${problem}`));
  } else {
    console.log('‚úÖ Configura√ß√£o do Swagger no server.js parece correta');
  }
}

function testSwaggerEndpoints() {
  console.log('\nüß™ URLs que devem funcionar ap√≥s a corre√ß√£o:');
  
  const endpoints = [
    'http://localhost:3001/api/auth/login',
    'http://localhost:3001/api/webhooks/status', 
    'http://localhost:3001/api/integrations',
    'http://localhost:3001/api/external-apis/tokens',
    'http://localhost:3001/health',
    'http://localhost:3001/api-docs'
  ];
  
  endpoints.forEach(endpoint => {
    console.log(`   ‚úÖ ${endpoint}`);
  });
  
  console.log('\n‚ùå URLs que N√ÉO devem mais aparecer:');
  console.log('   ‚ùå http://localhost:3001/api/api/auth/login');
  console.log('   ‚ùå http://localhost:3001/api/api/webhooks/status');
}

function main() {
  console.log('üöÄ CORRIGINDO DUPLICA√á√ÉO /api/api/ NO SWAGGER\n');
  
  fixSwaggerDuplicateAPI();
  checkServerJsSwaggerConfig();
  
  console.log('\nüìã PR√ìXIMOS PASSOS:');
  console.log('1. Reinicie o servidor: npm run dev');
  console.log('2. Acesse o Swagger: http://localhost:3001/api-docs');
  console.log('3. Verifique se as URLs est√£o corretas (sem /api/api/)');
  console.log('4. Teste um endpoint sem auth: GET /api/webhooks/status');
  
  testSwaggerEndpoints();
  
  console.log('\nüíæ BACKUP:');
  console.log('   ‚Ä¢ swaggerDef.js.backup (arquivo original salvo)');
}

if (require.main === module) {
  main();
}

module.exports = { fixSwaggerDuplicateAPI };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\fix-swagger-endpoints.js
================================================================================

// scripts/fix-swagger-endpoints.js
const { createMissingRoutes } = require('./create-missing-routes');
const { addRoutesToServer } = require('./add-routes-to-server');

async function fixSwaggerEndpoints() {
  console.log('üöÄ Corrigindo endpoints do Swagger...\n');

  try {
    // Passo 1: Criar arquivos de rotas
    console.log('1Ô∏è‚É£ Criando arquivos de rotas...');
    createMissingRoutes();

    // Passo 2: Adicionar rotas ao server.js
    console.log('\n2Ô∏è‚É£ Adicionando rotas ao server.js...');
    addRoutesToServer();

    console.log('\nüéâ CORRE√á√ÉO CONCLU√çDA!');
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. Reinicie o servidor: npm run dev');
    console.log('2. Acesse o Swagger: http://localhost:3001/api-docs');
    console.log('3. Teste os endpoints:');
    console.log('   ‚Ä¢ GET /api/integrations (requer auth)');
    console.log('   ‚Ä¢ GET /api/webhooks/status (sem auth)');
    console.log('   ‚Ä¢ GET /api/external-apis/tokens (requer auth)');
    console.log('   ‚Ä¢ GET /api/logs (requer auth)');
    
    console.log('\nüîë Para testar endpoints com autentica√ß√£o:');
    console.log('   ‚Ä¢ Primeiro fa√ßa login em /api/auth/login');
    console.log('   ‚Ä¢ Copie o token JWT');
    console.log('   ‚Ä¢ No Swagger, clique em "Authorize" e cole o token');
    
    console.log('\nüìÅ ARQUIVOS CRIADOS:');
    console.log('   ‚Ä¢ src/routes/integrations.routes.js');
    console.log('   ‚Ä¢ src/routes/external-apis.routes.js');
    console.log('   ‚Ä¢ src/routes/webhooks.routes.js');
    console.log('   ‚Ä¢ src/routes/logs.routes.js');
    
    console.log('\nüìÑ BACKUPS:');
    console.log('   ‚Ä¢ server.js.backup');

  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error.message);
    return false;
  }

  return true;
}

// Lista de endpoints que devem funcionar ap√≥s a corre√ß√£o
function listExpectedEndpoints() {
  console.log('\nüìã ENDPOINTS DISPON√çVEIS AP√ìS CORRE√á√ÉO:');
  
  const endpoints = [
    { method: 'GET', path: '/api/integrations', auth: 'üîê', description: 'Listar integra√ß√µes' },
    { method: 'POST', path: '/api/integrations/{transportadora}/test', auth: 'üîê', description: 'Testar integra√ß√£o' },
    { method: 'GET', path: '/api/integrations/{transportadora}/status', auth: 'üîê', description: 'Status da integra√ß√£o' },
    { method: 'GET', path: '/api/external-apis/tokens', auth: 'üîê', description: 'Listar tokens' },
    { method: 'GET', path: '/api/external-apis/settings', auth: 'üîê', description: 'Configura√ß√µes' },
    { method: 'POST', path: '/api/webhooks/jamef', auth: '‚ùå', description: 'Webhook JAMEF' },
    { method: 'POST', path: '/api/webhooks/braspress', auth: '‚ùå', description: 'Webhook Braspress' },
    { method: 'POST', path: '/api/webhooks/tnt', auth: '‚ùå', description: 'Webhook TNT' },
    { method: 'GET', path: '/api/webhooks/status', auth: '‚ùå', description: 'Status webhooks' },
    { method: 'GET', path: '/api/logs', auth: 'üîê', description: 'Listar logs' },
    { method: 'GET', path: '/api/logs/stats', auth: 'üîê', description: 'Estat√≠sticas logs' }
  ];
  
  endpoints.forEach(endpoint => {
    console.log(`   ${endpoint.auth} ${endpoint.method.padEnd(4)} ${endpoint.path.padEnd(40)} - ${endpoint.description}`);
  });
  
  console.log('\nüîê = Requer autentica√ß√£o JWT');
  console.log('‚ùå = Sem autentica√ß√£o');
}

if (require.main === module) {
  fixSwaggerEndpoints().then(success => {
    if (success) {
      listExpectedEndpoints();
    }
  });
}

module.exports = { fixSwaggerEndpoints };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\generate-external-docs.js
================================================================================

// ==========================================
// 5. SCRIPT DE GERA√á√ÉO DE DOCUMENTA√á√ÉO
// ==========================================
// backend/scripts/generate-external-docs.js

const path = require('path');
const fs = require('fs');
const logger = require('../src/config/logger');

async function generateDocs() {
  try {
    logger.info('Gerando documenta√ß√£o das APIs externas...');

    const docsDir = path.join(__dirname, '../docs');
    if (!fs.existsSync(docsDir)) {
      fs.mkdirSync(docsDir, { recursive: true });
    }

    // Gerar Postman Collection
    const postmanCollection = generatePostmanCollection();
    fs.writeFileSync(
      path.join(docsDir, 'external-apis.postman_collection.json'),
      JSON.stringify(postmanCollection, null, 2)
    );

    // Gerar OpenAPI/Swagger spec
    const swaggerSpec = generateSwaggerSpec();
    fs.writeFileSync(
      path.join(docsDir, 'external-apis-swagger.json'),
      JSON.stringify(swaggerSpec, null, 2)
    );

    // Gerar exemplos cURL
    const curlExamples = generateCurlExamples();
    fs.writeFileSync(
      path.join(docsDir, 'external-apis-curl-examples.md'),
      curlExamples
    );

    logger.info('‚úì Documenta√ß√£o gerada com sucesso em /docs/');

  } catch (error) {
    logger.error('Erro ao gerar documenta√ß√£o:', error);
    process.exit(1);
  }
}

function generatePostmanCollection() {
  return {
    info: {
      name: "Road-RW External APIs",
      description: "APIs externas para integra√ß√£o com transportadoras",
      version: "1.0.0"
    },
    variable: [
      { key: "base_url", value: "http://localhost:3001" },
      { key: "external_token", value: "SEU_TOKEN_AQUI" }
    ],
    auth: {
      type: "bearer",
      bearer: [{ key: "token", value: "{{external_token}}" }]
    },
    item: [
      {
        name: "Health Check",
        request: {
          method: "GET",
          url: "{{base_url}}/api/external/health"
        }
      },
      {
        name: "Enviar Notas Fiscais",
        request: {
          method: "POST",
          url: "{{base_url}}/api/external/notas-fiscais",
          body: {
            mode: "raw",
            raw: JSON.stringify({
              notfis: [{
                chave_nf: "12345678901234567890123456789012345678901234",
                nro: 123456,
                ser: 1,
                emi_nf: "2025-01-15T00:00:00.000Z",
                recebedor: [{
                  documento: "12345678000195",
                  nome: "Empresa Teste Ltda"
                }],
                remetente: [{
                  documento: "98765432000198",
                  nome: "Remetente Teste Ltda"
                }],
                transportadora: [{
                  cnpj: "11223344000156",
                  nome: "Transportadora Teste"
                }]
              }]
            }, null, 2),
            options: { raw: { language: "json" } }
          }
        }
      }
    ]
  };
}

function generateSwaggerSpec() {
  return {
    openapi: "3.0.0",
    info: {
      title: "Road-RW External APIs",
      version: "1.0.0",
      description: "APIs externas para integra√ß√£o com transportadoras"
    },
    servers: [
      { url: "http://localhost:3001/api/external", description: "Desenvolvimento" },
      { url: "https://api.roadrw.com/api/external", description: "Produ√ß√£o" }
    ],
    security: [
      { BearerAuth: [] }
    ],
    components: {
      securitySchemes: {
        BearerAuth: {
          type: "http",
          scheme: "bearer"
        }
      }
    },
    paths: {
      "/health": {
        get: {
          summary: "Health check",
          responses: {
            200: { description: "API funcionando" }
          }
        }
      },
      "/notas-fiscais": {
        post: {
          summary: "Enviar notas fiscais",
          security: [{ BearerAuth: [] }],
          requestBody: {
            required: true,
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    notfis: {
                      type: "array",
                      items: { $ref: "#/components/schemas/NotaFiscal" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  };
}

function generateCurlExamples() {
  return `# Road-RW External APIs - Exemplos cURL

## 1. Health Check
\`\`\`bash
curl -X GET http://localhost:3001/api/external/health
\`\`\`

## 2. Enviar Notas Fiscais
\`\`\`bash
curl -X POST http://localhost:3001/api/external/notas-fiscais \\
  -H "Authorization: Bearer SEU_TOKEN" \\
  -H "Content-Type: application/json" \\
  -d '{
    "notfis": [{
      "chave_nf": "12345678901234567890123456789012345678901234",
      "nro": 123456,
      "emi_nf": "2025-01-15T00:00:00.000Z",
      "recebedor": [{
        "documento": "12345678000195",
        "nome": "Empresa Teste Ltda"
      }],
      "remetente": [{
        "documento": "98765432000198", 
        "nome": "Remetente Teste Ltda"
      }],
      "transportadora": [{
        "cnpj": "11223344000156",
        "nome": "Transportadora Teste"
      }]
    }]
  }'
\`\`\`

## 3. Enviar Ocorr√™ncias
\`\`\`bash
curl -X POST http://localhost:3001/api/external/ocorrencias \\
  -H "Authorization: Bearer SEU_TOKEN" \\
  -H "Content-Type: application/json" \\
  -d '{
    "ocorrencias": [{
      "nro_nf": 123456,
      "codigo": "ENTREGUE",
      "descricao": "Mercadoria entregue",
      "data_evento": "2025-01-15T14:30:00Z"
    }]
  }'
\`\`\`

## 4. Consultar Status
\`\`\`bash
curl -X GET "http://localhost:3001/api/external/notas-fiscais/12345678901234567890123456789012345678901234/status" \\
  -H "Authorization: Bearer SEU_TOKEN"
\`\`\`
`;
}

// Executar se chamado diretamente
if (require.main === module) {
  generateDocs();
}

module.exports = { generateDocs };



================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\maintenance-external-apis.js
================================================================================


// ==========================================
// 1. SCRIPT DE MANUTEN√á√ÉO AUTOM√ÅTICA
// ==========================================
// backend/scripts/maintenance-external-apis.js

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

const Database = require('../src/database/connection');
const ExternalApiManagerService = require('../src/services/external/external-api-manager.service');
const logger = require('../src/config/logger');

class ExternalAPIMaintenance {
  constructor() {
    this.database = null;
    this.apiManager = null;
  }

  async initialize() {
    this.database = new Database();
    await this.database.connect();
    
    // Repositories b√°sicos necess√°rios
    const repositories = {
      apiTokens: new (require('../src/repositories/api-tokens.repository'))(this.database),
      externalLogs: new (require('../src/repositories/external-logs.repository'))(this.database)
    };

    this.apiManager = new ExternalApiManagerService(this.database, repositories);
  }

  async runMaintenance() {
    try {
      logger.info('=== INICIANDO MANUTEN√á√ÉO DAS APIS EXTERNAS ===');

      // 1. Limpar logs antigos
      await this.cleanOldLogs();

      // 2. Verificar tokens expirados
      await this.checkExpiredTokens();

      // 3. Otimizar √≠ndices do banco
      await this.optimizeIndexes();

      // 4. Gerar relat√≥rio de sa√∫de
      await this.generateHealthReport();

      // 5. Limpar cache se necess√°rio
      await this.cleanCache();

      logger.info('=== MANUTEN√á√ÉO CONCLU√çDA COM SUCESSO ===');

    } catch (error) {
      logger.error('Erro durante manuten√ß√£o:', error);
      throw error;
    }
  }

  async cleanOldLogs() {
    try {
      logger.info('Limpando logs antigos...');

      const retentionDays = process.env.EXTERNAL_API_LOG_RETENTION_DAYS || 30;
      
      const deleteQuery = `
        DELETE FROM external_logs 
        WHERE created_at < NOW() - INTERVAL '${retentionDays} days'
      `;

      const result = await this.database.query(deleteQuery);
      
      logger.info(`‚úì ${result.rowCount} logs antigos removidos (>${retentionDays} dias)`);

      // Vacuum da tabela para recuperar espa√ßo
      await this.database.query('VACUUM ANALYZE external_logs');
      
    } catch (error) {
      logger.error('Erro ao limpar logs antigos:', error);
    }
  }

  async checkExpiredTokens() {
    try {
      logger.info('Verificando tokens expirados...');

      const expiredQuery = `
        SELECT id, integracao, expires_at 
        FROM api_tokens 
        WHERE active = true 
          AND expires_at IS NOT NULL 
          AND expires_at < NOW()
      `;

      const expiredTokens = await this.database.query(expiredQuery);

      if (expiredTokens.rows.length > 0) {
        logger.warn(`Encontrados ${expiredTokens.rows.length} tokens expirados:`);
        
        for (const token of expiredTokens.rows) {
          logger.warn(`- ${token.integracao}: expirado em ${token.expires_at}`);
        }

        // Desativar tokens expirados
        const deactivateQuery = `
          UPDATE api_tokens 
          SET active = false 
          WHERE expires_at < NOW() AND active = true
        `;

        const deactivated = await this.database.query(deactivateQuery);
        logger.info(`‚úì ${deactivated.rowCount} tokens expirados desativados`);

        // Notificar sobre tokens que expiram em breve (pr√≥ximos 7 dias)
        const soonExpireQuery = `
          SELECT integracao, expires_at 
          FROM api_tokens 
          WHERE active = true 
            AND expires_at BETWEEN NOW() AND NOW() + INTERVAL '7 days'
        `;

        const soonExpire = await this.database.query(soonExpireQuery);
        
        if (soonExpire.rows.length > 0) {
          logger.warn('Tokens que expiram nos pr√≥ximos 7 dias:');
          soonExpire.rows.forEach(token => {
            logger.warn(`- ${token.integracao}: expira em ${token.expires_at}`);
          });
        }

      } else {
        logger.info('‚úì Nenhum token expirado encontrado');
      }

    } catch (error) {
      logger.error('Erro ao verificar tokens expirados:', error);
    }
  }

  async optimizeIndexes() {
    try {
      logger.info('Otimizando √≠ndices do banco...');

      const tables = [
        'external_logs',
        'api_tokens', 
        'notas_fiscais',
        'ocorrencias'
      ];

      for (const table of tables) {
        await this.database.query(`ANALYZE ${table}`);
      }

      logger.info('‚úì √çndices otimizados');

    } catch (error) {
      logger.error('Erro ao otimizar √≠ndices:', error);
    }
  }

  async generateHealthReport() {
    try {
      logger.info('Gerando relat√≥rio de sa√∫de...');

      // Estat√≠sticas dos √∫ltimos 7 dias
      const statsQuery = `
        SELECT 
          integracao,
          operacao,
          COUNT(*) as total_requests,
          COUNT(CASE WHEN resultado->>'error' IS NULL THEN 1 END) as successful,
          COUNT(CASE WHEN resultado->>'error' IS NOT NULL THEN 1 END) as failed,
          ROUND(AVG(request_size), 2) as avg_request_size
        FROM external_logs 
        WHERE created_at >= NOW() - INTERVAL '7 days'
        GROUP BY integracao, operacao
        ORDER BY total_requests DESC
      `;

      const stats = await this.database.query(statsQuery);
      
      logger.info('üìä Estat√≠sticas dos √∫ltimos 7 dias:');
      
      if (stats.rows.length === 0) {
        logger.info('Nenhuma atividade registrada nos √∫ltimos 7 dias');
      } else {
        stats.rows.forEach(stat => {
          const successRate = stat.total_requests > 0 ? 
            Math.round((stat.successful / stat.total_requests) * 100) : 0;
          
          logger.info(
            `${stat.integracao} (${stat.operacao}): ` +
            `${stat.total_requests} requests, ` +
            `${successRate}% sucesso, ` +
            `${stat.avg_request_size}KB m√©dio`
          );
        });
      }

      // Verificar integra√ß√µes sem atividade
      const inactiveQuery = `
        SELECT DISTINCT integracao 
        FROM api_tokens 
        WHERE active = true 
          AND integracao NOT IN (
            SELECT DISTINCT integracao 
            FROM external_logs 
            WHERE created_at >= NOW() - INTERVAL '7 days'
          )
      `;

      const inactive = await this.database.query(inactiveQuery);
      
      if (inactive.rows.length > 0) {
        logger.warn('‚ö†Ô∏è  Integra√ß√µes sem atividade nos √∫ltimos 7 dias:');
        inactive.rows.forEach(row => {
          logger.warn(`- ${row.integracao}`);
        });
      }

    } catch (error) {
      logger.error('Erro ao gerar relat√≥rio de sa√∫de:', error);
    }
  }

  async cleanCache() {
    try {
      logger.info('Limpando cache (se aplic√°vel)...');
      
      // Se houver sistema de cache Redis ou similar
      // implementar limpeza aqui
      
      logger.info('‚úì Cache limpo');

    } catch (error) {
      logger.error('Erro ao limpar cache:', error);
    }
  }

  async disconnect() {
    if (this.database) {
      await this.database.disconnect();
    }
  }
}

async function runMaintenance() {
  const maintenance = new ExternalAPIMaintenance();
  
  try {
    await maintenance.initialize();
    await maintenance.runMaintenance();
  } catch (error) {
    logger.error('Falha na manuten√ß√£o:', error);
    process.exit(1);
  } finally {
    await maintenance.disconnect();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runMaintenance();
}

module.exports = { ExternalAPIMaintenance, runMaintenance };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\manage-external-tokens.js
================================================================================

// ==========================================
// 5. SCRIPT DE GERENCIAMENTO DE TOKENS
// ==========================================
// backend/scripts/manage-external-tokens.js

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

const Database = require('../src/database/connection');
const ExternalAuthService = require('../src/services/external/external-auth.service');
const ApiTokensRepository = require('../src/repositories/api-tokens.repository');
const TransportadorasRepository = require('../src/repositories/transportadoras.repository');
const logger = require('../src/config/logger');

async function manageTokens() {
  const command = process.argv[2];
  const args = process.argv.slice(3);

  let database;
  
  try {
    database = new Database();
    await database.connect();

    const repositories = {
      apiTokens: new ApiTokensRepository(database),
      transportadoras: new TransportadorasRepository(database)
    };

    const authService = new ExternalAuthService(repositories);

    switch (command) {
      case 'create':
        await createToken(authService, args);
        break;
      case 'list':
        await listTokens(repositories.apiTokens);
        break;
      case 'revoke':
        await revokeToken(authService, args);
        break;
      case 'test':
        await testToken(authService, args);
        break;
      default:
        showHelp();
        break;
    }

  } catch (error) {
    logger.error('Erro no gerenciamento de tokens:', error);
    process.exit(1);
  } finally {
    if (database) {
      await database.disconnect();
    }
  }
}

async function createToken(authService, args) {
  const [integracao, diasExpiracao = '365'] = args;

  if (!integracao) {
    logger.error('Integra√ß√£o √© obrigat√≥ria: create <integracao> [dias_expiracao]');
    return;
  }

  try {
    const token = await authService.generateApiToken(integracao, parseInt(diasExpiracao));
    
    logger.info(`Token criado com sucesso para ${integracao}:`);
    logger.info(`ID: ${token.id}`);
    logger.info(`Token: ${token.token}`);
    logger.info(`Expira em: ${token.expires_at}`);
    logger.info('');
    logger.info('IMPORTANTE: Guarde este token em local seguro!');
    
  } catch (error) {
    logger.error('Erro ao criar token:', error.message);
  }
}

async function listTokens(apiTokensRepo) {
  try {
    const tokens = await apiTokensRepo.findActiveTokens();
    
    if (tokens.length === 0) {
      logger.info('Nenhum token ativo encontrado');
      return;
    }

    logger.info('=== TOKENS ATIVOS ===');
    tokens.forEach(token => {
      logger.info(`${token.integracao}:`);
      logger.info(`  ID: ${token.id}`);
      logger.info(`  Status: ${token.status}`);
      logger.info(`  Expira: ${token.expires_at || 'Nunca'}`);
      logger.info(`  √öltimo uso: ${token.last_used_at || 'Nunca'}`);
      logger.info('');
    });
    
  } catch (error) {
    logger.error('Erro ao listar tokens:', error.message);
  }
}

async function revokeToken(authService, args) {
  const [token] = args;

  if (!token) {
    logger.error('Token √© obrigat√≥rio: revoke <token>');
    return;
  }

  try {
    const revoked = await authService.revokeToken(token);
    
    if (revoked) {
      logger.info('Token revogado com sucesso');
    } else {
      logger.error('Token n√£o encontrado');
    }
    
  } catch (error) {
    logger.error('Erro ao revogar token:', error.message);
  }
}

async function testToken(authService, args) {
  const [token] = args;

  if (!token) {
    logger.error('Token √© obrigat√≥rio: test <token>');
    return;
  }

  try {
    const result = await authService.validateExternalToken(token);
    
    if (result.valid) {
      logger.info('Token v√°lido!');
      logger.info(`Integra√ß√£o: ${result.token.integracao}`);
      logger.info(`Transportadora: ${result.transportadora.nome}`);
      logger.info(`Expira: ${result.token.expires_at || 'Nunca'}`);
    } else {
      logger.error('Token inv√°lido:', result.error);
    }
    
  } catch (error) {
    logger.error('Erro ao testar token:', error.message);
  }
}

function showHelp() {
  console.log(`
üîë GERENCIAMENTO DE TOKENS - APIS EXTERNAS

Uso: npm run external:tokens <comando> [argumentos]

Comandos:
  create <integracao> [dias]  - Criar token para integra√ß√£o
  list                        - Listar tokens ativos
  revoke <token>             - Revogar token espec√≠fico
  test <token>               - Testar validade de token

Exemplos:
  npm run external:tokens create jamef 365
  npm run external:tokens list
  npm run external:tokens test EXEMPLO_TOKEN_JAMEF_123
  npm run external:tokens revoke EXEMPLO_TOKEN_JAMEF_123

Integra√ß√µes dispon√≠veis:
  - jamef
  - braspress
  - tnt
  - correios
`);
}

// Executar se chamado diretamente
if (require.main === module) {
  manageTokens();
}

module.exports = { manageTokens };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\setup-apis-complete.js
================================================================================

// scripts/setup-apis-complete.js
require('dotenv').config();
const { fixApiTokensTable } = require('./fix-api-tokens-table');
const { setupExternalAPIs } = require('./setup-external-apis');
const { verifySetup } = require('./verify-setup');

console.log('üöÄ Configura√ß√£o completa das APIs externas...\n');

async function setupAPIsComplete() {
  try {
    console.log('1Ô∏è‚É£ Fase 1: Corrigindo estrutura da tabela api_tokens...');
    await fixApiTokensTable();
    
    console.log('\n2Ô∏è‚É£ Fase 2: Configurando APIs externas...');
    await setupExternalAPIs();
    
    console.log('\n3Ô∏è‚É£ Fase 3: Verificando configura√ß√£o...');
    await verifySetup();
    
    console.log('\nüéâ CONFIGURA√á√ÉO COMPLETA!');
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. Configure os tokens no .env:');
    console.log('   JAMEF_API_TOKEN=seu_token_aqui');
    console.log('   BRASPRESS_API_TOKEN=seu_token_aqui');
    console.log('   TNT_API_TOKEN=seu_token_aqui');
    console.log('');
    console.log('2. Execute novamente para configurar os tokens:');
    console.log('   npm run setup:apis:complete');
    console.log('');
    console.log('3. Inicie o servidor:');
    console.log('   npm run dev');
    console.log('');
    console.log('4. Teste os endpoints:');
    console.log('   npm run test:endpoints');
    
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  setupAPIsComplete();
}

module.exports = { setupAPIsComplete };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\setup-cron-external.sh
================================================================================

// ==========================================
// 4. CRON JOBS AUTOM√ÅTICOS
// ==========================================
// backend/scripts/setup-cron-external.sh

#!/bin/bash
# Script para configurar cron jobs das APIs externas

# Obter diret√≥rio do projeto
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Criar cron jobs
cat << EOF > /tmp/roadrw-external-cron
# Road-RW External APIs - Manuten√ß√£o autom√°tica
# Executar manuten√ß√£o di√°ria √†s 2h
0 2 * * * cd $PROJECT_DIR && npm run maintenance:external

# Limpeza de logs semanalmente
0 3 * * 0 cd $PROJECT_DIR && node scripts/maintenance-external-apis.js

# Verifica√ß√£o de sa√∫de a cada 15 minutos
*/15 * * * * cd $PROJECT_DIR && curl -s http://localhost:3001/api/external/health | grep -q '"success":true' || echo "API Externa com problema" | mail -s "Road-RW Alert" admin@empresa.com

# Relat√≥rio de estat√≠sticas semanal
0 8 * * 1 cd $PROJECT_DIR && npm run external:stats 7 | mail -s "Road-RW Weekly Stats" admin@empresa.com
EOF

# Instalar cron jobs
crontab /tmp/roadrw-external-cron
rm /tmp/roadrw-external-cron

echo "Cron jobs das APIs externas configurados com sucesso!"
crontab -l | grep roadrw


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\setup-external-apis.js
================================================================================

// scripts/setup-external-apis.js
const fs = require('fs');
const path = require('path');
require('dotenv').config();

console.log('üöÄ Iniciando configura√ß√£o das APIs externas...');

// Importar depend√™ncias com tratamento de erro
let logger, db;

try {
  logger = require('../src/config/logger');
  db = require('../src/database/connection');
} catch (error) {
  console.error('‚ùå Erro ao importar depend√™ncias:', error.message);
  console.log('‚ÑπÔ∏è  Continuando com console.log...');
  logger = {
    info: console.log,
    warn: console.warn,
    error: console.error
  };
}

async function setupExternalAPIs() {
  try {
    logger.info('üöÄ Iniciando configura√ß√£o das APIs externas...');
    
    // Se db n√£o estiver dispon√≠vel, simular sucesso
    if (!db) {
      logger.warn('‚ö†Ô∏è  Conex√£o com banco n√£o dispon√≠vel. Criando arquivos de configura√ß√£o...');
      await createConfigFiles();
      return;
    }

    // Verificar conex√£o com banco
    const isConnected = await testDatabaseConnection();
    if (!isConnected) {
      logger.warn('‚ö†Ô∏è  Banco n√£o dispon√≠vel. Criando apenas arquivos de configura√ß√£o...');
      await createConfigFiles();
      return;
    }

    // 1. Criar tabelas necess√°rias se n√£o existirem
    await createTablesIfNotExists();
    
    // 2. Inserir configura√ß√µes padr√£o das transportadoras
    await insertDefaultTransportadoraConfigs();
    
    // 3. Inserir tokens de API se fornecidos
    await setupAPITokens();
    
    // 4. Configurar jobs de integra√ß√£o
    await setupIntegrationJobs();

    logger.info('‚úÖ Configura√ß√£o das APIs externas conclu√≠da com sucesso!');

  } catch (error) {
    logger.error('‚ùå Erro na configura√ß√£o das APIs externas:', error.message);
    logger.info('‚ÑπÔ∏è  Criando arquivos de configura√ß√£o b√°sicos...');
    await createConfigFiles();
  } finally {
    if (db && db.disconnect) {
      await db.disconnect();
    }
  }
}

async function testDatabaseConnection() {
  try {
    if (db && db.testConnection) {
      return await db.testConnection();
    }
    if (db && db.query) {
      await db.query('SELECT 1');
      return true;
    }
    return false;
  } catch (error) {
    logger.warn('‚ö†Ô∏è  Erro ao testar conex√£o com banco:', error.message);
    return false;
  }
}

async function createConfigFiles() {
  logger.info('üìÅ Criando arquivos de configura√ß√£o...');
  
  const configDir = path.join(__dirname, '..', 'config');
  
  // Criar diret√≥rio de config se n√£o existir
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
  }

  // Arquivo de configura√ß√£o das APIs
  const apiConfig = {
    integrations: {
      jamef: {
        enabled: true,
        base_url: 'https://api.jamef.com.br',
        timeout: 15000,
        retry_attempts: 3,
        rate_limit: { requests: 100, per: 'minute' }
      },
      braspress: {
        enabled: true,
        base_url: 'https://api.braspress.com.br',
        timeout: 45000,
        retry_attempts: 3,
        rate_limit: { requests: 500, per: 'hour' }
      },
      tnt: {
        enabled: true,
        base_url: 'https://api.tnt.com.br',
        timeout: 20000,
        retry_attempts: 3,
        rate_limit: { requests: 200, per: 'minute' }
      }
    },
    jobs: {
      enabled: true,
      poll_interval: 300,
      concurrent_jobs: 3
    }
  };

  const configPath = path.join(configDir, 'external-apis.json');
  fs.writeFileSync(configPath, JSON.stringify(apiConfig, null, 2));
  
  logger.info(`‚úÖ Arquivo de configura√ß√£o criado: ${configPath}`);
  
  // Criar arquivo .env.example se n√£o existir
  const envExamplePath = path.join(__dirname, '..', '.env.example');
  if (!fs.existsSync(envExamplePath)) {
    const envContent = `# APIs Externas - Tokens de Integra√ß√£o
JAMEF_API_TOKEN=seu_token_jamef_aqui
BRASPRESS_API_TOKEN=seu_token_braspress_aqui
TNT_API_TOKEN=seu_token_tnt_aqui

# Configura√ß√µes de Integra√ß√£o
INTEGRATION_POLL_INTERVAL=300
INTEGRATION_CONCURRENT_JOBS=3
INTEGRATION_ENABLED=true
`;
    fs.writeFileSync(envExamplePath, envContent);
    logger.info(`‚úÖ Arquivo .env.example criado`);
  }
}

async function createTablesIfNotExists() {
  logger.info('üìã Verificando tabelas necess√°rias...');

  try {
    // Verificar se as tabelas j√° existem antes de tentar criar
    const checkTable = async (tableName) => {
      const result = await db.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' AND table_name = $1
        )
      `, [tableName]);
      return result.rows[0].exists;
    };

    // Tabela de configura√ß√µes de API (s√≥ criar se n√£o existir)
    const apiTokensExists = await checkTable('api_tokens');
    if (!apiTokensExists) {
      const createAPITokensTable = `
        CREATE TABLE api_tokens (
          id SERIAL PRIMARY KEY,
          integracao VARCHAR(50) NOT NULL,
          token TEXT NOT NULL,
          active BOOLEAN DEFAULT true,
          expires_at TIMESTAMP,
          created_at TIMESTAMP DEFAULT NOW(),
          updated_at TIMESTAMP DEFAULT NOW()
        );
        
        CREATE INDEX idx_api_tokens_integracao 
        ON api_tokens(integracao, active);
      `;
      await db.query(createAPITokensTable);
      logger.info('‚úÖ Tabela api_tokens criada');
    } else {
      logger.info('‚ÑπÔ∏è  Tabela api_tokens j√° existe');
    }

    // Tabela de configura√ß√µes do sistema (s√≥ criar se n√£o existir)
    const settingsExists = await checkTable('settings');
    if (!settingsExists) {
      const createSettingsTable = `
        CREATE TABLE settings (
          id SERIAL PRIMARY KEY,
          slug VARCHAR(100) NOT NULL,
          env VARCHAR(20) DEFAULT 'production',
          settings JSONB NOT NULL,
          created_at TIMESTAMP DEFAULT NOW(),
          updated_at TIMESTAMP DEFAULT NOW(),
          UNIQUE(slug, env)
        );
        
        CREATE INDEX idx_settings_slug_env 
        ON settings(slug, env);
      `;
      await db.query(createSettingsTable);
      logger.info('‚úÖ Tabela settings criada');
    } else {
      logger.info('‚ÑπÔ∏è  Tabela settings j√° existe');
    }

    // Tabela de monitoramento de integra√ß√µes (s√≥ criar se n√£o existir)
    const monitoringExists = await checkTable('integration_monitoring');
    if (!monitoringExists) {
      const createMonitoringTable = `
        CREATE TABLE integration_monitoring (
          id SERIAL PRIMARY KEY,
          integration_name VARCHAR(50) NOT NULL,
          status VARCHAR(20) DEFAULT 'active',
          last_execution TIMESTAMP,
          success_count INTEGER DEFAULT 0,
          error_count INTEGER DEFAULT 0,
          last_error TEXT,
          created_at TIMESTAMP DEFAULT NOW(),
          updated_at TIMESTAMP DEFAULT NOW()
        );
        
        CREATE INDEX idx_monitoring_integration 
        ON integration_monitoring(integration_name, status);
      `;
      await db.query(createMonitoringTable);
      logger.info('‚úÖ Tabela integration_monitoring criada');
    } else {
      logger.info('‚ÑπÔ∏è  Tabela integration_monitoring j√° existe');
    }

    // Verificar se a tabela transportadoras existe
    const transportadorasExists = await checkTable('transportadoras');
    if (transportadorasExists) {
      logger.info('‚úÖ Tabela transportadoras existe');
      
      // Verificar se tem coluna para api_config
      const hasApiConfig = await db.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.columns 
          WHERE table_name = 'transportadoras' 
          AND column_name = 'api_config'
          AND table_schema = 'public'
        )
      `);
      
      if (!hasApiConfig.rows[0].exists) {
        logger.info('‚ö†Ô∏è  Coluna api_config n√£o existe na tabela transportadoras');
        logger.info('üí° As configura√ß√µes de API ser√£o salvas na tabela settings');
      }
    } else {
      logger.warn('‚ö†Ô∏è  Tabela transportadoras n√£o existe');
    }

  } catch (error) {
    logger.error('‚ùå Erro ao verificar/criar tabelas:', error.message);
    throw error;
  }
}

async function insertDefaultTransportadoraConfigs() {
  logger.info('üè¢ Configurando transportadoras padr√£o...');

  // Primeiro, verificar a estrutura da tabela transportadoras
  try {
    const tableStructure = await db.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'transportadoras' AND table_schema = 'public'
      ORDER BY ordinal_position
    `);
    
    const columns = tableStructure.rows.map(row => row.column_name);
    logger.info(`üìã Colunas da tabela transportadoras: ${columns.join(', ')}`);
    
    // Verificar se existe coluna para API config
    const hasApiConfig = columns.includes('api_config');
    const hasIntegracao = columns.includes('integracao_ocorrencia');
    
    const defaultConfigs = [
      {
        nome: 'JAMEF TRANSPORTES',
        cnpj: '00000000000000', // CNPJ fict√≠cio - voc√™ deve atualizar
        endereco: 'Endere√ßo JAMEF',
        municipio: 'S√£o Paulo',
        uf: 'SP',
        integracao: 'jamef',
        api_config: {
          base_url: 'https://api.jamef.com.br',
          timeout: 15000,
          retry_attempts: 3,
          rate_limit: { requests: 100, per: 'minute' }
        }
      },
      {
        nome: 'BRASPRESS TRANSPORTES',
        cnpj: '11111111111111',
        endereco: 'Endere√ßo Braspress',
        municipio: 'S√£o Paulo',
        uf: 'SP',
        integracao: 'braspress',
        api_config: {
          base_url: 'https://api.braspress.com.br',
          timeout: 45000,
          retry_attempts: 3,
          rate_limit: { requests: 500, per: 'hour' }
        }
      },
      {
        nome: 'TNT MERC√öRIO',
        cnpj: '22222222222222',
        endereco: 'Endere√ßo TNT',
        municipio: 'S√£o Paulo',
        uf: 'SP',
        integracao: 'tnt',
        api_config: {
          base_url: 'https://api.tnt.com.br',
          timeout: 20000,
          retry_attempts: 3,
          rate_limit: { requests: 200, per: 'minute' }
        }
      }
    ];

    for (const config of defaultConfigs) {
      try {
        // Verificar se j√° existe pelo nome (sem a coluna codigo)
        const existing = await db.query(
          'SELECT id FROM transportadoras WHERE nome ILIKE $1', 
          [`%${config.integracao}%`]
        );

        if (existing.rows.length === 0) {
          // Montar query baseada nas colunas dispon√≠veis
          let insertQuery = '';
          let values = [];
          
          if (hasApiConfig) {
            insertQuery = `
              INSERT INTO transportadoras (
                cnpj, nome, endereco, municipio, uf, 
                integracao_ocorrencia, api_config, created_at, updated_at
              ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
            `;
            values = [
              config.cnpj, config.nome, config.endereco, 
              config.municipio, config.uf, config.integracao,
              JSON.stringify(config.api_config)
            ];
          } else {
            insertQuery = `
              INSERT INTO transportadoras (
                cnpj, nome, endereco, municipio, uf, 
                integracao_ocorrencia, created_at, updated_at
              ) VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
            `;
            values = [
              config.cnpj, config.nome, config.endereco, 
              config.municipio, config.uf, config.integracao
            ];
          }

          await db.query(insertQuery, values);
          logger.info(`‚úÖ Transportadora ${config.nome} configurada`);
          
          // Salvar configura√ß√£o de API em tabela separada se n√£o h√° coluna api_config
          if (!hasApiConfig) {
            await saveApiConfigSeparately(config.integracao, config.api_config);
          }
          
        } else {
          logger.info(`‚ÑπÔ∏è  Transportadora ${config.nome} j√° existe`);
        }
      } catch (error) {
        logger.warn(`‚ö†Ô∏è  Erro ao configurar ${config.nome}: ${error.message}`);
      }
    }
  } catch (error) {
    logger.error('‚ùå Erro ao verificar estrutura da tabela:', error.message);
  }
}

async function saveApiConfigSeparately(integracao, apiConfig) {
  try {
    // Salvar na tabela settings como alternativa
    await db.query(`
      INSERT INTO settings (slug, env, settings, created_at, updated_at)
      VALUES ($1, 'production', $2, NOW(), NOW())
      ON CONFLICT (slug, env) 
      DO UPDATE SET 
        settings = $2,
        updated_at = NOW()
    `, [`transportadora_${integracao}_config`, JSON.stringify(apiConfig)]);
    
    logger.info(`üìù Configura√ß√£o API para ${integracao} salva em settings`);
  } catch (error) {
    logger.warn(`‚ö†Ô∏è  Erro ao salvar config API ${integracao}: ${error.message}`);
  }
}

async function setupAPITokens() {
  logger.info('üîë Configurando tokens de API...');

  // Primeiro, verificar a estrutura da tabela api_tokens
  try {
    const tableStructure = await db.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'api_tokens' AND table_schema = 'public'
      ORDER BY ordinal_position
    `);
    
    const columns = tableStructure.rows.map(row => row.column_name);
    logger.info(`üìã Colunas da tabela api_tokens: ${columns.join(', ')}`);
    
    // Verificar quais colunas existem
    const hasActive = columns.includes('active');
    const hasCreatedAt = columns.includes('created_at');
    const hasExpiresAt = columns.includes('expires_at');
    
    // Verificar vari√°veis de ambiente para tokens
    const tokens = {
      jamef: process.env.JAMEF_API_TOKEN,
      braspress: process.env.BRASPRESS_API_TOKEN,
      tnt: process.env.TNT_API_TOKEN
    };

    for (const [integracao, token] of Object.entries(tokens)) {
      if (token) {
        try {
          // Desativar tokens antigos (se a coluna active existir)
          if (hasActive) {
            await db.query(
              'UPDATE api_tokens SET active = false WHERE integracao = $1',
              [integracao]
            );
          } else {
            // Se n√£o h√° coluna active, deletar tokens antigos
            await db.query(
              'DELETE FROM api_tokens WHERE integracao = $1',
              [integracao]
            );
          }

          // Montar query de inser√ß√£o baseada nas colunas dispon√≠veis
          let insertQuery = '';
          let values = [integracao, token];
          
          if (hasActive && hasCreatedAt && hasExpiresAt) {
            // Tabela completa
            insertQuery = `
              INSERT INTO api_tokens (integracao, token, active, created_at)
              VALUES ($1, $2, true, NOW())
            `;
          } else if (hasActive && hasCreatedAt) {
            // Sem expires_at
            insertQuery = `
              INSERT INTO api_tokens (integracao, token, active, created_at)
              VALUES ($1, $2, true, NOW())
            `;
          } else if (hasCreatedAt) {
            // Apenas created_at
            insertQuery = `
              INSERT INTO api_tokens (integracao, token, created_at)
              VALUES ($1, $2, NOW())
            `;
          } else {
            // Tabela b√°sica (apenas id, integracao, token)
            insertQuery = `
              INSERT INTO api_tokens (integracao, token)
              VALUES ($1, $2)
            `;
          }

          await db.query(insertQuery, values);
          logger.info(`‚úÖ Token para ${integracao} configurado`);
          
        } catch (error) {
          logger.warn(`‚ö†Ô∏è  Erro ao configurar token ${integracao}: ${error.message}`);
        }
      } else {
        logger.warn(`‚ö†Ô∏è  Token para ${integracao} n√£o encontrado nas vari√°veis de ambiente`);
      }
    }
    
  } catch (error) {
    logger.error('‚ùå Erro ao verificar estrutura da tabela api_tokens:', error.message);
  }
}

async function setupIntegrationJobs() {
  logger.info('‚öôÔ∏è  Configurando jobs de integra√ß√£o...');

  const jobConfig = {
    enabled: true,
    poll_interval: parseInt(process.env.INTEGRATION_POLL_INTERVAL) || 300,
    concurrent_jobs: parseInt(process.env.INTEGRATION_CONCURRENT_JOBS) || 3,
    rate_limits: {
      jamef: { requests: 100, per: 'minute' },
      braspress: { requests: 500, per: 'hour' },
      tnt: { requests: 200, per: 'minute' }
    },
    timeouts: {
      default: 30000,
      jamef: 15000,
      braspress: 45000,
      tnt: 20000
    },
    retry: {
      attempts: 3,
      exponential: true,
      base_delay: 1000
    },
    circuit_breaker: {
      enabled: true,
      failure_threshold: 5,
      reset_timeout: 60000
    }
  };

  try {
    // Inserir/atualizar configura√ß√£o dos jobs
    await db.query(`
      INSERT INTO settings (slug, env, settings, created_at, updated_at)
      VALUES ('integration_config', 'production', $1, NOW(), NOW())
      ON CONFLICT (slug, env) 
      DO UPDATE SET 
        settings = $1,
        updated_at = NOW()
    `, [JSON.stringify(jobConfig)]);

    // Inicializar monitoramento para cada integra√ß√£o
    const integrations = ['jamef', 'braspress', 'tnt'];
    
    for (const integration of integrations) {
      await db.query(`
        INSERT INTO integration_monitoring (integration_name, status, created_at, updated_at)
        VALUES ($1, 'active', NOW(), NOW())
        ON CONFLICT DO NOTHING
      `, [integration]);
    }

    logger.info('‚úÖ Jobs de integra√ß√£o configurados');
  } catch (error) {
    logger.warn(`‚ö†Ô∏è  Erro ao configurar jobs: ${error.message}`);
  }
}

// Verificar se o script est√° sendo executado diretamente
if (require.main === module) {
  setupExternalAPIs();
}

module.exports = { setupExternalAPIs };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\scripts\verify-setup.js
================================================================================

// scripts/verify-setup.js
const fs = require('fs');
const path = require('path');
require('dotenv').config();

console.log('üîç Verificando configura√ß√£o das APIs externas...');

// Importar depend√™ncias com tratamento de erro
let logger, db;

try {
  logger = require('../src/config/logger');
  db = require('../src/database/connection');
} catch (error) {
  console.log('‚ÑπÔ∏è  Usando console.log para logs...');
  logger = {
    info: console.log,
    warn: console.warn,
    error: console.error
  };
}

async function verifySetup() {
  try {
    logger.info('üîç Verificando configura√ß√£o das APIs externas...');

    // 1. Verificar arquivos de configura√ß√£o
    await checkConfigFiles();

    // 2. Verificar vari√°veis de ambiente
    checkEnvironmentVariables();

    // 3. Verificar banco de dados (se dispon√≠vel)
    if (db) {
      await checkDatabase();
    } else {
      logger.warn('‚ö†Ô∏è  Verifica√ß√£o de banco n√£o dispon√≠vel');
    }

    logger.info('‚úÖ Verifica√ß√£o conclu√≠da!');

  } catch (error) {
    logger.error('‚ùå Erro na verifica√ß√£o:', error.message);
  } finally {
    if (db && db.disconnect) {
      try {
        await db.disconnect();
      } catch (error) {
        // Ignorar erro de desconex√£o
      }
    }
  }
}

async function checkConfigFiles() {
  logger.info('üìÅ Verificando arquivos de configura√ß√£o...');

  const files = [
    { path: '../src/config/env.js', name: 'Configura√ß√£o de ambiente' },
    { path: '../src/config/logger.js', name: 'Configura√ß√£o de logs' },
    { path: '../config/external-apis.json', name: 'Configura√ß√£o de APIs externas' },
    { path: '../.env.example', name: 'Exemplo de vari√°veis de ambiente' },
    { path: '../package.json', name: 'Package.json' }
  ];

  for (const file of files) {
    const fullPath = path.join(__dirname, file.path);
    if (fs.existsSync(fullPath)) {
      logger.info(`   ‚úÖ ${file.name}`);
    } else {
      logger.warn(`   ‚ö†Ô∏è  ${file.name} n√£o encontrado: ${fullPath}`);
    }
  }

  // Verificar se o diret√≥rio src existe
  const srcPath = path.join(__dirname, '..', 'src');
  if (fs.existsSync(srcPath)) {
    logger.info('   ‚úÖ Diret√≥rio src/ existe');
    
    // Verificar subdiret√≥rios importantes
    const subDirs = ['config', 'database', 'services', 'routes', 'controllers'];
    for (const dir of subDirs) {
      const dirPath = path.join(srcPath, dir);
      if (fs.existsSync(dirPath)) {
        logger.info(`   ‚úÖ Diret√≥rio src/${dir}/ existe`);
      } else {
        logger.warn(`   ‚ö†Ô∏è  Diret√≥rio src/${dir}/ n√£o encontrado`);
      }
    }
  } else {
    logger.error('   ‚ùå Diret√≥rio src/ n√£o encontrado');
  }
}

function checkEnvironmentVariables() {
  logger.info('üåç Verificando vari√°veis de ambiente...');

  const requiredEnvVars = [
    'NODE_ENV',
    'PORT',
    'DB_HOST',
    'DB_NAME', 
    'DB_USER',
    'DB_PASSWORD',
    'JWT_SECRET'
  ];

  const optionalEnvVars = [
    'JAMEF_API_TOKEN',
    'BRASPRESS_API_TOKEN', 
    'TNT_API_TOKEN',
    'INTEGRATION_POLL_INTERVAL',
    'INTEGRATION_CONCURRENT_JOBS'
  ];
  
  let missingRequired = [];
  let foundOptional = [];

  // Verificar vari√°veis obrigat√≥rias
  requiredEnvVars.forEach(env => {
    if (process.env[env]) {
      logger.info(`   ‚úÖ ${env} definida`);
    } else {
      logger.error(`   ‚ùå ${env} n√£o definida (obrigat√≥ria)`);
      missingRequired.push(env);
    }
  });

  // Verificar vari√°veis opcionais
  optionalEnvVars.forEach(env => {
    if (process.env[env]) {
      logger.info(`   ‚úÖ ${env} definida`);
      foundOptional.push(env);
    } else {
      logger.warn(`   ‚ö†Ô∏è  ${env} n√£o definida (opcional)`);
    }
  });

  // Resumo
  if (missingRequired.length > 0) {
    logger.error(`‚ùå ${missingRequired.length} vari√°veis obrigat√≥rias faltando: ${missingRequired.join(', ')}`);
    logger.info('üí° Crie um arquivo .env baseado no .env.example');
  } else {
    logger.info('‚úÖ Todas as vari√°veis obrigat√≥rias est√£o definidas');
  }

  if (foundOptional.length > 0) {
    logger.info(`‚úÖ ${foundOptional.length} tokens de API configurados`);
  } else {
    logger.warn('‚ö†Ô∏è  Nenhum token de API configurado. Configure os tokens para usar as integra√ß√µes.');
  }
}

async function checkDatabase() {
  try {
    logger.info('üóÑÔ∏è  Verificando banco de dados...');

    // Verificar conex√£o
    const isConnected = await testDatabaseConnection();
    if (!isConnected) {
      logger.error('‚ùå Falha na conex√£o com o banco de dados');
      return;
    }
    logger.info('‚úÖ Conex√£o com banco de dados OK');

    // Verificar tabelas
    const tables = [
      'users', 
      'transportadoras', 
      'notas_fiscais', 
      'clientes',
      'embarcadores',
      'motoristas',
      'romaneios',
      'api_tokens', 
      'settings', 
      'integration_monitoring'
    ];
    const existingTables = [];
    
    for (const table of tables) {
      try {
        const result = await db.query(`
          SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = $1
          )
        `, [table]);
        
        if (result.rows[0].exists) {
          logger.info(`   ‚úÖ Tabela ${table} existe`);
          existingTables.push(table);
        } else {
          logger.warn(`   ‚ö†Ô∏è  Tabela ${table} n√£o encontrada`);
        }
      } catch (error) {
        logger.warn(`   ‚ö†Ô∏è  Erro ao verificar tabela ${table}: ${error.message}`);
      }
    }

    // Verificar dados se as tabelas existem
    if (existingTables.includes('transportadoras')) {
      try {
        // Verificar estrutura da tabela transportadoras
        const structure = await db.query(`
          SELECT column_name 
          FROM information_schema.columns 
          WHERE table_name = 'transportadoras' AND table_schema = 'public'
          ORDER BY ordinal_position
        `);
        const columns = structure.rows.map(row => row.column_name);
        logger.info(`üìã Colunas da tabela transportadoras: ${columns.join(', ')}`);
        
        const transportadoras = await db.query('SELECT nome, integracao_ocorrencia FROM transportadoras');
        logger.info(`üìä ${transportadoras.rows.length} transportadoras configuradas:`);
        transportadoras.rows.forEach(t => {
          const integracao = t.integracao_ocorrencia || 'sem integra√ß√£o';
          logger.info(`   ‚Ä¢ ${t.nome} (${integracao})`);
        });
      } catch (error) {
        logger.warn(`   ‚ö†Ô∏è  Erro ao consultar transportadoras: ${error.message}`);
      }
    }

    if (existingTables.includes('api_tokens')) {
      try {
        const tokens = await db.query('SELECT integracao, active FROM api_tokens WHERE active = true');
        logger.info(`üîë ${tokens.rows.length} tokens ativos:`);
        tokens.rows.forEach(t => {
          logger.info(`   ‚Ä¢ ${t.integracao}`);
        });
      } catch (error) {
        logger.warn(`   ‚ö†Ô∏è  Erro ao consultar tokens: ${error.message}`);
      }
    }

    if (existingTables.includes('settings')) {
      try {
        const configs = await db.query('SELECT slug FROM settings');
        logger.info(`‚öôÔ∏è  ${configs.rows.length} configura√ß√µes:`);
        configs.rows.forEach(c => {
          logger.info(`   ‚Ä¢ ${c.slug}`);
        });
      } catch (error) {
        logger.warn(`   ‚ö†Ô∏è  Erro ao consultar configura√ß√µes: ${error.message}`);
      }
    }

    if (existingTables.includes('integration_monitoring')) {
      try {
        const monitoring = await db.query('SELECT integration_name, status FROM integration_monitoring');
        logger.info(`üìà ${monitoring.rows.length} integra√ß√µes monitoradas:`);
        monitoring.rows.forEach(m => {
          logger.info(`   ‚Ä¢ ${m.integration_name} (${m.status})`);
        });
      } catch (error) {
        logger.warn(`   ‚ö†Ô∏è  Erro ao consultar monitoramento: ${error.message}`);
      }
    }

  } catch (error) {
    logger.error('‚ùå Erro na verifica√ß√£o do banco:', error.message);
  }
}

async function testDatabaseConnection() {
  try {
    if (db && db.testConnection) {
      return await db.testConnection();
    }
    if (db && db.query) {
      await db.query('SELECT 1');
      return true;
    }
    return false;
  } catch (error) {
    return false;
  }
}

// Verificar se o script est√° sendo executado diretamente
if (require.main === module) {
  verifySetup();
}

module.exports = { verifySetup };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\server-external-integration.js
================================================================================

// ==========================================
// 3. INTEGRA√á√ÉO NO SERVER.JS PRINCIPAL
// ==========================================
// backend/server-external-integration.js

/**
 * Adicionar estas linhas no server.js principal ap√≥s a inicializa√ß√£o dos jobs
 */

const ExternalApiManagerService = require('./src/services/external/external-api-manager.service');
const { createExternalRateLimit } = require('./src/middlewares/external-rate-limit.middleware');

let externalApiManager;

async function initializeExternalAPIs() {
  try {
    logger.info('Inicializando APIs externas...');

    // Inicializar gerenciador de APIs externas
    externalApiManager = new ExternalApiManagerService(database, {
      clientes: new (require('./src/repositories/clientes.repository'))(database),
      embarcadores: new (require('./src/repositories/embarcadores.repository'))(database),
      transportadoras: new (require('./src/repositories/transportadoras.repository'))(database),
      notas: new (require('./src/repositories/notas.repository'))(database),
      ocorrencias: new (require('./src/repositories/ocorrencias.repository'))(database),
      codigoOcorrencias: new (require('./src/repositories/codigo-ocorrencias.repository'))(database),
      enderecoEntrega: new (require('./src/repositories/endereco-entrega.repository'))(database),
      transportadoraCodigoOcorrencia: new (require('./src/repositories/transportadora-codigo-ocorrencia.repository'))(database)
    });

    await externalApiManager.initialize();

    // Configurar rotas externas
    const externalRoutes = require('./src/routes/external.routes');
    const repositories = externalApiManager.getRepositories();
    
    // Rate limiting global para APIs externas
    app.use('/api/external', createExternalRateLimit());
    
    // Aplicar rotas externas
    app.use('/api/external', externalRoutes(repositories));

    logger.info('APIs externas inicializadas com sucesso');

  } catch (error) {
    logger.error('Erro ao inicializar APIs externas:', error);
    // N√£o parar o servidor, mas marcar como indispon√≠vel
  }
}

// Modificar a sequ√™ncia de inicializa√ß√£o no server.js
database.connect()
  .then(() => {
    logger.info('Conex√£o com banco estabelecida');
    return initializeJobs(); // Sistema de jobs existente
  })
  .then(() => {
    return initializeExternalAPIs(); // Novo sistema de APIs externas
  })
  .then(() => {
    // Iniciar servidor
    const PORT = process.env.PORT || 3001;
    app.listen(PORT, () => {
      logger.info(`Servidor rodando na porta ${PORT}`);
      logger.info('APIs externas dispon√≠veis em /api/external/*');
    });
  })
  .catch(error => {
    logger.error('Erro na inicializa√ß√£o:', error);
    process.exit(1);
  });

// Atualizar finaliza√ß√£o graceful
async function gracefulShutdown() {
  logger.info('Iniciando finaliza√ß√£o graceful...');
  
  if (jobManager) {
    await jobManager.shutdown();
  }
  
  if (externalApiManager) {
    // Limpar recursos se necess√°rio
    logger.info('APIs externas finalizadas');
  }
  
  if (database) {
    await database.disconnect();
  }
  
  process.exit(0);
}


================================================================================
ARQUIVO: C:\web\rw-nv\backend\server.js
================================================================================

// server.js
require('dotenv').config();

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');

const config = require('./src/config/env');
const logger = require('./src/config/logger');
const db = require('./src/database/connection');

// ==============================
// Rotas de dom√≠nio
// ==============================
const authRoutes = require('./src/routes/auth.routes');
const transportadorasRoutes = require('./src/routes/transportadoras.routes');
const clientesRoutes = require('./src/routes/clientes.routes');
const embarcadoresRoutes = require('./src/routes/embarcadores.routes');
const motoristasRoutes = require('./src/routes/motoristas.routes');
const notasFiscaisRoutes = require('./src/routes/notas-fiscais.routes');
const enderecoEntregaRoutes = require('./src/routes/endereco-entrega.routes');
const romaneiosRoutes = require('./src/routes/romaneios.routes');
const ocorrenciasRoutes = require('./src/routes/ocorrencias.routes');
const transportadoraCodigoRoutes = require('./src/routes/transportadora-codigo-ocorrencia.routes');
const codigoOcorrenciasRoutes = require('./src/routes/codigo-ocorrencias.routes');
const reportsRoutes = require('./src/routes/reports.routes');
// No in√≠cio do arquivo, junto com as outras importa√ß√µes de rotas:
const webhookRoutes = require('./src/routes/webhook.routes');
const notaFiscalOcorrenciasRoutes = require('./src/routes/nota-fiscal-ocorrencias.routes');

// ==============================
// Rotas de integra√ß√µes/monitoramento/logs
// ==============================
const integrationsRoutes = require('./src/routes/integrations.routes');
const externalApisRoutes = require('./src/routes/external-apis.routes');
const webhooksRoutes = require('./src/routes/webhooks.routes');
const logsRoutes = require('./src/routes/logs.routes');

// ==============================
// Jobs & Monitoring (f√°bricas)
// ==============================
const JobManagerService = require('./src/services/jobs/job-manager.service');
const createJobsRouter = require('./src/routes/jobs.routes');
const createMonitoringRouter = require('./src/routes/monitoring.routes');

// ==============================
// Swagger
// ==============================
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const swaggerDefinition = require('./swaggerDef');

const app = express();

// ----------------------------------------------------------------------------
// Swagger (gera spec a partir das anota√ß√µes JSDoc nas rotas)
// ----------------------------------------------------------------------------
const swaggerSpec = swaggerJsdoc({
  definition: swaggerDefinition,
  apis: [
    './src/routes/*.js',
    // opcional: './src/controllers/*.js'
  ],
});

const swaggerUiOptions = {
  customCss: `
    .swagger-ui .topbar { display: none; }
    .swagger-ui .info { margin: 20px 0; }
    .swagger-ui .scheme-container { background: #fafafa; border: 1px solid #d3d3d3; }
  `,
  customSiteTitle: 'Road-RW API Documentation',
  customfavIcon: '/favicon.ico',
  swaggerOptions: {
    persistAuthorization: true,
    displayOperationId: false,
    defaultModelsExpandDepth: 1,
    defaultModelExpandDepth: 1,
    docExpansion: 'none',
    filter: true,
    showExtensions: true,
    showCommonExtensions: true,
    tryItOutEnabled: true,
  },
};

// ==============================
// Middlewares de seguran√ßa e parsing
// ==============================
app.use(helmet({ contentSecurityPolicy: false }));

app.use(
  cors({
    origin: config?.cors?.origin ?? '*',
    credentials: config?.cors?.credentials ?? true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
    allowedHeaders: ['Content-Type', 'Authorization'],
  }),
);

app.use(compression());

// Rate limiting - inteligente baseado no ambiente
const globalLimiter = rateLimit({
  windowMs: config.rateLimit.windowMs,
  max: config.nodeEnv === 'development' ? 1000 : config.rateLimit.max,
  message: {
    success: false,
    message: config.nodeEnv === 'development' 
      ? 'Rate limit ativo (desenvolvimento)' 
      : 'Muitas tentativas. Tente novamente em alguns minutos.'
  },
  standardHeaders: true,
  legacyHeaders: false,
  skip: (req) => {
    // Pular rate limit em desenvolvimento para certas rotas
    if (config.nodeEnv === 'development') {
      const skipRoutes = ['/health', '/api-docs'];
      return skipRoutes.some(route => req.path.startsWith(route));
    }
    return false;
  }
});

// Rate limiting para auth - mais permissivo em desenvolvimento
const authLimiter = rateLimit({
  windowMs: config.rateLimit.windowMs,
  max: config.nodeEnv === 'development' ? 100 : config.rateLimit.authMax,
  message: {
    success: false,
    message: config.nodeEnv === 'development'
      ? 'Rate limit de auth ativo (desenvolvimento)'
      : 'Muitas tentativas de login. Tente novamente em alguns minutos.'
  }
});

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Log simples de requisi√ß√£o com dura√ß√£o
app.use((req, res, next) => {
  const start = Date.now();
  res.on('finish', () => {
    const duration = Date.now() - start;
    try {
      logger.info(`${req.method} ${req.originalUrl}`, {
        statusCode: res.statusCode,
        duration: `${duration}ms`,
        userAgent: req.get('User-Agent'),
        ip: req.ip,
      });
    } catch {
      // noop
    }
  });
  next();
});

// ==============================
// Swagger UI
// ==============================
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec, swaggerUiOptions));

// ==============================
// Jobs: inicializa√ß√£o (n√£o bloqueante)
// ==============================
let jobManager = null;
try {
  jobManager = new JobManagerService(db);
} catch (e) {
  logger?.warn?.('JobManager n√£o p√¥de ser criado agora. Endpoints de /api/jobs responder√£o como n√£o inicializados.');
}

// ==============================
// Health & System Status
// ==============================
app.get('/health', async (req, res) => {
  try {
    const dbHealth = await db.healthCheck();
    let jobsHealth = { status: 'unknown' };

    if (jobManager && jobManager.isInitialized) {
      try {
        jobsHealth = (await jobManager.getHealthStatus?.()) ?? { status: 'active' };
      } catch (err) {
        jobsHealth = { status: 'error', message: err.message };
      }
    }

    res.json({
      status: 'OK',
      timestamp: new Date().toISOString(),
      version: process.env.npm_package_version || '1.0.0',
      environment: config?.nodeEnv ?? process.env.NODE_ENV ?? 'development',
      database: dbHealth,
      jobs: jobsHealth,
    });
  } catch (error) {
    res.status(500).json({ status: 'ERROR', message: error.message });
  }
});

app.get('/api/system/status', async (req, res) => {
  try {
    const status = {
      system: {
        port: config?.port ?? process.env.PORT ?? 3001,
        environment: config?.nodeEnv ?? process.env.NODE_ENV ?? 'development',
        uptime: process.uptime(),
        timestamp: new Date().toISOString(),
      },
      database: await db.healthCheck(),
      jobs: { status: 'not_initialized' },
      integrations: [],
    };

    if (jobManager && jobManager.isInitialized) {
      try {
        if (typeof jobManager.getHealthStatus === 'function') {
          status.jobs = await jobManager.getHealthStatus();
        } else if (typeof jobManager.getStatus === 'function') {
          status.jobs = await jobManager.getStatus();
        } else {
          status.jobs = { status: 'active', initialized: jobManager.isInitialized };
        }

        if (typeof jobManager.getIntegrationsStatus === 'function') {
          status.integrations = await jobManager.getIntegrationsStatus();
        }
      } catch (error) {
        status.jobs = { status: 'error', message: error.message };
      }
    }

    res.json({ success: true, data: status });
  } catch (error) {
    logger?.error?.('Erro ao obter status do sistema:', error);
    res.status(500).json({ success: false, message: 'Erro ao obter status do sistema', error: error.message });
  }
});

// ==============================
// Rotas da API (ordem importa!)
// ==============================

// Auth com rate limit dedicado
app.use('/api/auth', authLimiter, authRoutes);

// Dom√≠nio
app.use('/api/transportadoras', transportadorasRoutes);
app.use('/api/clientes', clientesRoutes);
app.use('/api/embarcadores', embarcadoresRoutes);
app.use('/api/motoristas', motoristasRoutes);
app.use('/api/notas-fiscais', notasFiscaisRoutes);
app.use('/api/enderecos-entrega', enderecoEntregaRoutes);
app.use('/api/romaneios', romaneiosRoutes);
app.use('/api/ocorrencias', ocorrenciasRoutes);
app.use('/api/codigos-ocorrencia', codigoOcorrenciasRoutes);
app.use('/api/notas-fiscais', notaFiscalOcorrenciasRoutes);

// Prefixo CORRETO para os v√≠nculos de c√≥digos/transportadoras
app.use('/api/transportadora-codigo-ocorrencia', transportadoraCodigoRoutes);

// Integra√ß√µes / Webhooks / Logs / Reports
app.use('/api/integrations', integrationsRoutes);
app.use('/api/external-apis', externalApisRoutes);
app.use('/api/webhooks', webhooksRoutes);
app.use('/api/webhook', webhookRoutes);
app.use('/api/logs', logsRoutes);
app.use('/api/reports', reportsRoutes);

// Jobs & Monitoring (f√°bricas recebem o jobManager)
app.use('/api/jobs', createJobsRouter(jobManager));
app.use('/api/monitoring', createMonitoringRouter(jobManager));

// ==============================
// 404 ‚Äî manter por √öLTIMO
// ==============================
app.use((req, res) => {
  res.status(404).json({
    success: false,
    message: 'Endpoint n√£o encontrado',
    method: req.method,
    path: req.originalUrl,
  });
});

module.exports = app;

// ==============================
// BOOTSTRAP: inicia servidor quando chamado diretamente
// ==============================
if (require.main === module) {
  const PORT = Number(process.env.PORT) || Number(config?.port) || 3001;
  const HOST = process.env.HOST || '0.0.0.0';

  const server = app.listen(PORT, HOST, () => {
    try {
      logger.info(`HTTP server listening on http://${HOST}:${PORT}`);
    } catch {
      console.log(`HTTP server listening on http://${HOST}:${PORT}`);
    }
  });

  // Hardening: logs e shutdown limpo
  process.on('unhandledRejection', (err) => {
    try { logger.error('unhandledRejection', { message: err?.message, stack: err?.stack }); } catch {}
  });
  process.on('uncaughtException', (err) => {
    try { logger.error('uncaughtException', { message: err?.message, stack: err?.stack }); } catch {}
    // opcional: process.exit(1);
  });
  process.on('SIGINT', () => server.close(() => process.exit(0)));
  process.on('SIGTERM', () => server.close(() => process.exit(0)));
}



================================================================================
ARQUIVO: C:\web\rw-nv\backend\server.js.backup
================================================================================

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');

const config = require('./src/config/env');
const logger = require('./src/config/logger');
const db = require('./src/database/connection');

// ========================================
// IMPORTAR ROTAS EXISTENTES
// ========================================
const authRoutes = require('./src/routes/auth.routes');
const transportadorasRoutes = require('./src/routes/transportadoras.routes');
const clientesRoutes = require('./src/routes/clientes.routes');
const embarcadoresRoutes = require('./src/routes/embarcadores.routes');
const motoristasRoutes = require('./src/routes/motoristas.routes'); 
const notasFiscais = require('./src/routes/notas-fiscais.routes');
const enderecoEntregaRoutes = require('./src/routes/endereco-entrega.routes');
const romaneios = require('./src/routes/romaneios.routes');
const ocorrencias = require('./src/routes/ocorrencias.routes');
const transportadoraCodigo = require('./src/routes/transportadora-codigo-ocorrencia.routes');
const tabelaOcorrenciasRoutes = require('./src/routes/codigo-ocorrencias.routes');

// ========================================
// IMPORTAR ROTAS DAS APIs EXTERNAS (opcional - criar quando os arquivos existirem)
// ========================================
// Comentadas at√© voc√™ criar os arquivos
// const integrationsRoutes = require('./src/routes/integrations.routes');
// const externalApisRoutes = require('./src/routes/external-apis.routes');
// const webhooksRoutes = require('./src/routes/webhooks.routes');
// const logsRoutes = require('./src/routes/logs.routes');

const app = express();

// Variaveis do jobs e agendamento
const JobManagerService = require('./src/services/jobs/job-manager.service');
const { injectJobControllers, requireAdmin, jobsRateLimit } = require('./src/middlewares/jobs.middleware');

// Adicionar estas importa√ß√µes no in√≠cio do arquivo, ap√≥s as outras importa√ß√µes
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const swaggerDefinition = require('./swaggerDef');

// Configura√ß√£o do Swagger (adicionar ap√≥s a configura√ß√£o dos middlewares e antes das rotas)
const options = {
  definition: swaggerDefinition,
  apis: [
    './src/routes/*.js', // Caminho para os arquivos de rotas
    './src/controllers/*.js' // Opcional: incluir controllers se tiver documenta√ß√£o l√°
  ],
};

const swaggerSpec = swaggerJsdoc(options);

// Customiza√ß√£o da interface do Swagger UI
const swaggerUiOptions = {
  customCss: `
    .swagger-ui .topbar { display: none; }
    .swagger-ui .info { margin: 20px 0; }
    .swagger-ui .scheme-container { background: #fafafa; border: 1px solid #d3d3d3; }
  `,
  customSiteTitle: "Road-RW API Documentation",
  customfavIcon: "/favicon.ico",
  swaggerOptions: {
    persistAuthorization: true,
    displayOperationId: false,
    defaultModelsExpandDepth: 1,
    defaultModelExpandDepth: 1,
    docExpansion: 'none',
    filter: true,
    showExtensions: true,
    showCommonExtensions: true,
    tryItOutEnabled: true
  }
};

// Middlewares de seguran√ßa
app.use(helmet({
  contentSecurityPolicy: false // Desabilitar CSP para desenvolvimento
}));

// Configurar CORS
app.use(cors({
  origin: config.cors.origin,
  credentials: config.cors.credentials,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Compress√£o de resposta
app.use(compression());

// Rate limiting global
const globalLimiter = rateLimit({
  windowMs: config.rateLimit.windowMs,
  max: config.rateLimit.max,
  message: {
    success: false,
    message: 'Muitas requisi√ß√µes. Tente novamente em alguns minutos.'
  },
  standardHeaders: true,
  legacyHeaders: false
});

app.use(globalLimiter);

// Rate limiting espec√≠fico para auth
const authLimiter = rateLimit({
  windowMs: config.rateLimit.windowMs,
  max: config.rateLimit.authMax,
  message: {
    success: false,
    message: 'Muitas tentativas de login. Tente novamente em alguns minutos.'
  }
});

// Body parser
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Middleware de log de requisi√ß√µes
app.use((req, res, next) => {
  const start = Date.now();
  
  res.on('finish', () => {
    const duration = Date.now() - start;
    logger.info(`${req.method} ${req.originalUrl}`, {
      statusCode: res.statusCode,
      duration: `${duration}ms`,
      userAgent: req.get('User-Agent'),
      ip: req.ip
    });
  });
  
  next();
});

// ========================================
// HEALTH CHECK ESTENDIDO
// ========================================
app.get('/health', async (req, res) => {
  try {
    const dbHealth = await db.healthCheck();
    
    // Verificar sa√∫de dos jobs
    let jobsHealth = { status: 'unknown' };
    if (jobManager && jobManager.isInitialized) {
      try {
        jobsHealth = await jobManager.getHealthStatus();
      } catch (error) {
        jobsHealth = { status: 'error', message: error.message };
      }
    }
    
    res.json({
      status: 'OK',
      timestamp: new Date().toISOString(),
      version: process.env.npm_package_version || '1.0.0',
      environment: config.nodeEnv,
      uptime: process.uptime(),
      database: dbHealth,
      jobs: jobsHealth
    });
  } catch (error) {
    logger.error('Health check failed:', error);
    res.status(503).json({
      status: 'ERROR',
      timestamp: new Date().toISOString(),
      error: 'Service unavailable'
    });
  }
});

// ========================================
// STATUS GERAL DO SISTEMA
// ========================================
app.get('/api/system/status', async (req, res) => {
  try {
    const status = {
      database: await db.healthCheck(),
      jobs: jobManager ? await jobManager.getStatus() : { status: 'not_initialized' },
      integrations: jobManager ? await jobManager.getIntegrationsStatus() : []
    };
    
    res.json({
      success: true,
      data: status
    });
  } catch (error) {
    logger.error('Erro ao obter status do sistema:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao obter status do sistema'
    });
  }
});

// ========================================
// ROTAS DA API EXISTENTES
// ========================================
app.use('/api/auth', authLimiter, authRoutes);
app.use('/api/transportadoras', transportadorasRoutes);
app.use('/api/clientes', clientesRoutes);
app.use('/api/embarcadores', embarcadoresRoutes);
app.use('/api/motoristas', motoristasRoutes);
app.use('/api/notas-fiscais', notasFiscais);
app.use('/api/enderecos-entrega', enderecoEntregaRoutes);
app.use('/api/romaneios', romaneios);
app.use('/api/ocorrencias', ocorrencias);
app.use('/api/transportadoracodigo', transportadoraCodigo);
app.use('/api/tabelacodigosocorrencia', tabelaOcorrenciasRoutes);

// ========================================
// ROTAS DAS APIs EXTERNAS
// ========================================
// Descomente conforme voc√™ criar os arquivos de rotas






// ========================================
// SWAGGER DOCUMENTATION
// ========================================
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec, swaggerUiOptions));

// Endpoint para baixar a especifica√ß√£o JSON
app.get('/api-docs.json', (req, res) => {
  res.setHeader('Content-Type', 'application/json');
  res.send(swaggerSpec);
});

// Redirecionamento da raiz para a documenta√ß√£o (opcional)
app.get('/', (req, res) => {
  res.redirect('/api-docs');
});

// ========================================
// MIDDLEWARE DE ERRO
// ========================================

// Middleware para rotas n√£o encontradas
app.use('/api/*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'Endpoint n√£o encontrado',
    path: req.originalUrl
  });
});

// Middleware de tratamento de erros global
app.use((error, req, res, next) => {
  logger.error('Erro n√£o tratado:', {
    error: error.message,
    stack: error.stack,
    url: req.originalUrl,
    method: req.method,
    ip: req.ip
  });

  // Erro de valida√ß√£o do Joi
  if (error.isJoi) {
    return res.status(400).json({
      success: false,
      message: 'Dados inv√°lidos',
      errors: error.details.map(detail => ({
        field: detail.path.join('.'),
        message: detail.message
      }))
    });
  }

  // Erro de sintaxe JSON
  if (error instanceof SyntaxError && error.status === 400 && 'body' in error) {
    return res.status(400).json({
      success: false,
      message: 'JSON inv√°lido'
    });
  }

  // Erro padr√£o
  res.status(500).json({
    success: false,
    message: 'Erro interno do servidor',
    error: config.nodeEnv === 'development' ? error.message : 'Erro interno'
  });
});

// ========================================
// INICIALIZA√á√ÉO DOS JOBS
// ========================================
let jobManager;

async function initializeJobs() {
  try {
    jobManager = new JobManagerService(db);
    await jobManager.initialize();
    logger.info('Sistema de jobs inicializado com sucesso');
    
    // Configurar rotas dos jobs ap√≥s inicializa√ß√£o
    app.use('/api/jobs', require('./src/routes/jobs.routes')(jobManager));
    app.use('/api/monitoring', require('./src/routes/monitoring.routes')(jobManager));
    
  } catch (error) {
    logger.error('Erro ao inicializar sistema de jobs:', error);
    // N√£o parar o servidor, mas marcar como indispon√≠vel
  }
}

// ========================================
// INICIALIZA√á√ÉO DO SERVIDOR
// ========================================
const startServer = async () => {
  try {
    // Testar conex√£o com o banco
    const dbConnected = await db.testConnection();
    if (!dbConnected) {
      logger.error('Falha na conex√£o com o banco de dados');
      process.exit(1);
    }

    // Inicializar sistema de jobs
    await initializeJobs();

    // Iniciar servidor
    const server = app.listen(config.port, () => {
      logger.info(`üöÄ Servidor iniciado na porta ${config.port}`);
      logger.info(`üåç Ambiente: ${config.nodeEnv}`);
      logger.info(`üìä Health check: http://localhost:${config.port}/health`);
      logger.info(`‚öôÔ∏è  System status: http://localhost:${config.port}/api/system/status`);
      
      if (config.nodeEnv === 'development') {
        logger.info(`üìö API Docs: http://localhost:${config.port}/api-docs`);
        logger.info(`üîß Jobs: http://localhost:${config.port}/api/jobs/status`);
        logger.info(`üìà Monitoring: http://localhost:${config.port}/api/monitoring/dashboard`);
      }
    });

    // Graceful shutdown
    const gracefulShutdown = async (signal) => {
      logger.info(`Recebido sinal ${signal}. Iniciando shutdown graceful...`);
      
      server.close(async () => {
        logger.info('Servidor HTTP fechado');
        
        try {
          if (jobManager && jobManager.shutdown) {
            await jobManager.shutdown();
            logger.info('Jobs parados com sucesso');
          }
          
          if (db && db.close) {
            await db.close();
            logger.info('Conex√µes do banco fechadas');
          }
        } catch (error) {
          logger.error('Erro ao fechar conex√µes:', error);
        }
        
        logger.info('Shutdown conclu√≠do');
        process.exit(0);
      });

      // For√ßar sa√≠da ap√≥s 30 segundos
      setTimeout(() => {
        logger.error('For√ßando sa√≠da ap√≥s timeout');
        process.exit(1);
      }, 30000);
    };

    // Escutar sinais de sistema
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // Tratar erros n√£o capturados
    process.on('uncaughtException', (error) => {
      logger.error('Exce√ß√£o n√£o capturada:', error);
      gracefulShutdown('uncaughtException');
    });

    process.on('unhandledRejection', (reason, promise) => {
      logger.error('Promise rejeitada n√£o tratada:', { reason, promise });
      gracefulShutdown('unhandledRejection');
    });

  } catch (error) {
    logger.error('Erro ao iniciar servidor:', error);
    process.exit(1);
  }
};

// Iniciar servidor apenas se n√£o estiver sendo importado
if (require.main === module) {
  startServer();
}


// ========================================
// STATUS GERAL DO SISTEMA
// ========================================
app.get('/api/system/status', async (req, res) => {
  try {
    const status = {
      server: {
        status: 'running',
        port: config.port,
        environment: config.nodeEnv,
        uptime: process.uptime(),
        timestamp: new Date().toISOString()
      },
      database: await db.healthCheck(),
      jobs: { status: 'not_initialized' },
      integrations: []
    };

    // Verificar jobs se dispon√≠vel
    if (jobManager && jobManager.isInitialized) {
      try {
        if (jobManager.getHealthStatus) {
          status.jobs = await jobManager.getHealthStatus();
        } else if (jobManager.getStatus) {
          status.jobs = await jobManager.getStatus();
        } else {
          status.jobs = { 
            status: 'active', 
            initialized: jobManager.isInitialized 
          };
        }

        // Verificar integra√ß√µes se dispon√≠vel
        if (jobManager.getIntegrationsStatus) {
          status.integrations = await jobManager.getIntegrationsStatus();
        }
      } catch (error) {
        status.jobs = { status: 'error', message: error.message };
      }
    }
    
    res.json({
      success: true,
      data: status
    });
  } catch (error) {
    console.error('Erro ao obter status do sistema:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao obter status do sistema',
      error: error.message
    });
  }
});

module.exports = app;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\config\database.js
================================================================================

const { Pool } = require('pg');
const config = require('../config/env');
const logger = require('../config/logger');

// Pool de conex√µes PostgreSQL
const pool = new Pool({
  host: config.database.host,
  port: config.database.port,
  database: config.database.name,
  user: config.database.user,
  password: config.database.password,
  ssl: config.database.ssl ? { rejectUnauthorized: false } : false,
  min: config.database.poolMin,
  max: config.database.poolMax,
  connectionTimeoutMillis: config.database.connectionTimeout,
  idleTimeoutMillis: config.database.idleTimeout,
  query_timeout: 30000,
  statement_timeout: 30000,
  application_name: 'road-rw-api'
});

// Event listeners para monitoramento
pool.on('connect', (client) => {
  logger.info('Nova conex√£o estabelecida com PostgreSQL');
});

pool.on('acquire', (client) => {
  logger.debug('Cliente adquirido do pool');
});

pool.on('error', (err, client) => {
  logger.error('Erro inesperado no pool de conex√µes:', err);
});

pool.on('remove', (client) => {
  logger.debug('Cliente removido do pool');
});

// Fun√ß√£o para testar conex√£o
const testConnection = async () => {
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT NOW() as now, version() as version');
    logger.info('Conex√£o com PostgreSQL estabelecida:', {
      timestamp: result.rows[0].now,
      version: result.rows[0].version.split(' ')[0]
    });
    client.release();
    return true;
  } catch (error) {
    logger.error('Erro ao conectar com PostgreSQL:', error);
    return false;
  }
};

// Fun√ß√£o para executar queries com logs
const query = async (text, params) => {
  const start = Date.now();
  try {
    const result = await pool.query(text, params);
    const duration = Date.now() - start;
    
    if (config.nodeEnv === 'development') {
      logger.debug('Query executada:', {
        text,
        params,
        duration: `${duration}ms`,
        rows: result.rowCount
      });
    }
    
    return result;
  } catch (error) {
    const duration = Date.now() - start;
    logger.error('Erro na query:', {
      text,
      params,
      duration: `${duration}ms`,
      error: error.message
    });
    throw error;
  }
};

// Fun√ß√£o para transa√ß√µes
const transaction = async (callback) => {
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');
    const result = await callback(client);
    await client.query('COMMIT');
    return result;
  } catch (error) {
    await client.query('ROLLBACK');
    throw error;
  } finally {
    client.release();
  }
};

// Fun√ß√£o para health check
const healthCheck = async () => {
  try {
    const result = await query('SELECT 1 as healthy');
    return {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      database: 'PostgreSQL',
      pool: {
        total: pool.totalCount,
        idle: pool.idleCount,
        waiting: pool.waitingCount
      }
    };
  } catch (error) {
    return {
      status: 'unhealthy',
      timestamp: new Date().toISOString(),
      error: error.message
    };
  }
};

// Graceful shutdown
const close = async () => {
  try {
    await pool.end();
    logger.info('Pool de conex√µes PostgreSQL fechado');
  } catch (error) {
    logger.error('Erro ao fechar pool de conex√µes:', error);
  }
};

// Escutar eventos de processo para cleanup
process.on('SIGINT', close);
process.on('SIGTERM', close);

module.exports = {
  pool,
  query,
  transaction,
  testConnection,
  healthCheck,
  close
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\config\env.js
================================================================================

require('dotenv').config();

const config = {
  // Server
  port: process.env.PORT || 3001,
  nodeEnv: process.env.NODE_ENV || 'development',
  
  // Database
  database: {
    host: process.env.DB_HOST || 'base-road-cf-do-user-14245463-0.k.db.ondigitalocean.com',
    port: process.env.DB_PORT || 25060,
    name: process.env.DB_NAME || 'rroad-ultima-versao',
    user: process.env.DB_USER || 'doadmin',
    password: process.env.DB_PASSWORD || '',
    ssl: process.env.DB_SSL === 'true',
    poolMin: parseInt(process.env.DB_POOL_MIN) || 2,
    poolMax: parseInt(process.env.DB_POOL_MAX) || 20,
    connectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT) || 60000,
    idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT) || 30000
  },

  // JWT
  jwt: {
    secret: process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production',
    expiresIn: process.env.JWT_EXPIRES_IN || '7d',
    refreshExpiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '30d'
  },

  // Redis
  redis: {
    host: process.env.REDIS_HOST || 'localhost',
    port: process.env.REDIS_PORT || 6379,
    password: process.env.REDIS_PASSWORD || '',
    db: process.env.REDIS_DB || 0,
    ttl: parseInt(process.env.REDIS_TTL) || 3600 // 1 hora
  },

  // Security
  bcrypt: {
    saltRounds: parseInt(process.env.BCRYPT_SALT_ROUNDS) || 12
  },

  // Rate Limiting
  rateLimit: {
    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 1 * 1 * 1000, // 15 minutos
    max: parseInt(process.env.RATE_LIMIT_MAX) || 100,
    authMax: parseInt(process.env.RATE_LIMIT_AUTH_MAX) || 50 // Para endpoints de auth
  },

  // File Upload
  upload: {
    maxSize: parseInt(process.env.UPLOAD_MAX_SIZE) || 5 * 1024 * 1024, // 5MB
    allowedTypes: process.env.UPLOAD_ALLOWED_TYPES?.split(',') || ['image/jpeg', 'image/png', 'application/pdf'],
    destination: process.env.UPLOAD_DESTINATION || 'uploads/'
  },

  // Email
  email: {
    host: process.env.EMAIL_HOST || 'smtp.gmail.com',
    port: parseInt(process.env.EMAIL_PORT) || 587,
    secure: process.env.EMAIL_SECURE === 'true',
    user: process.env.EMAIL_USER || '',
    password: process.env.EMAIL_PASSWORD || '',
    from: process.env.EMAIL_FROM || 'noreply@roadrw.com'
  },

  // CORS
  cors: {
    origin: process.env.CORS_ORIGIN?.split(',') || ['http://localhost:3001', 'http://localhost:5173'],
    credentials: true
  },

  // Logs
  logs: {
    level: process.env.LOG_LEVEL || 'info',
    file: process.env.LOG_FILE || 'logs/app.log',
    maxSize: process.env.LOG_MAX_SIZE || '20m',
    maxFiles: process.env.LOG_MAX_FILES || '14d'
  },

  // Pagination
  pagination: {
    defaultLimit: parseInt(process.env.PAGINATION_DEFAULT_LIMIT) || 20,
    maxLimit: parseInt(process.env.PAGINATION_MAX_LIMIT) || 100
  },

  // API
  api: {
    prefix: process.env.API_PREFIX || '/api',
    version: process.env.API_VERSION || 'v1'
  }
};

// Valida√ß√£o das vari√°veis obrigat√≥rias
const requiredEnvVars = [
  'DB_HOST',
  'DB_NAME', 
  'DB_USER',
  'DB_PASSWORD',
  'JWT_SECRET'
];

const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);

if (missingEnvVars.length > 0) {
  console.error('‚ùå Vari√°veis de ambiente obrigat√≥rias n√£o encontradas:', missingEnvVars);
  console.error('üí° Crie um arquivo .env baseado no .env.example');
  console.error('üìÇ Arquivo deve estar em:', __dirname + '/../../.env');
  
  if (config.nodeEnv === 'production') {
    process.exit(1);
  } else {
    console.error('‚ö†Ô∏è  Continuando em modo desenvolvimento...');
  }
}

module.exports = config;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\config\jobs.config.js
================================================================================

// ==========================================
// 3. CONFIGURA√á√ïES DE PRODU√á√ÉO
// ==========================================
// backend/src/config/jobs.config.js

const config = {
  development: {
    enabled: true,
    poll_interval: 60, // 1 minuto para desenvolvimento
    rate_limits: {
      jamef: { requests: 10, per: 'minute' },
      braspress: { requests: 20, per: 'hour' }
    },
    timeouts: {
      default: 10000,
      jamef: 5000
    },
    retry: {
      attempts: 2,
      exponential: true
    },
    circuit_breaker: {
      enabled: false // Desabilitado em dev
    }
  },

  test: {
    enabled: false, // Desabilitado em testes
    poll_interval: 10,
    rate_limits: {},
    timeouts: { default: 1000 },
    retry: { attempts: 1 },
    circuit_breaker: { enabled: false }
  },

  production: {
    enabled: true,
    poll_interval: 300, // 5 minutos
    rate_limits: {
      jamef: { requests: 100, per: 'minute' },
      braspress: { requests: 500, per: 'hour' },
      tnt: { requests: 200, per: 'minute' }
    },
    timeouts: {
      default: 30000,
      jamef: 15000,
      braspress: 45000,
      tnt: 20000
    },
    retry: {
      attempts: 3,
      exponential: true,
      base_delay: 1000
    },
    circuit_breaker: {
      enabled: true,
      failure_threshold: 5,
      reset_timeout: 60000
    }
  }
};

const env = process.env.NODE_ENV || 'development';

module.exports = config[env];


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\config\logger.js
================================================================================

const winston = require('winston');
const path = require('path');

// Verificar se estamos em desenvolvimento
const isDevelopment = process.env.NODE_ENV === 'development';

// Definir formato personalizado
const customFormat = winston.format.combine(
  winston.format.timestamp({
    format: 'YYYY-MM-DD HH:mm:ss'
  }),
  winston.format.errors({ stack: true }),
  winston.format.json()
);

// Formato para console em desenvolvimento
const consoleFormat = winston.format.combine(
  winston.format.colorize(),
  winston.format.timestamp({
    format: 'YYYY-MM-DD HH:mm:ss'
  }),
  winston.format.printf(({ timestamp, level, message, ...meta }) => {
    let msg = `${timestamp} [${level}]: ${message}`;
    
    if (Object.keys(meta).length > 0) {
      msg += `\n${JSON.stringify(meta, null, 2)}`;
    }
    
    return msg;
  })
);

// Criar transports
const transports = [];

// Console transport (sempre ativo)
transports.push(
  new winston.transports.Console({
    level: isDevelopment ? 'debug' : 'info',
    format: isDevelopment ? consoleFormat : customFormat
  })
);

// File transport (apenas se logs estiver habilitado)
if (process.env.LOG_FILE) {
  const logDir = path.dirname(process.env.LOG_FILE);
  
  // Criar diret√≥rio se n√£o existir
  const fs = require('fs');
  if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
  }
  
  // Transport para logs gerais
  transports.push(
    new winston.transports.File({
      filename: process.env.LOG_FILE,
      level: process.env.LOG_LEVEL || 'info',
      format: customFormat,
      maxsize: 20 * 1024 * 1024, // 20MB
      maxFiles: 5,
      tailable: true
    })
  );

  // Transport separado para erros
  transports.push(
    new winston.transports.File({
      filename: path.join(logDir, 'error.log'),
      level: 'error',
      format: customFormat,
      maxsize: 20 * 1024 * 1024, // 20MB
      maxFiles: 5,
      tailable: true
    })
  );
}

// Criar logger
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: customFormat,
  defaultMeta: {
    service: 'road-rw-api',
    environment: process.env.NODE_ENV || 'development',
    pid: process.pid
  },
  transports,
  // N√£o sair em caso de erro
  exitOnError: false
});

// Adicionar m√©todo para logs de performance
logger.performance = (message, startTime, metadata = {}) => {
  const duration = Date.now() - startTime;
  logger.info(message, {
    ...metadata,
    duration: `${duration}ms`,
    type: 'performance'
  });
};

// Adicionar m√©todo para logs de auditoria
logger.audit = (action, userId, resource, metadata = {}) => {
  logger.info(`AUDIT: ${action}`, {
    userId,
    resource,
    ...metadata,
    type: 'audit',
    timestamp: new Date().toISOString()
  });
};

// Adicionar m√©todo para logs de seguran√ßa
logger.security = (event, details = {}) => {
  logger.warn(`SECURITY: ${event}`, {
    ...details,
    type: 'security',
    timestamp: new Date().toISOString()
  });
};

module.exports = logger;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\config\redis.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\auth.controller.js
================================================================================

const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const config = require('../config/env');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');
const UsersRepository = require('../repositories/users.repository');

class AuthController {
  constructor() {
    this.usersRepository = new UsersRepository();
  }

  // Login
  async login(req, res) {
    try {
      const { email, password } = req.body;

      // Buscar usu√°rio por email (incluindo password)
      const user = await this.usersRepository.findByEmail(email);
      
      if (!user) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Credenciais inv√°lidas'
        });
      }

      // Verificar senha
      const isPasswordValid = await bcrypt.compare(password, user.password);
      
      if (!isPasswordValid) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Credenciais inv√°lidas'
        });
      }

      // Gerar token JWT
      const token = this.generateToken(user);

      // Remover password do retorno
      const { password: _, ...userWithoutPassword } = user;

      // Log de auditoria
      logger.audit('login', user.id, 'user', {
        ip: req.ip,
        userAgent: req.get('User-Agent')
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Login realizado com sucesso',
        data: {
          token,
          user: userWithoutPassword,
          expiresIn: config.jwt.expiresIn
        }
      });
    } catch (error) {
      logger.error('Erro no login:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  // Registro
  async register(req, res) {
    try {
      const { name, email, password, password_confirmation } = req.body;

      // Verificar se as senhas coincidem
      if (password !== password_confirmation) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'As senhas n√£o coincidem'
        });
      }

      // Verificar se email j√° existe
      const existingUser = await this.usersRepository.findByEmail(email);
      if (existingUser) {
        return res.status(HTTP_STATUS.CONFLICT).json({
          success: false,
          message: 'Email j√° est√° em uso'
        });
      }

      // Criptografar senha
      const hashedPassword = await bcrypt.hash(password, config.bcrypt.saltRounds);

      // Criar usu√°rio
      const newUser = await this.usersRepository.create({
        name: name.trim(),
        email: email.toLowerCase().trim(),
        password: hashedPassword
      });

      // Gerar token JWT
      const token = this.generateToken(newUser);

      // Log de auditoria
      logger.audit('register', newUser.id, 'user', {
        ip: req.ip,
        userAgent: req.get('User-Agent')
      });

      return res.status(HTTP_STATUS.CREATED).json({
        success: true,
        message: 'Usu√°rio criado com sucesso',
        data: {
          token,
          user: newUser,
          expiresIn: config.jwt.expiresIn
        }
      });
    } catch (error) {
      logger.error('Erro no registro:', error);
      
      if (error.message.includes('Email j√° est√° em uso')) {
        return res.status(HTTP_STATUS.CONFLICT).json({
          success: false,
          message: error.message
        });
      }
      
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  // Refresh token
  async refresh(req, res) {
    try {
      const { token } = req.body;

      // Verificar token
      const decoded = jwt.verify(token, config.jwt.secret);
      
      // Buscar usu√°rio
      const user = await this.usersRepository.findById(decoded.id);
      
      if (!user) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado'
        });
      }

      // Gerar novo token
      const newToken = this.generateToken(user);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Token renovado com sucesso',
        data: {
          token: newToken,
          user,
          expiresIn: config.jwt.expiresIn
        }
      });
    } catch (error) {
      if (error.name === 'JsonWebTokenError' || error.name === 'TokenExpiredError') {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Token inv√°lido ou expirado'
        });
      }
      
      logger.error('Erro no refresh token:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  // Logout
  async logout(req, res) {
    try {
      // Log de auditoria
      if (req.user) {
        logger.audit('logout', req.user.id, 'user', {
          ip: req.ip,
          userAgent: req.get('User-Agent')
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Logout realizado com sucesso'
      });
    } catch (error) {
      logger.error('Erro no logout:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  // Obter perfil do usu√°rio logado
  async getProfile(req, res) {
    try {
      const user = await this.usersRepository.findById(req.user.id);
      
      if (!user) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Perfil recuperado com sucesso',
        data: user
      });
    } catch (error) {
      logger.error('Erro ao obter perfil:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  // Alterar senha
  async changePassword(req, res) {
    try {
      const { oldPassword, newPassword } = req.body;
      const userId = req.user.id;

      // Buscar usu√°rio com senha
      const user = await this.usersRepository.findByEmail(req.user.email);
      
      if (!user) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado'
        });
      }

      // Verificar senha atual
      const isPasswordValid = await bcrypt.compare(oldPassword, user.password);
      
      if (!isPasswordValid) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Senha atual incorreta'
        });
      }

      // Criptografar nova senha
      const hashedNewPassword = await bcrypt.hash(newPassword, config.bcrypt.saltRounds);

      // Atualizar senha
      await this.usersRepository.update(userId, {
        password: hashedNewPassword
      });

      // Log de auditoria
      logger.audit('change_password', userId, 'user', {
        ip: req.ip,
        userAgent: req.get('User-Agent')
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Senha alterada com sucesso'
      });
    } catch (error) {
      logger.error('Erro ao alterar senha:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  // Esqueci minha senha
  async forgotPassword(req, res) {
    try {
      const { email } = req.body;

      const user = await this.usersRepository.findByEmail(email);
      
      if (!user) {
        // Por seguran√ßa, sempre retornar sucesso mesmo se email n√£o existir
        return res.status(HTTP_STATUS.OK).json({
          success: true,
          message: 'Se o email existir, um link de recupera√ß√£o ser√° enviado'
        });
      }

      // Gerar token de recupera√ß√£o (v√°lido por 1 hora)
      const resetToken = jwt.sign(
        { id: user.id, purpose: 'password_reset' },
        config.jwt.secret,
        { expiresIn: '1h' }
      );

      // TODO: Implementar envio de email
      // await emailService.sendPasswordReset(user.email, resetToken);

      // Log de auditoria
      logger.audit('forgot_password', user.id, 'user', {
        ip: req.ip,
        userAgent: req.get('User-Agent')
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Se o email existir, um link de recupera√ß√£o ser√° enviado',
        // Apenas para desenvolvimento - remover em produ√ß√£o
        resetToken: config.nodeEnv === 'development' ? resetToken : undefined
      });
    } catch (error) {
      logger.error('Erro no esqueci senha:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  // Redefinir senha
  async resetPassword(req, res) {
    try {
      const { resetToken, newPassword } = req.body;

      // Verificar token de recupera√ß√£o
      const decoded = jwt.verify(resetToken, config.jwt.secret);
      
      if (decoded.purpose !== 'password_reset') {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Token inv√°lido'
        });
      }

      // Buscar usu√°rio
      const user = await this.usersRepository.findById(decoded.id);
      
      if (!user) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado'
        });
      }

      // Criptografar nova senha
      const hashedPassword = await bcrypt.hash(newPassword, config.bcrypt.saltRounds);

      // Atualizar senha
      await this.usersRepository.update(user.id, {
        password: hashedPassword
      });

      // Log de auditoria
      logger.audit('reset_password', user.id, 'user', {
        ip: req.ip,
        userAgent: req.get('User-Agent')
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Senha redefinida com sucesso'
      });
    } catch (error) {
      if (error.name === 'JsonWebTokenError' || error.name === 'TokenExpiredError') {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Token inv√°lido ou expirado'
        });
      }
      
      logger.error('Erro ao redefinir senha:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  // Verificar token
  async verifyToken(req, res) {
    try {
      // Se chegou at√© aqui, o token √© v√°lido (middleware de auth passou)
      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Token v√°lido',
        data: {
          user: req.user
        }
      });
    } catch (error) {
      logger.error('Erro na verifica√ß√£o de token:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  // Gerar token JWT
  generateToken(user) {
    return jwt.sign(
      { 
        id: user.id, 
        email: user.email, 
        name: user.name,
        role: user.role || 'user'   // ‚úÖ injeta a role do banco
        
      },
      config.jwt.secret,
      { expiresIn: config.jwt.expiresIn }
    );
  }
}

module.exports = AuthController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\base.controller.js
================================================================================

const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class BaseController {
  constructor(repository) {
    this.repository = repository;
  }

  async list(req, res) {
    try {
      const options = this.buildQueryOptions(req);
      const result = await this.repository.findAll(options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Registros recuperados com sucesso',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error(`Erro ao listar ${this.repository.tableName}:`, error);
      return this.handleError(res, error);
    }
  }

  async get(req, res) {
    try {
      const { id } = req.params;
      const record = await this.repository.findById(id);

      if (!record) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Registro n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Registro encontrado',
        data: record
      });
    } catch (error) {
      logger.error(`Erro ao buscar ${this.repository.tableName} por ID:`, error);
      return this.handleError(res, error);
    }
  }

  async create(req, res) {
    try {
      const data = this.sanitizeData(req.body);
      const record = await this.repository.create(data);

      return res.status(HTTP_STATUS.CREATED).json({
        success: true,
        message: 'Registro criado com sucesso',
        data: record
      });
    } catch (error) {
      logger.error(`Erro ao criar ${this.repository.tableName}:`, error);
      return this.handleError(res, error);
    }
  }

  async update(req, res) {
    try {
      const { id } = req.params;
      const data = this.sanitizeData(req.body);

      const existing = await this.repository.findById(id);
      if (!existing) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Registro n√£o encontrado'
        });
      }

      const record = await this.repository.update(id, data);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Registro atualizado com sucesso',
        data: record
      });
    } catch (error) {
      logger.error(`Erro ao atualizar ${this.repository.tableName}:`, error);
      return this.handleError(res, error);
    }
  }

  async delete(req, res) {
    try {
      const { id } = req.params;

      const existing = await this.repository.findById(id);
      if (!existing) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Registro n√£o encontrado'
        });
      }

      await this.repository.delete(id);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Registro deletado com sucesso'
      });
    } catch (error) {
      logger.error(`Erro ao deletar ${this.repository.tableName}:`, error);
      return this.handleError(res, error);
    }
  }

  async restore(req, res) {
    try {
      const { id } = req.params;

      const record = await this.repository.restore(id);
      if (!record) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Registro n√£o encontrado ou n√£o pode ser restaurado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Registro restaurado com sucesso',
        data: record
      });
    } catch (error) {
      logger.error(`Erro ao restaurar ${this.repository.tableName}:`, error);
      return this.handleError(res, error);
    }
  }

  buildQueryOptions(req) {
    const {
      page = 1,
      limit = 20,
      orderBy = 'created_at',
      orderDirection = 'desc',
      ...filters
    } = req.query;

    const excludeParams = ['page', 'limit', 'orderBy', 'orderDirection'];
    const cleanFilters = Object.keys(filters)
      .filter(key => !excludeParams.includes(key) && filters[key] !== '')
      .reduce((obj, key) => {
        obj[key] = filters[key];
        return obj;
      }, {});

    return {
      page: parseInt(page),
      limit: parseInt(limit),
      orderBy,
      orderDirection: orderDirection.toUpperCase(),
      filters: cleanFilters
    };
  }

  sanitizeData(data) {
    const excludeFields = ['id', 'created_at', 'updated_at', 'deleted_at'];
    
    return Object.keys(data)
      .filter(key => !excludeFields.includes(key))
      .reduce((obj, key) => {
        if (typeof data[key] === 'string') {
          obj[key] = data[key].trim();
        } else {
          obj[key] = data[key];
        }
        return obj;
      }, {});
  }

  handleError(res, error) {
    if (error.code === '23505') {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'Registro duplicado'
      });
    }

    return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
}

module.exports = BaseController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\clientes.controller.js
================================================================================

const BaseController = require('./base.controller');
const ClientesRepository = require('../repositories/clientes.repository');
const { validateCPF, validateCNPJ } = require('../utils/validators');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class ClientesController extends BaseController {
  constructor() {
    const repository = new ClientesRepository();
    super(repository);
  }

  // Sobrescrever list para incluir estat√≠sticas
  async list(req, res) {
    try {
      const options = this.buildQueryOptions(req);
      const result = await this.repository.findAll(options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Clientes recuperados com sucesso',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error('Erro ao listar clientes:', error);
      return this.handleError(res, error);
    }
  }

  // Sobrescrever get para incluir endere√ßos de entrega
  async get(req, res) {
    try {
      const { id } = req.params;
      const cliente = await this.repository.findWithEnderecos(id);

      if (!cliente) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Cliente n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Cliente encontrado',
        data: cliente
      });
    } catch (error) {
      logger.error('Erro ao buscar cliente por ID:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por documento (CPF/CNPJ)
  async getByDocumento(req, res) {
    try {
      const { documento } = req.params;

      // Validar documento
      const documentoLimpo = documento.replace(/\D/g, '');
      if (documentoLimpo.length === 11 && !validateCPF(documento)) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'CPF inv√°lido'
        });
      }
      if (documentoLimpo.length === 14 && !validateCNPJ(documento)) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'CNPJ inv√°lido'
        });
      }

      const cliente = await this.repository.findByDocumento(documentoLimpo);

      if (!cliente) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Cliente n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Cliente encontrado',
        data: cliente
      });
    } catch (error) {
      logger.error('Erro ao buscar cliente por documento:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por c√≥digo do cliente
  async getByCodCliente(req, res) {
    try {
      const { codCliente } = req.params;

      const cliente = await this.repository.findByCodCliente(parseInt(codCliente));

      if (!cliente) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Cliente n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Cliente encontrado',
        data: cliente
      });
    } catch (error) {
      logger.error('Erro ao buscar cliente por c√≥digo:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por nome (autocomplete)
  async search(req, res) {
    try {
      const { q: searchTerm, limit = 10 } = req.query;

      if (!searchTerm || searchTerm.length < 2) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Termo de busca deve ter pelo menos 2 caracteres'
        });
      }

      const clientes = await this.repository.searchByName(searchTerm, parseInt(limit));

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Busca realizada com sucesso',
        data: clientes
      });
    } catch (error) {
      logger.error('Erro ao buscar clientes por nome:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por cidade
  async getByCidade(req, res) {
    try {
      const { cidade } = req.params;

      const clientes = await this.repository.findByCidade(cidade);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Clientes encontrados',
        data: clientes
      });
    } catch (error) {
      logger.error('Erro ao buscar clientes por cidade:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por UF
  async getByUf(req, res) {
    try {
      const { uf } = req.params;

      if (!uf || uf.length !== 2) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'UF deve ter 2 caracteres'
        });
      }

      const clientes = await this.repository.findByUf(uf.toUpperCase());

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Clientes encontrados',
        data: clientes
      });
    } catch (error) {
      logger.error('Erro ao buscar clientes por UF:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar cliente com estat√≠sticas de notas fiscais
  async getWithStats(req, res) {
    try {
      const { id } = req.params;
      const cliente = await this.repository.findWithNotasStats(id);

      if (!cliente) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Cliente n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Cliente com estat√≠sticas recuperado',
        data: cliente
      });
    } catch (error) {
      logger.error('Erro ao buscar cliente com estat√≠sticas:', error);
      return this.handleError(res, error);
    }
  }
// === usado pelo beforeDelete no controller ===
async findWithNotasStats(id) {
  try {
    const andNotDeletedC = await this._andNotDeleted('c');
    const nfCfg = await this._resolveNotasSchema();

    // se n√£o houver tabela/liga√ß√£o de notas, retorna cliente + zeros
    if (!nfCfg) {
      const sql = `
        SELECT 
          c.*,
          0::bigint   AS total_notas,
          0::bigint   AS notas_finalizadas,
          0::bigint   AS notas_mes,
          0::numeric  AS valor_total,
          0::numeric  AS peso_total
        FROM ${this.tableName} c
        WHERE c.id = $1 ${andNotDeletedC}
        LIMIT 1
      `;
      const r = await this.executeQuery(sql, [id]);
      return r.rows[0] || null;
    }

    const { table, fk, columns, softClause } = nfCfg;

    // campos opcionais (s√≥ usa se existirem)
    const finalizadaExpr = columns.has('finalizada')
      ? `COUNT(CASE WHEN nf.finalizada = true THEN 1 END)`
      : `0::bigint`;
    const mesExpr = columns.has('created_at')
      ? `COUNT(CASE WHEN nf.created_at >= CURRENT_DATE - INTERVAL '30 days' THEN 1 END)`
      : `0::bigint`;
    const valorExpr = columns.has('valor')
      ? `COALESCE(SUM(nf.valor), 0)`
      : `0::numeric`;
    // tenta v√°rios nomes de peso
    const pesoCol = ['peso_calculo','peso_liquido','peso'].find(c => columns.has(c));
    const pesoExpr = pesoCol ? `COALESCE(SUM(nf."${pesoCol}"), 0)` : `0::numeric`;

    const sql = `
      SELECT 
        c.*,
        COUNT(nf.${fk}) AS total_notas,
        ${finalizadaExpr} AS notas_finalizadas,
        ${mesExpr} AS notas_mes,
        ${valorExpr} AS valor_total,
        ${pesoExpr} AS peso_total
      FROM ${this.tableName} c
      LEFT JOIN ${table} nf
        ON nf.${fk} = c.id
       AND ${softClause}
      WHERE c.id = $1 ${andNotDeletedC}
      GROUP BY c.id
    `;
    const r = await this.executeQuery(sql, [id]);
    return r.rows[0] || null;
  } catch (err) {
    logger.error('Erro ao obter stats de notas do cliente:', err);
    throw err;
  }
}
  // Estat√≠sticas gerais
  async getStats(req, res) {
    try {
      const stats = await this.repository.getStats();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Estat√≠sticas recuperadas com sucesso',
        data: stats
      });
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas de clientes:', error);
      return this.handleError(res, error);
    }
  }

  // Valida√ß√µes antes de criar
  async beforeCreate(data, req) {
    // Validar documento
    if (data.documento) {
      const documento = data.documento.replace(/\D/g, '');
      
      if (documento.length === 11 && !validateCPF(data.documento)) {
        throw new Error('CPF inv√°lido');
      }
      if (documento.length === 14 && !validateCNPJ(data.documento)) {
        throw new Error('CNPJ inv√°lido');
      }

      // Verificar se documento j√° existe
      const isUniqueDoc = await this.repository.validateUniqueDocumento(documento);
      if (!isUniqueDoc) {
        throw new Error('J√° existe um cliente com este documento');
      }

      data.documento = documento;
    }

    // Verificar se c√≥digo do cliente j√° existe
    if (data.cod_cliente) {
      const isUniqueCod = await this.repository.validateUniqueCodCliente(data.cod_cliente);
      if (!isUniqueCod) {
        throw new Error('J√° existe um cliente com este c√≥digo');
      }
    }

    // Normalizar dados
    data.nome = data.nome.trim().toUpperCase();
    if (data.uf) data.uf = data.uf.trim().toUpperCase();
    if (data.cidade) data.cidade = data.cidade.trim();
    if (data.bairro) data.bairro = data.bairro.trim();
    if (data.endereco) data.endereco = data.endereco.trim();
    if (data.cep) data.cep = data.cep.replace(/\D/g, '');
    if (data.contato) data.contato = data.contato.trim();

    return data;
  }

  // Valida√ß√µes antes de atualizar
  async beforeUpdate(id, data, req) {
    // Validar documento se fornecido
    if (data.documento) {
      const documento = data.documento.replace(/\D/g, '');
      
      if (documento.length === 11 && !validateCPF(data.documento)) {
        throw new Error('CPF inv√°lido');
      }
      if (documento.length === 14 && !validateCNPJ(data.documento)) {
        throw new Error('CNPJ inv√°lido');
      }

      // Verificar se documento j√° existe (excluindo o registro atual)
      const isUniqueDoc = await this.repository.validateUniqueDocumento(documento, id);
      if (!isUniqueDoc) {
        throw new Error('J√° existe um cliente com este documento');
      }

      data.documento = documento;
    }

    // Verificar c√≥digo do cliente se fornecido
    if (data.cod_cliente) {
      const isUniqueCod = await this.repository.validateUniqueCodCliente(data.cod_cliente, id);
      if (!isUniqueCod) {
        throw new Error('J√° existe um cliente com este c√≥digo');
      }
    }

    // Normalizar dados
    if (data.nome) data.nome = data.nome.trim().toUpperCase();
    if (data.uf) data.uf = data.uf.trim().toUpperCase();
    if (data.cidade) data.cidade = data.cidade.trim();
    if (data.bairro) data.bairro = data.bairro.trim();
    if (data.endereco) data.endereco = data.endereco.trim();
    if (data.cep) data.cep = data.cep.replace(/\D/g, '');
    if (data.contato) data.contato = data.contato.trim();

    return data;
  }

  // Valida√ß√µes antes de deletar
  async beforeDelete(id, req) {
    // Verificar se tem notas fiscais associadas
    const cliente = await this.repository.findWithNotasStats(id);
    
    if (cliente && parseInt(cliente.total_notas) > 0) {
      throw new Error('N√£o √© poss√≠vel deletar cliente com notas fiscais associadas');
    }

    return true;
  }

  // A√ß√µes ap√≥s criar
  async afterCreate(record, req) {
    logger.info('Novo cliente criado:', {
      id: record.id,
      nome: record.nome,
      documento: record.documento,
      user_id: req.user?.id
    });

    return record;
  }

  // A√ß√µes ap√≥s atualizar
  async afterUpdate(record, req) {
    logger.info('Cliente atualizado:', {
      id: record.id,
      nome: record.nome,
      user_id: req.user?.id
    });

    return record;
  }

  // M√©todo delete sobrescrito para usar hard delete (j√° que n√£o temos soft delete)
  async delete(req, res) {
    try {
      const { id } = req.params;

      const existing = await this.repository.findById(id);
      if (!existing) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Cliente n√£o encontrado'
        });
      }

      // Executar valida√ß√µes antes de deletar
      await this.beforeDelete(id, req);

      await this.repository.delete(id);

      // Executar a√ß√µes ap√≥s deletar
      await this.afterDelete(id, req);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Cliente deletado com sucesso'
      });
    } catch (error) {
      logger.error('Erro ao deletar cliente:', error);
      return this.handleError(res, error);
    }
  }

  // M√©todo restore n√£o dispon√≠vel (sem soft delete)
  async restore(req, res) {
    return res.status(HTTP_STATUS.NOT_FOUND).json({
      success: false,
      message: 'Funcionalidade de restaura√ß√£o n√£o dispon√≠vel'
    });
  }

  // Tratamento de erros espec√≠ficos
  handleError(res, error) {
    // Erros espec√≠ficos de neg√≥cio
    if (error.message.includes('inv√°lido')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: error.message
      });
    }

    if (error.message.includes('J√° existe um cliente')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: error.message
      });
    }

    if (error.message.includes('notas fiscais associadas')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'N√£o √© poss√≠vel deletar',
        error: 'Cliente possui notas fiscais associadas'
      });
    }

    // Usar tratamento padr√£o para outros erros
    return super.handleError(res, error);
  }
}

module.exports = ClientesController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\codigo-ocorrencias.controller.js
================================================================================

const BaseController = require('./base.controller');
const CodigoOcorrenciasRepository = require('../repositories/codigo-ocorrencias.repository');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class CodigoOcorrenciasController extends BaseController {
  constructor() {
    const repository = new CodigoOcorrenciasRepository();
    super(repository);
  }

  // Buscar por c√≥digo num√©rico
  async getByCodigo(req, res) {
    try {
      const { codigo } = req.params;

      const codigoOcorrencia = await this.repository.findByCodigo(parseInt(codigo));

      if (!codigoOcorrencia) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'C√≥digo de ocorr√™ncia n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'C√≥digo de ocorr√™ncia encontrado',
        data: codigoOcorrencia
      });
    } catch (error) {
      logger.error('Erro ao buscar c√≥digo de ocorr√™ncia por c√≥digo:', error);
      return this.handleError(res, error);
    }
  }

  // Listar tipos dispon√≠veis
  async getTipos(req, res) {
    try {
      const tipos = await this.repository.getTipos();
      
      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Tipos de ocorr√™ncia recuperados',
        data: tipos
      });
    } catch (error) {
      logger.error('Erro ao buscar tipos de ocorr√™ncia:', error);
      return this.handleError(res, error);
    }
  }

  // Listar processos dispon√≠veis
  async getProcessos(req, res) {
    try {
      const processos = await this.repository.getProcessos();
      
      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Processos recuperados',
        data: processos
      });
    } catch (error) {
      logger.error('Erro ao buscar processos:', error);
      return this.handleError(res, error);
    }
  }

  // Valida√ß√µes antes de criar
  async beforeCreate(data, req) {
    // Validar se c√≥digo j√° existe
    if (data.codigo) {
      const isUnique = await this.repository.validateUniqueCodigo(data.codigo);
      if (!isUnique) {
        throw new Error('J√° existe um c√≥digo de ocorr√™ncia com este n√∫mero');
      }
    }

    // Normalizar dados
    if (data.descricao) {
      data.descricao = data.descricao.trim();
    }

    if (data.tipo) {
      data.tipo = data.tipo.toLowerCase();
    }

    if (data.processo) {
      data.processo = data.processo.toLowerCase();
    }

    // Valores padr√£o
    data.finalizadora = data.finalizadora || false;
    data.api = data.api !== undefined ? data.api : true;

    return data;
  }

  // Valida√ß√µes antes de atualizar
  async beforeUpdate(id, data, req) {
    // Validar se c√≥digo j√° existe (se fornecida)
    if (data.codigo) {
      const isUnique = await this.repository.validateUniqueCodigo(data.codigo, id);
      if (!isUnique) {
        throw new Error('J√° existe um c√≥digo de ocorr√™ncia com este n√∫mero');
      }
    }

    // Normalizar dados
    if (data.descricao) {
      data.descricao = data.descricao.trim();
    }

    if (data.tipo) {
      data.tipo = data.tipo.toLowerCase();
    }

    if (data.processo) {
      data.processo = data.processo.toLowerCase();
    }

    return data;
  }

  // Valida√ß√µes antes de deletar
  async beforeDelete(id, req) {
    // Verificar se o c√≥digo est√° sendo usado em ocorr√™ncias
    const isUsed = await this.repository.isUsedInOcorrencias(id);
    
    if (isUsed) {
      throw new Error('C√≥digo de ocorr√™ncia est√° em uso e n√£o pode ser deletado');
    }

    return true;
  }

  // Tratamento de erros espec√≠ficos
  handleError(res, error) {
    if (error.message.includes('J√° existe um c√≥digo de ocorr√™ncia')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'C√≥digo duplicado',
        error: error.message
      });
    }

    if (error.message.includes('est√° em uso')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'Opera√ß√£o n√£o permitida',
        error: error.message
      });
    }

    return super.handleError(res, error);
  }
}

module.exports = CodigoOcorrenciasController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\embarcadores.controller.js
================================================================================

const BaseController = require('./base.controller');
const EmbarcadoresRepository = require('../repositories/embarcadores.repository');
const { validateCNPJ } = require('../utils/validators');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class EmbarcadoresController extends BaseController {
  constructor() {
    const repository = new EmbarcadoresRepository();
    super(repository);
  }

  // Sobrescrever list para incluir estat√≠sticas
  async list(req, res) {
    try {
      const options = this.buildQueryOptions(req);
      const result = await this.repository.findAllWithStats(options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Embarcadores recuperados com sucesso',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error('Erro ao listar embarcadores:', error);
      return this.handleError(res, error);
    }
  }

  // Sobrescrever get para incluir estat√≠sticas
  async get(req, res) {
    try {
      const { id } = req.params;
      const embarcador = await this.repository.findWithNotasStats(id);

      if (!embarcador) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Embarcador n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Embarcador encontrado',
        data: embarcador
      });
    } catch (error) {
      logger.error('Erro ao buscar embarcador por ID:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por documento (CNPJ)
  async getByDocumento(req, res) {
    try {
      const { documento } = req.params;

      if (!validateCNPJ(documento)) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'CNPJ inv√°lido'
        });
      }

      const embarcador = await this.repository.findByDocumento(documento.replace(/\D/g, ''));

      if (!embarcador) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Embarcador n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Embarcador encontrado',
        data: embarcador
      });
    } catch (error) {
      logger.error('Erro ao buscar embarcador por documento:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por nome (autocomplete)
  async search(req, res) {
    try {
      const { q: searchTerm, limit = 10 } = req.query;

      if (!searchTerm || searchTerm.length < 2) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Termo de busca deve ter pelo menos 2 caracteres'
        });
      }

      const embarcadores = await this.repository.searchByName(searchTerm, parseInt(limit));

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Busca realizada com sucesso',
        data: embarcadores
      });
    } catch (error) {
      logger.error('Erro ao buscar embarcadores por nome:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por cidade
  async getByCidade(req, res) {
    try {
      const { cidade } = req.params;

      const embarcadores = await this.repository.findByCidade(cidade);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Embarcadores encontrados',
        data: embarcadores
      });
    } catch (error) {
      logger.error('Erro ao buscar embarcadores por cidade:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por UF
  async getByUf(req, res) {
    try {
      const { uf } = req.params;

      if (!uf || uf.length !== 2) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'UF deve ter 2 caracteres'
        });
      }

      const embarcadores = await this.repository.findByUf(uf.toUpperCase());

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Embarcadores encontrados',
        data: embarcadores
      });
    } catch (error) {
      logger.error('Erro ao buscar embarcadores por UF:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar embarcadores com dep√≥sitos
  async getWithDepositos(req, res) {
    try {
      const { id } = req.params;
      const embarcador = await this.repository.findWithDepositos(id);

      if (!embarcador) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Embarcador n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Embarcador com dep√≥sitos recuperado',
        data: embarcador
      });
    } catch (error) {
      logger.error('Erro ao buscar embarcador com dep√≥sitos:', error);
      return this.handleError(res, error);
    }
  }

  // Estat√≠sticas gerais
  async getStats(req, res) {
    try {
      const stats = await this.repository.getStats();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Estat√≠sticas recuperadas com sucesso',
        data: stats
      });
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas de embarcadores:', error);
      return this.handleError(res, error);
    }
  }

  // Valida√ß√µes antes de criar
  async beforeCreate(data, req) {
    // Validar CNPJ
    if (!data.documento || !validateCNPJ(data.documento)) {
      throw new Error('CNPJ inv√°lido');
    }

    // Verificar se CNPJ j√° existe
    const isUnique = await this.repository.validateUniqueDocumento(data.documento.replace(/\D/g, ''));
    if (!isUnique) {
      throw new Error('J√° existe um embarcador com este CNPJ');
    }

    // Normalizar dados
    data.documento = data.documento.replace(/\D/g, ''); // Apenas n√∫meros
    data.nome = data.nome.trim().toUpperCase();
    if (data.uf) data.uf = data.uf.trim().toUpperCase();
    if (data.cidade) data.cidade = data.cidade.trim();
    if (data.bairro) data.bairro = data.bairro.trim();
    if (data.endereco) data.endereco = data.endereco.trim();
    if (data.cep) data.cep = data.cep.replace(/\D/g, '');
    if (data.inscricao_estadual) data.inscricao_estadual = data.inscricao_estadual.trim();
    if (data.cnpj) data.cnpj = data.cnpj.replace(/\D/g, '');

    return data;
  }

  // Valida√ß√µes antes de atualizar
  async beforeUpdate(id, data, req) {
    // Validar CNPJ se fornecido
    if (data.documento) {
      if (!validateCNPJ(data.documento)) {
        throw new Error('CNPJ inv√°lido');
      }

      // Verificar se CNPJ j√° existe (excluindo o registro atual)
      const isUnique = await this.repository.validateUniqueDocumento(data.documento.replace(/\D/g, ''), id);
      if (!isUnique) {
        throw new Error('J√° existe um embarcador com este CNPJ');
      }

      data.documento = data.documento.replace(/\D/g, ''); // Apenas n√∫meros
    }

    // Normalizar dados
    if (data.nome) data.nome = data.nome.trim().toUpperCase();
    if (data.uf) data.uf = data.uf.trim().toUpperCase();
    if (data.cidade) data.cidade = data.cidade.trim();
    if (data.bairro) data.bairro = data.bairro.trim();
    if (data.endereco) data.endereco = data.endereco.trim();
    if (data.cep) data.cep = data.cep.replace(/\D/g, '');
    if (data.inscricao_estadual) data.inscricao_estadual = data.inscricao_estadual.trim();
    if (data.cnpj) data.cnpj = data.cnpj.replace(/\D/g, '');

    return data;
  }

  // Valida√ß√µes antes de deletar
  async beforeDelete(id, req) {
    // Verificar se tem notas fiscais associadas
    const embarcador = await this.repository.findWithNotasStats(id);
    
    if (embarcador && parseInt(embarcador.total_notas) > 0) {
      throw new Error('N√£o √© poss√≠vel deletar embarcador com notas fiscais associadas');
    }

    return true;
  }

  // M√©todo delete sobrescrito para usar hard delete (j√° que n√£o temos soft delete)
  async delete(req, res) {
    try {
      const { id } = req.params;

      const existing = await this.repository.findById(id);
      if (!existing) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Embarcador n√£o encontrado'
        });
      }

      // Executar valida√ß√µes antes de deletar
      await this.beforeDelete(id, req);

      await this.repository.delete(id);

      // Executar a√ß√µes ap√≥s deletar
      await this.afterDelete(id, req);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Embarcador deletado com sucesso'
      });
    } catch (error) {
      logger.error('Erro ao deletar embarcador:', error);
      return this.handleError(res, error);
    }
  }

  // M√©todo restore n√£o dispon√≠vel (sem soft delete)
  async restore(req, res) {
    return res.status(HTTP_STATUS.NOT_FOUND).json({
      success: false,
      message: 'Funcionalidade de restaura√ß√£o n√£o dispon√≠vel'
    });
  }

  // A√ß√µes ap√≥s criar
  async afterCreate(record, req) {
    logger.info('Novo embarcador criado:', {
      id: record.id,
      nome: record.nome,
      documento: record.documento,
      user_id: req.user?.id
    });

    return record;
  }

  // A√ß√µes ap√≥s atualizar
  async afterUpdate(record, req) {
    logger.info('Embarcador atualizado:', {
      id: record.id,
      nome: record.nome,
      user_id: req.user?.id
    });

    return record;
  }

  // A√ß√µes ap√≥s deletar
  async afterDelete(id, req) {
    logger.info('Embarcador deletado:', {
      id,
      user_id: req.user?.id
    });

    return true;
  }

  // Tratamento de erros espec√≠ficos
  handleError(res, error) {
    // Erros espec√≠ficos de neg√≥cio
    if (error.message.includes('CNPJ inv√°lido')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'CNPJ inv√°lido',
        error: 'Formato de CNPJ incorreto'
      });
    }

    if (error.message.includes('J√° existe um embarcador')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'CNPJ j√° cadastrado',
        error: 'J√° existe um embarcador com este CNPJ'
      });
    }

    if (error.message.includes('notas fiscais associadas')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'N√£o √© poss√≠vel deletar',
        error: 'Embarcador possui notas fiscais associadas'
      });
    }

    // Usar tratamento padr√£o para outros erros
    return super.handleError(res, error);
  }
}

module.exports = EmbarcadoresController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\endereco-entrega.controller.js
================================================================================

const BaseController = require('./base.controller');
const { EnderecoEntregaRepository } = require('../repositories/endereco-entrega.repository');
const ClientesRepository = require('../repositories/clientes.repository');
const RestricaoLogisticaRepository = require('../repositories/restricao-logistica.repository');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class EnderecoEntregaController extends BaseController {
  constructor() {
    const repository = new EnderecoEntregaRepository();
    super(repository);
    this.clientesRepository = new ClientesRepository();
    this.restricaoLogisticaRepository = new RestricaoLogisticaRepository();
  }

  // Sobrescrever list para usar o padr√£o correto
  async list(req, res) {
    try {
      const options = this.buildQueryOptions(req);
      const result = await this.repository.findAll(options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Endere√ßos de entrega recuperados com sucesso',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error('Erro ao listar endere√ßos de entrega:', error);
      return this.handleError(res, error);
    }
  }

  // Sobrescrever get para incluir relacionamentos
  async get(req, res) {
    try {
      const { id } = req.params;
      const endereco = await this.repository.findWithRelations(id);

      if (!endereco) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Endere√ßo de entrega n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Endere√ßo de entrega encontrado',
        data: endereco
      });
    } catch (error) {
      logger.error('Erro ao buscar endere√ßo de entrega por ID:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar endere√ßos por cliente
  async getByCliente(req, res) {
    try {
      const { clienteId } = req.params;
      
      const enderecos = await this.repository.findByCliente(clienteId);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Endere√ßos de entrega do cliente recuperados',
        data: enderecos
      });
    } catch (error) {
      logger.error('Erro ao buscar endere√ßos por cliente:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar endere√ßos por cidade e UF
  async getByCidadeUf(req, res) {
    try {
      const { cidade, uf } = req.query;

      if (!cidade || !uf) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Cidade e UF s√£o obrigat√≥rios'
        });
      }

      const enderecos = await this.repository.findByCidadeUf(cidade, uf);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Endere√ßos de entrega encontrados',
        data: enderecos
      });
    } catch (error) {
      logger.error('Erro ao buscar endere√ßos por cidade e UF:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar endere√ßos com restri√ß√£o
  async getComRestricao(req, res) {
    try {
      const enderecos = await this.repository.findComRestricao();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Endere√ßos com restri√ß√£o recuperados',
        data: enderecos
      });
    } catch (error) {
      logger.error('Erro ao buscar endere√ßos com restri√ß√£o:', error);
      return this.handleError(res, error);
    }
  }

  // Atualizar coordenadas
  async updateCoordenadas(req, res) {
    try {
      const { id } = req.params;
      const { lat, lon } = req.body;

      const existing = await this.repository.findById(id);
      if (!existing) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Endere√ßo de entrega n√£o encontrado'
        });
      }

      const endereco = await this.repository.updateCoordenadas(id, lat, lon);

      logger.info('Coordenadas do endere√ßo atualizadas:', {
        id,
        lat,
        lon,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Coordenadas atualizadas com sucesso',
        data: endereco
      });
    } catch (error) {
      logger.error('Erro ao atualizar coordenadas:', error);
      return this.handleError(res, error);
    }
  }

  // Valida√ß√µes antes de criar
  async beforeCreate(data, req) {
    // Validar se cliente existe
    if (data.cliente_id) {
      const cliente = await this.clientesRepository.findById(data.cliente_id);
      if (!cliente) {
        throw new Error('Cliente n√£o encontrado');
      }
    }

    // Validar se restri√ß√£o log√≠stica existe (se fornecida)
    if (data.restricao_logistica_id) {
      const restricao = await this.restricaoLogisticaRepository.findById(data.restricao_logistica_id);
      if (!restricao) {
        throw new Error('Restri√ß√£o log√≠stica n√£o encontrada');
      }
    }

    // Validar endere√ßo √∫nico para o cliente
    const isUnique = await this.repository.validateUniqueEndereco(
      data.cliente_id,
      data.endereco,
      data.cidade,
      data.uf
    );
    
    if (!isUnique) {
      throw new Error('J√° existe um endere√ßo com estas informa√ß√µes para este cliente');
    }

    // Normalizar dados
    if (data.uf) {
      data.uf = data.uf.toUpperCase();
    }

    if (data.cep) {
      data.cep = data.cep.replace(/\D/g, '');
    }

    // Gerar endere√ßo completo
    data.endereco_completo = `${data.endereco}, ${data.bairro}, ${data.cidade} - ${data.uf}, ${data.cep}`;

    return data;
  }

  // Valida√ß√µes antes de atualizar
  async beforeUpdate(id, data, req) {
    const existing = await this.repository.findById(id);
    
    // Validar se cliente existe (se fornecido)
    if (data.cliente_id && data.cliente_id !== existing.cliente_id) {
      const cliente = await this.clientesRepository.findById(data.cliente_id);
      if (!cliente) {
        throw new Error('Cliente n√£o encontrado');
      }
    }

    // Validar se restri√ß√£o log√≠stica existe (se fornecida)
    if (data.restricao_logistica_id) {
      const restricao = await this.restricaoLogisticaRepository.findById(data.restricao_logistica_id);
      if (!restricao) {
        throw new Error('Restri√ß√£o log√≠stica n√£o encontrada');
      }
    }

    // Validar endere√ßo √∫nico para o cliente (se dados relevantes foram alterados)
    if (data.endereco || data.cidade || data.uf) {
      const clienteId = data.cliente_id || existing.cliente_id;
      const endereco = data.endereco || existing.endereco;
      const cidade = data.cidade || existing.cidade;
      const uf = data.uf || existing.uf;

      const isUnique = await this.repository.validateUniqueEndereco(
        clienteId,
        endereco,
        cidade,
        uf,
        id
      );
      
      if (!isUnique) {
        throw new Error('J√° existe um endere√ßo com estas informa√ß√µes para este cliente');
      }
    }

    // Normalizar dados
    if (data.uf) {
      data.uf = data.uf.toUpperCase();
    }

    if (data.cep) {
      data.cep = data.cep.replace(/\D/g, '');
    }

    // Atualizar endere√ßo completo se algum campo relevante foi alterado
    if (data.endereco || data.bairro || data.cidade || data.uf || data.cep) {
      const finalEndereco = data.endereco || existing.endereco;
      const finalBairro = data.bairro || existing.bairro;
      const finalCidade = data.cidade || existing.cidade;
      const finalUf = data.uf || existing.uf;
      const finalCep = data.cep || existing.cep;

      data.endereco_completo = `${finalEndereco}, ${finalBairro}, ${finalCidade} - ${finalUf}, ${finalCep}`;
    }

    return data;
  }

  // A√ß√µes ap√≥s criar
  async afterCreate(record, req) {
    logger.info('Novo endere√ßo de entrega criado:', {
      id: record.id,
      cliente_id: record.cliente_id,
      cidade: record.cidade,
      uf: record.uf,
      user_id: req.user?.id
    });

    return record;
  }

  // A√ß√µes ap√≥s atualizar
  async afterUpdate(record, req) {
    logger.info('Endere√ßo de entrega atualizado:', {
      id: record.id,
      cliente_id: record.cliente_id,
      user_id: req.user?.id
    });

    return record;
  }

  // Tratamento de erros espec√≠ficos
  handleError(res, error) {
    // Erros espec√≠ficos de neg√≥cio
    if (error.message.includes('Cliente n√£o encontrado')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'Cliente inv√°lido',
        error: 'Cliente n√£o encontrado no sistema'
      });
    }

    if (error.message.includes('Restri√ß√£o log√≠stica n√£o encontrada')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'Restri√ß√£o log√≠stica inv√°lida',
        error: 'Restri√ß√£o log√≠stica n√£o encontrada no sistema'
      });
    }

    if (error.message.includes('J√° existe um endere√ßo')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'Endere√ßo duplicado',
        error: error.message
      });
    }

    // Usar tratamento padr√£o para outros erros
    return super.handleError(res, error);
  }
}

module.exports = EnderecoEntregaController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\external-notas.controller.js
================================================================================

// ==========================================
// 3. EXTERNAL NOTAS CONTROLLER
// ==========================================
// backend/src/controllers/external-notas.controller.js

const BaseController = require('./base.controller');
const NotaFiscalProcessorService = require('../services/external/nota-fiscal-processor.service');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class ExternalNotasController extends BaseController {
  constructor(repositories) {
    super(repositories.externalLogs); // Repository de logs
    this.repositories = repositories;
    this.processor = new NotaFiscalProcessorService(repositories);
  }

  // Receber notas fiscais via API externa
  async receiveNotasFiscais(req, res) {
    try {
      const startTime = Date.now();
      const { notfis } = req.body;

      // Valida√ß√µes b√°sicas
      if (!notfis) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Campo "notfis" √© obrigat√≥rio no body da requisi√ß√£o'
        });
      }

      if (!Array.isArray(notfis)) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Campo "notfis" deve ser um array'
        });
      }

      if (notfis.length === 0) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Array "notfis" n√£o pode estar vazio'
        });
      }

      // Limite de processamento por request
      if (notfis.length > 100) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'M√°ximo de 100 notas fiscais por requisi√ß√£o'
        });
      }

      logger.info('Recebendo notas fiscais via API externa:', {
        integracao: req.externalAuth.integracao,
        transportadora: req.externalAuth.transportadora.nome,
        quantidade: notfis.length,
        ip: req.ip
      });

      // Processar notas fiscais
      const results = await this.processor.processNotasFiscais(
        notfis, 
        req.externalAuth.token.token
      );

      const processingTime = Date.now() - startTime;

      // Log do resultado
      logger.info('Processamento de notas fiscais conclu√≠do:', {
        integracao: req.externalAuth.integracao,
        processed: results.processed,
        created: results.created,
        updated: results.updated,
        errors: results.errors,
        processingTime: `${processingTime}ms`
      });

      // Registrar opera√ß√£o no banco
      await this.logExternalOperation(req, 'notas_fiscais', results);

      // Resposta de sucesso
      const httpStatus = results.errors > 0 ? HTTP_STATUS.PARTIAL_CONTENT : HTTP_STATUS.OK;
      
      return res.status(httpStatus).json({
        success: true,
        message: `${results.processed} notas fiscais processadas`,
        data: {
          summary: {
            processed: results.processed,
            created: results.created,
            updated: results.updated,
            errors: results.errors,
            processing_time_ms: processingTime
          },
          details: results.details
        },
        integracao: req.externalAuth.integracao,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error('Erro ao processar notas fiscais externas:', error);

      // Log do erro
      await this.logExternalOperation(req, 'notas_fiscais', { error: error.message });

      return this.handleError(res, error, {
        integracao: req.externalAuth?.integracao,
        operation: 'receive_notas_fiscais'
      });
    }
  }

  // Consultar status de nota fiscal
  async consultarStatusNF(req, res) {
    try {
      const { chave_nf } = req.params;

      if (!chave_nf) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Chave da nota fiscal √© obrigat√≥ria'
        });
      }

      // Buscar nota fiscal
      const notaFiscal = await this.repositories.notas.findByChaveNF(chave_nf);

      if (!notaFiscal) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Nota fiscal n√£o encontrada'
        });
      }

      // Buscar √∫ltima ocorr√™ncia
      const ultimaOcorrencia = await this.repositories.ocorrencias.getLastOcorrencia(notaFiscal.nro_ctrc);

      // Buscar cliente e transportadora
      const [cliente, transportadora] = await Promise.all([
        this.repositories.clientes.findById(notaFiscal.cliente_id),
        this.repositories.transportadoras.findById(notaFiscal.transportadora_id)
      ]);

      const response = {
        success: true,
        data: {
          nota_fiscal: {
            nro: notaFiscal.nro,
            chave_nf: notaFiscal.chave_cte,
            status: notaFiscal.status_nf,
            finalizada: notaFiscal.finalizada,
            data_emissao: notaFiscal.emi_nf,
            previsao_entrega: notaFiscal.previsao_entrega,
            data_entrega: notaFiscal.data_entrega,
            valor: notaFiscal.valor,
            peso: notaFiscal.peso_real,
            volumes: notaFiscal.qtd_volumes
          },
          cliente: cliente ? {
            nome: cliente.nome,
            documento: cliente.cnpj,
            cidade: cliente.cidade,
            uf: cliente.uf
          } : null,
          transportadora: transportadora ? {
            nome: transportadora.nome,
            cnpj: transportadora.cnpj
          } : null,
          ultima_ocorrencia: ultimaOcorrencia ? {
            codigo: ultimaOcorrencia.codigo,
            descricao: ultimaOcorrencia.descricao,
            data_evento: ultimaOcorrencia.dataHoraEvento,
            recebedor: ultimaOcorrencia.nomeRecebedor
          } : null
        }
      };

      return res.status(HTTP_STATUS.OK).json(response);

    } catch (error) {
      logger.error('Erro ao consultar status da NF:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar notas fiscais por crit√©rios
  async buscarNotasFiscais(req, res) {
    try {
      const {
        nro_pedido,
        data_inicio,
        data_fim,
        status,
        transportadora,
        limite = 50
      } = req.query;

      // Valida√ß√µes
      if (limite > 100) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Limite m√°ximo de 100 registros por consulta'
        });
      }

      // Construir filtros
      const filtros = {
        limite: parseInt(limite)
      };

      if (nro_pedido) {
        filtros.nro_pedido = parseInt(nro_pedido);
      }

      if (data_inicio) {
        filtros.data_inicio = new Date(data_inicio);
      }

      if (data_fim) {
        filtros.data_fim = new Date(data_fim);
      }

      if (status) {
        filtros.status = status;
      }

      if (transportadora) {
        filtros.transportadora = transportadora;
      }

      // Buscar notas fiscais
      const notasFiscais = await this.repositories.notas.findWithFilters(filtros);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        data: {
          notas_fiscais: notasFiscais,
          total: notasFiscais.length,
          filtros: filtros
        }
      });

    } catch (error) {
      logger.error('Erro ao buscar notas fiscais:', error);
      return this.handleError(res, error);
    }
  }

  // Log de opera√ß√£o externa
  async logExternalOperation(req, operation, result) {
    try {
      const logData = {
        integracao: req.externalAuth.integracao,
        transportadora_id: req.externalAuth.transportadora.id,
        operacao: operation,
        ip: req.ip,
        user_agent: req.get('User-Agent'),
        resultado: result,
        request_size: JSON.stringify(req.body).length,
        created_at: new Date()
      };

      await this.repositories.externalLogs.create(logData);

    } catch (error) {
      logger.error('Erro ao registrar log de opera√ß√£o externa:', error);
    }
  }
}

module.exports = ExternalNotasController;



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\external-ocorrencias.controller.js
================================================================================

// ==========================================
// 4. EXTERNAL OCORRENCIAS CONTROLLER
// ==========================================
// backend/src/controllers/external-ocorrencias.controller.js

const BaseController = require('./base.controller');
const OcorrenciaProcessorService = require('../services/external/ocorrencia-processor.service');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class ExternalOcorrenciasController extends BaseController {
  constructor(repositories) {
    super(repositories.externalLogs);
    this.repositories = repositories;
    this.processor = new OcorrenciaProcessorService(repositories);
  }

  // Receber ocorr√™ncias via API externa
  async receiveOcorrencias(req, res) {
    try {
      const startTime = Date.now();
      const { ocorrencias } = req.body;

      // Valida√ß√µes b√°sicas
      if (!ocorrencias) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Campo "ocorrencias" √© obrigat√≥rio no body da requisi√ß√£o'
        });
      }

      if (!Array.isArray(ocorrencias)) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Campo "ocorrencias" deve ser um array'
        });
      }

      if (ocorrencias.length === 0) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Array "ocorrencias" n√£o pode estar vazio'
        });
      }

      // Limite de processamento por request
      if (ocorrencias.length > 200) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'M√°ximo de 200 ocorr√™ncias por requisi√ß√£o'
        });
      }

      logger.info('Recebendo ocorr√™ncias via API externa:', {
        integracao: req.externalAuth.integracao,
        transportadora: req.externalAuth.transportadora.nome,
        quantidade: ocorrencias.length,
        ip: req.ip
      });

      // Processar ocorr√™ncias
      const results = await this.processor.processOcorrencias(
        ocorrencias,
        req.externalAuth.token.token
      );

      const processingTime = Date.now() - startTime;

      // Log do resultado
      logger.info('Processamento de ocorr√™ncias conclu√≠do:', {
        integracao: req.externalAuth.integracao,
        processed: results.processed,
        created: results.created,
        updated: results.updated,
        errors: results.errors,
        processingTime: `${processingTime}ms`
      });

      // Registrar opera√ß√£o no banco
      await this.logExternalOperation(req, 'ocorrencias', results);

      // Resposta de sucesso
      const httpStatus = results.errors > 0 ? HTTP_STATUS.PARTIAL_CONTENT : HTTP_STATUS.OK;

      return res.status(httpStatus).json({
        success: true,
        message: `${results.processed} ocorr√™ncias processadas`,
        data: {
          summary: {
            processed: results.processed,
            created: results.created,
            updated: results.updated,
            errors: results.errors,
            processing_time_ms: processingTime
          },
          details: results.details
        },
        integracao: req.externalAuth.integracao,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error('Erro ao processar ocorr√™ncias externas:', error);

      // Log do erro
      await this.logExternalOperation(req, 'ocorrencias', { error: error.message });

      return this.handleError(res, error, {
        integracao: req.externalAuth?.integracao,
        operation: 'receive_ocorrencias'
      });
    }
  }

  // Consultar ocorr√™ncias de uma nota fiscal
  async consultarOcorrenciasNF(req, res) {
    try {
      const { nro_nf } = req.params;
      const { limite = 50 } = req.query;

      if (!nro_nf) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'N√∫mero da nota fiscal √© obrigat√≥rio'
        });
      }

      // Buscar nota fiscal
      const notaFiscal = await this.repositories.notas.findByNroCtrc(parseInt(nro_nf));

      if (!notaFiscal) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Nota fiscal n√£o encontrada'
        });
      }

      // Buscar ocorr√™ncias
      const ocorrencias = await this.repositories.ocorrencias.findByNroNF(
        notaFiscal.nro_ctrc,
        parseInt(limite)
      );

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        data: {
          nota_fiscal: {
            nro: notaFiscal.nro,
            chave_nf: notaFiscal.chave_cte,
            status: notaFiscal.status_nf,
            finalizada: notaFiscal.finalizada
          },
          ocorrencias: ocorrencias.map(ocorrencia => ({
            codigo: ocorrencia.codigo,
            descricao: ocorrencia.descricao,
            data_evento: ocorrencia.dataHoraEvento,
            recebedor: ocorrencia.nomeRecebedor,
            documento_recebedor: ocorrencia.docRecebedor,
            localizacao: ocorrencia.latitude && ocorrencia.longitude ? {
              latitude: ocorrencia.latitude,
              longitude: ocorrencia.longitude
            } : null,
            comprovante: ocorrencia.linkComprovante,
            data_registro: ocorrencia.created_at
          })),
          total: ocorrencias.length
        }
      });

    } catch (error) {
      logger.error('Erro ao consultar ocorr√™ncias da NF:', error);
      return this.handleError(res, error);
    }
  }

  // Webhook para receber notifica√ß√µes
  async webhook(req, res) {
    try {
      const { evento, dados } = req.body;

      logger.info('Webhook recebido:', {
        integracao: req.externalAuth.integracao,
        evento: evento,
        dados: dados,
        ip: req.ip
      });

      // Processar diferentes tipos de evento
      switch (evento) {
        case 'ocorrencia':
          await this.processWebhookOcorrencia(dados);
          break;
        case 'status_alterado':
          await this.processWebhookStatusAlterado(dados);
          break;
        default:
          logger.warn('Tipo de evento webhook desconhecido:', evento);
      }

      // Registrar webhook
      await this.logExternalOperation(req, 'webhook', { evento, dados });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Webhook processado com sucesso',
        evento: evento
      });

    } catch (error) {
      logger.error('Erro ao processar webhook:', error);
      return this.handleError(res, error);
    }
  }

  // Processar webhook de ocorr√™ncia
  async processWebhookOcorrencia(dados) {
    try {
      if (dados && dados.nro_nf && dados.codigo) {
        await this.processor.processSingleOcorrencia(dados, 'webhook');
      }
    } catch (error) {
      logger.error('Erro ao processar webhook de ocorr√™ncia:', error);
    }
  }

  // Processar webhook de status alterado
  async processWebhookStatusAlterado(dados) {
    try {
      if (dados && dados.nro_nf && dados.novo_status) {
        const notaFiscal = await this.repositories.notas.findByNroCtrc(dados.nro_nf);
        
        if (notaFiscal) {
          await this.repositories.notas.update(notaFiscal.id, {
            status_nf: dados.novo_status,
            updated_at: new Date()
          });
        }
      }
    } catch (error) {
      logger.error('Erro ao processar webhook de status:', error);
    }
  }

  // Log de opera√ß√£o externa
  async logExternalOperation(req, operation, result) {
    try {
      const logData = {
        integracao: req.externalAuth.integracao,
        transportadora_id: req.externalAuth.transportadora.id,
        operacao: operation,
        ip: req.ip,
        user_agent: req.get('User-Agent'),
        resultado: result,
        request_size: JSON.stringify(req.body).length,
        created_at: new Date()
      };

      await this.repositories.externalLogs.create(logData);

    } catch (error) {
      logger.error('Erro ao registrar log de opera√ß√£o externa:', error);
    }
  }
}

module.exports = ExternalOcorrenciasController;




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\jobs.controller.js
================================================================================

// ==========================================
// 1. JOBS CONTROLLER
// ==========================================
// backend/src/controllers/jobs.controller.js

const BaseController = require('./base.controller');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class JobsController extends BaseController {
  constructor(repository, jobScheduler) {
    super(repository);
    this.jobScheduler = jobScheduler;
  }

  // Obter status geral dos jobs
  async getStatus(req, res) {
    try {
      const status = this.jobScheduler.getStatus();
      
      // Buscar estat√≠sticas do banco
      const stats = await this.repository.getJobStats();
      
      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Status dos jobs recuperado com sucesso',
        data: {
          scheduler: status,
          statistics: stats
        }
      });
    } catch (error) {
      logger.error('Erro ao obter status dos jobs:', error);
      return this.handleError(res, error);
    }
  }

  // Executar job manualmente
  async runManual(req, res) {
    try {
      if (this.jobScheduler.isRunning) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Job j√° est√° em execu√ß√£o'
        });
      }

      // Executar em background
      setImmediate(() => {
        this.jobScheduler.runManual().catch(error => {
          logger.error('Erro na execu√ß√£o manual do job:', error);
        });
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Job iniciado manualmente com sucesso'
      });
    } catch (error) {
      logger.error('Erro ao executar job manual:', error);
      return this.handleError(res, error);
    }
  }

  // Parar jobs
  async stop(req, res) {
    try {
      await this.jobScheduler.stop();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Jobs parados com sucesso'
      });
    } catch (error) {
      logger.error('Erro ao parar jobs:', error);
      return this.handleError(res, error);
    }
  }

  // Reiniciar jobs
  async restart(req, res) {
    try {
      await this.jobScheduler.stop();
      await this.jobScheduler.initialize();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Jobs reiniciados com sucesso'
      });
    } catch (error) {
      logger.error('Erro ao reiniciar jobs:', error);
      return this.handleError(res, error);
    }
  }

  // Recarregar configura√ß√µes
  async reloadConfig(req, res) {
    try {
      await this.jobScheduler.reloadConfig();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Configura√ß√µes recarregadas com sucesso'
      });
    } catch (error) {
      logger.error('Erro ao recarregar configura√ß√µes:', error);
      return this.handleError(res, error);
    }
  }

  // Listar integra√ß√µes recentes
  async getIntegrations(req, res) {
    try {
      const { page = 1, limit = 20, dias = 7 } = req.query;
      
      const integrations = await this.repository.getRecentIntegrations({
        page: parseInt(page),
        limit: parseInt(limit),
        dias: parseInt(dias)
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Integra√ß√µes recuperadas com sucesso',
        data: integrations
      });
    } catch (error) {
      logger.error('Erro ao buscar integra√ß√µes:', error);
      return this.handleError(res, error);
    }
  }

  // Obter logs de uma integra√ß√£o
  async getIntegrationLogs(req, res) {
    try {
      const { integracaoId } = req.params;
      const { page = 1, limit = 50 } = req.query;

      const logs = await this.repository.getIntegrationLogs({
        integracaoId: parseInt(integracaoId),
        page: parseInt(page),
        limit: parseInt(limit)
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Logs recuperados com sucesso',
        data: logs
      });
    } catch (error) {
      logger.error('Erro ao buscar logs da integra√ß√£o:', error);
      return this.handleError(res, error);
    }
  }

  // Processar transportadora espec√≠fica
  async processTransportadora(req, res) {
    try {
      const { transportadoraId } = req.params;

      if (!transportadoraId) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'ID da transportadora √© obrigat√≥rio'
        });
      }

      // Buscar transportadora
      const transportadora = await this.repository.getTransportadoraById(transportadoraId);
      
      if (!transportadora) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Transportadora n√£o encontrada'
        });
      }

      if (!transportadora.ativo || !transportadora.integracao_ocorrencia || transportadora.integracao_ocorrencia === 'manual') {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Transportadora n√£o possui integra√ß√£o ativa'
        });
      }

      // Processar em background
      setImmediate(async () => {
        try {
          await this.jobScheduler.processTransportadora(transportadora);
          logger.info(`Processamento manual da transportadora ${transportadoraId} conclu√≠do`);
        } catch (error) {
          logger.error(`Erro no processamento manual da transportadora ${transportadoraId}:`, error);
        }
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: `Processamento da transportadora ${transportadora.nome} iniciado`
      });
    } catch (error) {
      logger.error('Erro ao processar transportadora:', error);
      return this.handleError(res, error);
    }
  }

  // Limpar fila de uma transportadora
  async clearQueue(req, res) {
    try {
      const { transportadoraId } = req.params;

      if (!transportadoraId) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'ID da transportadora √© obrigat√≥rio'
        });
      }

      const cleared = this.jobScheduler.queueService.clearQueue(transportadoraId);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: `Fila limpa: ${cleared} jobs removidos`
      });
    } catch (error) {
      logger.error('Erro ao limpar fila:', error);
      return this.handleError(res, error);
    }
  }

  // Configurar tokens de API
  async setApiToken(req, res) {
    try {
      const { integracao, token, expiresAt } = req.body;

      if (!integracao || !token) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Integra√ß√£o e token s√£o obrigat√≥rios'
        });
      }

      // Desativar tokens existentes
      await this.repository.deactivateApiTokens(integracao);

      // Criar novo token
      const apiToken = await this.repository.createApiToken({
        integracao,
        token,
        expires_at: expiresAt ? new Date(expiresAt) : null,
        active: true
      });

      return res.status(HTTP_STATUS.CREATED).json({
        success: true,
        message: 'Token de API configurado com sucesso',
        data: {
          id: apiToken.id,
          integracao: apiToken.integracao,
          expires_at: apiToken.expires_at,
          active: apiToken.active
        }
      });
    } catch (error) {
      logger.error('Erro ao configurar token de API:', error);
      return this.handleError(res, error);
    }
  }

  // Listar tokens de API
  async getApiTokens(req, res) {
    try {
      const tokens = await this.repository.getApiTokens();

      // Remover valores dos tokens por seguran√ßa
      const safeTokens = tokens.map(token => ({
        id: token.id,
        integracao: token.integracao,
        expires_at: token.expires_at,
        active: token.active,
        created_at: token.created_at,
        hasToken: !!token.token
      }));

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Tokens recuperados com sucesso',
        data: safeTokens
      });
    } catch (error) {
      logger.error('Erro ao buscar tokens de API:', error);
      return this.handleError(res, error);
    }
  }
}

module.exports = JobsController;




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\jobs.controller.test.js
================================================================================


// ==========================================
// 3. TESTES - JOBS CONTROLLER
// ==========================================
// backend/tests/controllers/jobs.controller.test.js

const request = require('supertest');
const express = require('express');
const JobsController = require('../../src/controllers/jobs.controller');

describe('JobsController', () => {
  let app;
  let mockRepository;
  let mockScheduler;
  let controller;

  beforeEach(() => {
    mockRepository = {
      getJobStats: jest.fn(),
      getRecentIntegrations: jest.fn(),
      createApiToken: jest.fn(),
      deactivateApiTokens: jest.fn()
    };

    mockScheduler = {
      getStatus: jest.fn(),
      isRunning: false,
      runManual: jest.fn(),
      stop: jest.fn(),
      initialize: jest.fn(),
      reloadConfig: jest.fn(),
      queueService: {
        clearQueue: jest.fn()
      }
    };

    controller = new JobsController(mockRepository, mockScheduler);

    app = express();
    app.use(express.json());
    app.use((req, res, next) => {
      req.user = { id: 1, role: 'admin' };
      next();
    });
    
    app.get('/status', (req, res) => controller.getStatus(req, res));
    app.post('/run', (req, res) => controller.runManual(req, res));
    app.post('/api-tokens', (req, res) => controller.setApiToken(req, res));
  });

  describe('GET /status', () => {
    test('deve retornar status dos jobs', async () => {
      mockScheduler.getStatus.mockReturnValue({
        running: false,
        config: { enabled: true }
      });
      
      mockRepository.getJobStats.mockResolvedValue({
        total_integracoes: 10,
        concluidas: 8
      });

      const response = await request(app).get('/status');

      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.scheduler.running).toBe(false);
      expect(response.body.data.statistics.total_integracoes).toBe(10);
    });
  });

  describe('POST /run', () => {
    test('deve executar job manual', async () => {
      const response = await request(app).post('/run');

      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toContain('iniciado manualmente');
    });

    test('deve falhar se job j√° estiver rodando', async () => {
      mockScheduler.isRunning = true;

      const response = await request(app).post('/run');

      expect(response.status).toBe(400);
      expect(response.body.success).toBe(false);
    });
  });

  describe('POST /api-tokens', () => {
    test('deve criar token de API', async () => {
      mockRepository.deactivateApiTokens.mockResolvedValue();
      mockRepository.createApiToken.mockResolvedValue({
        id: 1,
        integracao: 'jamef',
        active: true
      });

      const response = await request(app)
        .post('/api-tokens')
        .send({
          integracao: 'jamef',
          token: 'test-token-123'
        });

      expect(response.status).toBe(201);
      expect(response.body.success).toBe(true);
      expect(response.body.data.integracao).toBe('jamef');
      expect(mockRepository.deactivateApiTokens).toHaveBeenCalledWith('jamef');
    });
  });
});


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\monitoring.controller.js
================================================================================

// ==========================================
// 2. MONITORING CONTROLLER
// ==========================================
// backend/src/controllers/monitoring.controller.js

const BaseController = require('./base.controller');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class MonitoringController extends BaseController {
  constructor(repository) {
    super(repository);
  }

  // Dashboard principal
  async getDashboard(req, res) {
    try {
      const { periodo = 7 } = req.query; // dias

      const dashboard = await this.repository.getDashboardData({
        periodo: parseInt(periodo)
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Dashboard recuperado com sucesso',
        data: dashboard
      });
    } catch (error) {
      logger.error('Erro ao carregar dashboard:', error);
      return this.handleError(res, error);
    }
  }

  // M√©tricas por transportadora
  async getTransportadoraMetrics(req, res) {
    try {
      const { transportadoraId } = req.params;
      const { periodo = 30 } = req.query;

      if (!transportadoraId) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'ID da transportadora √© obrigat√≥rio'
        });
      }

      const metrics = await this.repository.getTransportadoraMetrics({
        transportadoraId: parseInt(transportadoraId),
        periodo: parseInt(periodo)
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'M√©tricas recuperadas com sucesso',
        data: metrics
      });
    } catch (error) {
      logger.error('Erro ao buscar m√©tricas da transportadora:', error);
      return this.handleError(res, error);
    }
  }

  // Estat√≠sticas de performance
  async getPerformanceStats(req, res) {
    try {
      const { periodo = 7, agrupamento = 'dia' } = req.query;

      const stats = await this.repository.getPerformanceStats({
        periodo: parseInt(periodo),
        agrupamento
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Estat√≠sticas de performance recuperadas',
        data: stats
      });
    } catch (error) {
      logger.error('Erro ao buscar estat√≠sticas de performance:', error);
      return this.handleError(res, error);
    }
  }

  // Relat√≥rio de sa√∫de das integra√ß√µes
  async getHealthReport(req, res) {
    try {
      const health = await this.repository.getIntegrationsHealth();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Relat√≥rio de sa√∫de recuperado',
        data: health
      });
    } catch (error) {
      logger.error('Erro ao gerar relat√≥rio de sa√∫de:', error);
      return this.handleError(res, error);
    }
  }

  // Logs com filtros avan√ßados
  async getLogs(req, res) {
    try {
      const {
        page = 1,
        limit = 50,
        integracao,
        nivel,
        dataInicio,
        dataFim,
        nro,
        busca
      } = req.query;

      const filters = {
        page: parseInt(page),
        limit: parseInt(limit),
        integracao,
        nivel,
        dataInicio: dataInicio ? new Date(dataInicio) : null,
        dataFim: dataFim ? new Date(dataFim) : null,
        nro: nro ? parseInt(nro) : null,
        busca
      };

      const logs = await this.repository.getLogsWithFilters(filters);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Logs recuperados com sucesso',
        data: logs
      });
    } catch (error) {
      logger.error('Erro ao buscar logs:', error);
      return this.handleError(res, error);
    }
  }

  // Alertas ativos
  async getActiveAlerts(req, res) {
    try {
      const alerts = await this.repository.getActiveAlerts();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Alertas ativos recuperados',
        data: alerts
      });
    } catch (error) {
      logger.error('Erro ao buscar alertas:', error);
      return this.handleError(res, error);
    }
  }

  // Resumo de NFs por status
  async getNFStatusSummary(req, res) {
    try {
      const { transportadoraId, periodo = 30 } = req.query;

      const summary = await this.repository.getNFStatusSummary({
        transportadoraId: transportadoraId ? parseInt(transportadoraId) : null,
        periodo: parseInt(periodo)
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Resumo de status recuperado',
        data: summary
      });
    } catch (error) {
      logger.error('Erro ao buscar resumo de status:', error);
      return this.handleError(res, error);
    }
  }

  // Exportar relat√≥rio
  async exportReport(req, res) {
    try {
      const {
        tipo = 'performance',
        formato = 'json',
        periodo = 30,
        transportadoraId
      } = req.query;

      const reportData = await this.repository.generateReport({
        tipo,
        periodo: parseInt(periodo),
        transportadoraId: transportadoraId ? parseInt(transportadoraId) : null
      });

      // Definir headers baseado no formato
      if (formato === 'csv') {
        res.setHeader('Content-Type', 'text/csv');
        res.setHeader('Content-Disposition', `attachment; filename=relatorio_${tipo}_${Date.now()}.csv`);
        
        // Converter para CSV (implementa√ß√£o b√°sica)
        const csv = this.convertToCSV(reportData);
        return res.send(csv);
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Relat√≥rio gerado com sucesso',
        data: reportData
      });
    } catch (error) {
      logger.error('Erro ao exportar relat√≥rio:', error);
      return this.handleError(res, error);
    }
  }

  // Configura√ß√µes de monitoramento
  async getMonitoringConfig(req, res) {
    try {
      const config = await this.repository.getMonitoringConfig();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Configura√ß√µes recuperadas',
        data: config
      });
    } catch (error) {
      logger.error('Erro ao buscar configura√ß√µes:', error);
      return this.handleError(res, error);
    }
  }

  // Atualizar configura√ß√µes de monitoramento
  async updateMonitoringConfig(req, res) {
    try {
      const config = req.body;

      const updated = await this.repository.updateMonitoringConfig(config);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Configura√ß√µes atualizadas com sucesso',
        data: updated
      });
    } catch (error) {
      logger.error('Erro ao atualizar configura√ß√µes:', error);
      return this.handleError(res, error);
    }
  }

  // Helper para converter dados para CSV
  convertToCSV(data) {
    if (!data || !Array.isArray(data) || data.length === 0) {
      return '';
    }

    const headers = Object.keys(data[0]);
    const csvHeaders = headers.join(',');
    
    const csvRows = data.map(row => {
      return headers.map(header => {
        const value = row[header];
        // Escapar aspas e v√≠rgulas
        if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
          return `"${value.replace(/"/g, '""')}"`;
        }
        return value;
      }).join(',');
    });

    return [csvHeaders, ...csvRows].join('\n');
  }
}

module.exports = MonitoringController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\motoristas.controller.js
================================================================================

const BaseController = require('./base.controller');
const MotoristasRepository = require('../repositories/motoristas.repository');
const { validateCPF, validateEmail } = require('../utils/validators');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class MotoristasController extends BaseController {
  constructor() {
    const repository = new MotoristasRepository();
    super(repository);
  }

  // Sobrescrever list para incluir estat√≠sticas
  async list(req, res) {
    try {
      const options = this.buildQueryOptions(req);
      const result = await this.repository.findAllWithStats(options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Motoristas recuperados com sucesso',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error('Erro ao listar motoristas:', error);
      return this.handleError(res, error);
    }
  }

  // Sobrescrever get para incluir estat√≠sticas
  async get(req, res) {
    try {
      const { id } = req.params;
      const motorista = await this.repository.findWithRomaneiosCount(id);

      if (!motorista) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Motorista n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Motorista encontrado',
        data: motorista
      });
    } catch (error) {
      logger.error('Erro ao buscar motorista por ID:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por CPF
  async getByCpf(req, res) {
    try {
      const { cpf } = req.params;

      if (!validateCPF(cpf)) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'CPF inv√°lido'
        });
      }

      const motorista = await this.repository.findByCpf(cpf);

      if (!motorista) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Motorista n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Motorista encontrado',
        data: motorista
      });
    } catch (error) {
      logger.error('Erro ao buscar motorista por CPF:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por nome (autocomplete)
  async search(req, res) {
    try {
      const { q: searchTerm, limit = 10 } = req.query;

      if (!searchTerm || searchTerm.length < 2) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Termo de busca deve ter pelo menos 2 caracteres'
        });
      }

      const motoristas = await this.repository.searchByName(searchTerm, parseInt(limit));

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Busca realizada com sucesso',
        data: motoristas
      });
    } catch (error) {
      logger.error('Erro ao buscar motoristas por nome:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por cidade
  async getByCidade(req, res) {
    try {
      const { cidade } = req.params;

      if (!cidade || cidade.length < 2) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Cidade deve ter pelo menos 2 caracteres'
        });
      }

      const motoristas = await this.repository.findByCidade(cidade);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Motoristas encontrados',
        data: motoristas
      });
    } catch (error) {
      logger.error('Erro ao buscar motoristas por cidade:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar motoristas ativos para mensagens
  async getActiveForMessages(req, res) {
    try {
      const motoristas = await this.repository.findActiveForMessages();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Motoristas ativos para mensagens recuperados',
        data: motoristas
      });
    } catch (error) {
      logger.error('Erro ao buscar motoristas ativos para mensagens:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar com jornada de trabalho
  async getWithJornada(req, res) {
    try {
      const { id } = req.params;
      const motorista = await this.repository.findWithJornada(id);

      if (!motorista) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Motorista n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Motorista com jornada encontrado',
        data: motorista
      });
    } catch (error) {
      logger.error('Erro ao buscar motorista com jornada:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar com informa√ß√µes de legisla√ß√£o
  async getWithLegislacao(req, res) {
    try {
      const { id } = req.params;
      const motorista = await this.repository.findWithLegislacao(id);

      if (!motorista) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Motorista n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Motorista com legisla√ß√£o encontrado',
        data: motorista
      });
    } catch (error) {
      logger.error('Erro ao buscar motorista com legisla√ß√£o:', error);
      return this.handleError(res, error);
    }
  }

  // Listar legisla√ß√µes dispon√≠veis
  async getLegislacoes(req, res) {
    try {
      const legislacoes = await this.repository.findAvailableLegislacoes();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Legisla√ß√µes recuperadas com sucesso',
        data: legislacoes
      });
    } catch (error) {
      logger.error('Erro ao obter legisla√ß√µes:', error);
      return this.handleError(res, error);
    }
  }

  // Estat√≠sticas gerais
  async getStats(req, res) {
    try {
      const stats = await this.repository.getStats();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Estat√≠sticas recuperadas com sucesso',
        data: stats
      });
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas de motoristas:', error);
      return this.handleError(res, error);
    }
  }

  // Valida√ß√µes antes de criar
  async beforeCreate(data, req) {
    // Validar CPF
    if (!data.cpf || !validateCPF(data.cpf)) {
      throw new Error('CPF inv√°lido');
    }

    // Verificar se CPF j√° existe
    const isUniqueCpf = await this.repository.validateUniqueCpf(data.cpf);
    if (!isUniqueCpf) {
      throw new Error('J√° existe um motorista com este CPF');
    }

    // Validar email se fornecido
    if (data.email) {
      if (!validateEmail(data.email)) {
        throw new Error('Email inv√°lido');
      }

      const isUniqueEmail = await this.repository.validateUniqueEmail(data.email);
      if (!isUniqueEmail) {
        throw new Error('J√° existe um motorista com este email');
      }
    }

    // Validar legislacao_id se fornecido
    if (data.legislacao_id) {
      const legislacaoExists = await this.repository.validateLegislacaoExists(data.legislacao_id);
      if (!legislacaoExists) {
        throw new Error('Legisla√ß√£o n√£o encontrada');
      }
    }

    // Normalizar dados
    data.cpf = data.cpf.replace(/\D/g, ''); // Apenas n√∫meros
    data.nome = data.nome.trim().toUpperCase();
    if (data.sobrenome) {
      data.sobrenome = data.sobrenome.trim().toUpperCase();
    }
    if (data.email) {
      data.email = data.email.toLowerCase().trim();
    }
    if (data.estado) {
      data.estado = data.estado.trim().toUpperCase();
    }
    if (data.cidade) {
      data.cidade = data.cidade.trim();
    }
    if (data.cep) {
      data.cep = data.cep.replace(/\D/g, ''); // Apenas n√∫meros
    }

    // Garantir valores default
    if (data.send_mensagem === undefined) {
      data.send_mensagem = true;
    }

    return data;
  }

  // Valida√ß√µes antes de atualizar
  async beforeUpdate(id, data, req) {
    // Validar CPF se fornecido
    if (data.cpf) {
      if (!validateCPF(data.cpf)) {
        throw new Error('CPF inv√°lido');
      }

      // Verificar se CPF j√° existe (excluindo o registro atual)
      const isUniqueCpf = await this.repository.validateUniqueCpf(data.cpf, id);
      if (!isUniqueCpf) {
        throw new Error('J√° existe um motorista com este CPF');
      }

      data.cpf = data.cpf.replace(/\D/g, ''); // Apenas n√∫meros
    }

    // Validar email se fornecido
    if (data.email) {
      if (!validateEmail(data.email)) {
        throw new Error('Email inv√°lido');
      }

      const isUniqueEmail = await this.repository.validateUniqueEmail(data.email, id);
      if (!isUniqueEmail) {
        throw new Error('J√° existe um motorista com este email');
      }

      data.email = data.email.toLowerCase().trim();
    }

    // Validar legislacao_id se fornecido
    if (data.legislacao_id) {
      const legislacaoExists = await this.repository.validateLegislacaoExists(data.legislacao_id);
      if (!legislacaoExists) {
        throw new Error('Legisla√ß√£o n√£o encontrada');
      }
    }

    // Normalizar dados
    if (data.nome) {
      data.nome = data.nome.trim().toUpperCase();
    }
    if (data.sobrenome) {
      data.sobrenome = data.sobrenome.trim().toUpperCase();
    }
    if (data.estado) {
      data.estado = data.estado.trim().toUpperCase();
    }
    if (data.cidade) {
      data.cidade = data.cidade.trim();
    }
    if (data.cep) {
      data.cep = data.cep.replace(/\D/g, ''); // Apenas n√∫meros
    }

    return data;
  }

  // Valida√ß√µes antes de deletar
  async beforeDelete(id, req) {
    // Verificar se tem romaneios associados
    const motorista = await this.repository.findWithRomaneiosCount(id);
    
    if (motorista && parseInt(motorista.total_romaneios) > 0) {
      throw new Error('N√£o √© poss√≠vel deletar motorista com romaneios associados');
    }

    return true;
  }

  // Sobrescrever create para incluir valida√ß√µes
  async create(req, res) {
    try {
      let data = this.sanitizeData(req.body);
      
      // Executar valida√ß√µes antes de criar
      data = await this.beforeCreate(data, req);
      
      const record = await this.repository.create(data);

      logger.info('Novo motorista criado:', {
        id: record.id,
        nome: record.nome,
        cpf: record.cpf,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.CREATED).json({
        success: true,
        message: 'Motorista criado com sucesso',
        data: record
      });
    } catch (error) {
      logger.error('Erro ao criar motorista:', error);
      return this.handleError(res, error);
    }
  }

  // Sobrescrever update para incluir valida√ß√µes
  async update(req, res) {
    try {
      const { id } = req.params;
      let data = this.sanitizeData(req.body);

      const existing = await this.repository.findById(id);
      if (!existing) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Motorista n√£o encontrado'
        });
      }

      // Executar valida√ß√µes antes de atualizar
      data = await this.beforeUpdate(id, data, req);

      const record = await this.repository.update(id, data);

      logger.info('Motorista atualizado:', {
        id: record.id,
        nome: record.nome,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Motorista atualizado com sucesso',
        data: record
      });
    } catch (error) {
      logger.error('Erro ao atualizar motorista:', error);
      return this.handleError(res, error);
    }
  }

  // Sobrescrever delete para incluir valida√ß√µes
  async delete(req, res) {
    try {
      const { id } = req.params;

      const existing = await this.repository.findById(id);
      if (!existing) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Motorista n√£o encontrado'
        });
      }

      // Executar valida√ß√µes antes de deletar
      await this.beforeDelete(id, req);

      await this.repository.delete(id);

      logger.info('Motorista deletado:', {
        id,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Motorista deletado com sucesso'
      });
    } catch (error) {
      logger.error('Erro ao deletar motorista:', error);
      return this.handleError(res, error);
    }
  }

  // Tratamento de erros espec√≠ficos
  handleError(res, error) {
    // Erros espec√≠ficos de neg√≥cio
    if (error.message.includes('CPF inv√°lido')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'CPF inv√°lido',
        error: 'Formato de CPF incorreto'
      });
    }

    if (error.message.includes('J√° existe um motorista com este CPF')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'CPF j√° cadastrado',
        error: 'J√° existe um motorista com este CPF'
      });
    }

    if (error.message.includes('Email inv√°lido')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'Email inv√°lido',
        error: 'Formato de email incorreto'
      });
    }

    if (error.message.includes('J√° existe um motorista com este email')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'Email j√° cadastrado',
        error: 'J√° existe um motorista com este email'
      });
    }

    if (error.message.includes('Legisla√ß√£o n√£o encontrada')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'Legisla√ß√£o n√£o encontrada',
        error: 'O ID da legisla√ß√£o fornecido n√£o existe. Use GET /api/motoristas/legislacoes para ver as op√ß√µes dispon√≠veis'
      });
    }

    if (error.message.includes('romaneios associados')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'N√£o √© poss√≠vel deletar',
        error: 'Motorista possui romaneios associados'
      });
    }

    // Erros de foreign key constraint
    if (error.code === '23503') {
      if (error.constraint === 'motoristas_legislacao_id_foreign') {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Legisla√ß√£o n√£o encontrada',
          error: 'O ID da legisla√ß√£o fornecido n√£o existe. Use GET /api/motoristas/legislacoes para ver as op√ß√µes dispon√≠veis'
        });
      }
    }

    // Usar tratamento padr√£o para outros erros
    return super.handleError(res, error);
  }
}

module.exports = MotoristasController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\nota-fiscal-ocorrencias.controller.js
================================================================================

// controllers/nota-fiscal-ocorrencias.controller.js
const BaseController = require('./base.controller');
const OcorrenciasRepository = require('../repositories/ocorrencias.repository');
const NotasFiscaisRepository = require('../repositories/notas-fiscais.repository');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class NotaFiscalOcorrenciasController extends BaseController {
  constructor() {
    const repository = new OcorrenciasRepository();
    super(repository);
    this.notasRepository = new NotasFiscaisRepository();
  }

  // Listar todas as ocorr√™ncias de uma nota fiscal
  async getOcorrenciasByNotaFiscal(req, res) {
    try {
      const { nroNf } = req.params;
      const options = this.buildQueryOptions(req);

      // Verificar se a nota fiscal existe
      const notaFiscal = await this.notasRepository.findByNumero(nroNf);
      if (!notaFiscal || notaFiscal.length === 0) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: `Nota fiscal ${nroNf} n√£o encontrada`
        });
      }

      // Buscar ocorr√™ncias da nota fiscal
      const ocorrencias = await this.repository.findByNumeroNF(nroNf);

      // Aplicar pagina√ß√£o se necess√°rio
      const page = parseInt(options.page || 1);
      const limit = parseInt(options.limit || 20);
      const offset = (page - 1) * limit;
      
      const total = ocorrencias.length;
      const paginatedOcorrencias = ocorrencias.slice(offset, offset + limit);

      const pagination = {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit),
        hasNext: page * limit < total,
        hasPrev: page > 1
      };

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Ocorr√™ncias da nota fiscal recuperadas com sucesso',
        data: {
          nota_fiscal: {
            numero: nroNf,
            info: notaFiscal[0]
          },
          ocorrencias: paginatedOcorrencias,
          total_ocorrencias: total
        },
        pagination
      });
    } catch (error) {
      logger.error('Erro ao buscar ocorr√™ncias por nota fiscal:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar √∫ltima ocorr√™ncia de uma nota fiscal
  async getLastOcorrenciaByNotaFiscal(req, res) {
    try {
      const { nroNf } = req.params;

      // Verificar se a nota fiscal existe
      const notaFiscal = await this.notasRepository.findByNumero(nroNf);
      if (!notaFiscal || notaFiscal.length === 0) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: `Nota fiscal ${nroNf} n√£o encontrada`
        });
      }

      // Buscar √∫ltima ocorr√™ncia
      const ultimaOcorrencia = await this.repository.getLastOcorrencia(nroNf);

      if (!ultimaOcorrencia) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: `Nenhuma ocorr√™ncia encontrada para a nota fiscal ${nroNf}`
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: '√öltima ocorr√™ncia encontrada',
        data: {
          nota_fiscal: {
            numero: nroNf,
            info: notaFiscal[0]
          },
          ultima_ocorrencia: ultimaOcorrencia
        }
      });
    } catch (error) {
      logger.error('Erro ao buscar √∫ltima ocorr√™ncia por nota fiscal:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar ocorr√™ncias de uma nota fiscal por c√≥digo
  async getOcorrenciasByNotaFiscalAndCodigo(req, res) {
    try {
      const { nroNf, codigo } = req.params;

      // Verificar se a nota fiscal existe
      const notaFiscal = await this.notasRepository.findByNumero(nroNf);
      if (!notaFiscal || notaFiscal.length === 0) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: `Nota fiscal ${nroNf} n√£o encontrada`
        });
      }

      // Buscar ocorr√™ncias espec√≠ficas
      const ocorrencias = await this.repository.findByNumeroNF(nroNf);
      const ocorrenciasFiltradas = ocorrencias.filter(o => o.codigo == codigo);

      if (ocorrenciasFiltradas.length === 0) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: `Nenhuma ocorr√™ncia encontrada para a nota fiscal ${nroNf} com c√≥digo ${codigo}`
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Ocorr√™ncias encontradas',
        data: {
          nota_fiscal: {
            numero: nroNf,
            info: notaFiscal[0]
          },
          codigo: parseInt(codigo),
          ocorrencias: ocorrenciasFiltradas,
          total: ocorrenciasFiltradas.length
        }
      });
    } catch (error) {
      logger.error('Erro ao buscar ocorr√™ncias por nota fiscal e c√≥digo:', error);
      return this.handleError(res, error);
    }
  }

  // Estat√≠sticas de ocorr√™ncias de uma nota fiscal
  async getOcorrenciasStats(req, res) {
    try {
      const { nroNf } = req.params;

      // Verificar se a nota fiscal existe
      const notaFiscal = await this.notasRepository.findByNumero(nroNf);
      if (!notaFiscal || notaFiscal.length === 0) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: `Nota fiscal ${nroNf} n√£o encontrada`
        });
      }

      // Buscar todas as ocorr√™ncias
      const ocorrencias = await this.repository.findByNumeroNF(nroNf);

      if (ocorrencias.length === 0) {
        return res.status(HTTP_STATUS.OK).json({
          success: true,
          message: 'Estat√≠sticas calculadas',
          data: {
            nota_fiscal: {
              numero: nroNf,
              info: notaFiscal[0]
            },
            stats: {
              total_ocorrencias: 0,
              primeira_ocorrencia: null,
              ultima_ocorrencia: null,
              status_atual: 'Sem ocorr√™ncias',
              finalizadora: false,
              por_codigo: [],
              timeline: []
            }
          }
        });
      }

      // Calcular estat√≠sticas
      const primeiraOcorrencia = ocorrencias[ocorrencias.length - 1]; // Array j√° vem ordenado DESC
      const ultimaOcorrencia = ocorrencias[0];
      
      // Agrupar por c√≥digo
      const porCodigo = {};
      ocorrencias.forEach(oc => {
        if (!porCodigo[oc.codigo]) {
          porCodigo[oc.codigo] = {
            codigo: oc.codigo,
            descricao: oc.codigo_descricao || oc.descricao,
            quantidade: 0,
            finalizadora: oc.finalizadora || false
          };
        }
        porCodigo[oc.codigo].quantidade++;
      });

      // Timeline ordenada
      const timeline = ocorrencias.map(oc => ({
        id: oc.id,
        codigo: oc.codigo,
        descricao: oc.descricao,
        dataHoraEvento: oc.dataHoraEvento,
        dataHoraEnvio: oc.dataHoraEnvio,
        finalizadora: oc.finalizadora || false
      })).reverse(); // Inverter para ordem cronol√≥gica

      const stats = {
        total_ocorrencias: ocorrencias.length,
        primeira_ocorrencia: {
          data: primeiraOcorrencia.dataHoraEvento || primeiraOcorrencia.dataHoraEnvio,
          codigo: primeiraOcorrencia.codigo,
          descricao: primeiraOcorrencia.descricao
        },
        ultima_ocorrencia: {
          data: ultimaOcorrencia.dataHoraEvento || ultimaOcorrencia.dataHoraEnvio,
          codigo: ultimaOcorrencia.codigo,
          descricao: ultimaOcorrencia.descricao
        },
        status_atual: ultimaOcorrencia.descricao,
        finalizadora: ultimaOcorrencia.finalizadora || false,
        por_codigo: Object.values(porCodigo),
        timeline
      };

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Estat√≠sticas calculadas com sucesso',
        data: {
          nota_fiscal: {
            numero: nroNf,
            info: notaFiscal[0]
          },
          stats
        }
      });
    } catch (error) {
      logger.error('Erro ao calcular estat√≠sticas de ocorr√™ncias:', error);
      return this.handleError(res, error);
    }
  }

  // Criar nova ocorr√™ncia para uma nota fiscal
  async createOcorrenciaForNotaFiscal(req, res) {
    try {
      const { nroNf } = req.params;
      const data = req.body;

      // Verificar se a nota fiscal existe
      const notaFiscal = await this.notasRepository.findByNumero(nroNf);
      if (!notaFiscal || notaFiscal.length === 0) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: `Nota fiscal ${nroNf} n√£o encontrada`
        });
      }

      // Adicionar o n√∫mero da NF aos dados
      data.nro_nf = parseInt(nroNf);

      // Validar se ocorr√™ncia j√° existe
      if (data.dataHoraEvento) {
        const existente = await this.repository.findOcorrenciaExistente(
          nroNf, 
          data.codigo, 
          data.dataHoraEvento
        );
        
        if (existente) {
          return res.status(HTTP_STATUS.CONFLICT).json({
            success: false,
            message: 'Ocorr√™ncia j√° existe para esta nota fiscal, c√≥digo e data/hora'
          });
        }
      }

      // Criar ocorr√™ncia
      const ocorrencia = await this.repository.create(data);

      return res.status(HTTP_STATUS.CREATED).json({
        success: true,
        message: 'Ocorr√™ncia criada com sucesso',
        data: {
          nota_fiscal: {
            numero: nroNf,
            info: notaFiscal[0]
          },
          ocorrencia
        }
      });
    } catch (error) {
      logger.error('Erro ao criar ocorr√™ncia para nota fiscal:', error);
      return this.handleError(res, error);
    }
  }

  // Atualizar ocorr√™ncia espec√≠fica
  async updateOcorrencia(req, res) {
    try {
      const { nroNf, ocorrenciaId } = req.params;
      const data = req.body;

      // Verificar se a nota fiscal existe
      const notaFiscal = await this.notasRepository.findByNumero(nroNf);
      if (!notaFiscal || notaFiscal.length === 0) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: `Nota fiscal ${nroNf} n√£o encontrada`
        });
      }

      // Verificar se a ocorr√™ncia existe e pertence √† nota fiscal
      const ocorrenciaExistente = await this.repository.findById(ocorrenciaId);
      if (!ocorrenciaExistente) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Ocorr√™ncia n√£o encontrada'
        });
      }

      if (ocorrenciaExistente.nro_nf != nroNf) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Ocorr√™ncia n√£o pertence √† nota fiscal informada'
        });
      }

      // Atualizar dados
      data.updated_at = new Date();
      const ocorrenciaAtualizada = await this.repository.update(ocorrenciaId, data);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Ocorr√™ncia atualizada com sucesso',
        data: {
          nota_fiscal: {
            numero: nroNf,
            info: notaFiscal[0]
          },
          ocorrencia: ocorrenciaAtualizada
        }
      });
    } catch (error) {
      logger.error('Erro ao atualizar ocorr√™ncia:', error);
      return this.handleError(res, error);
    }
  }

  // Excluir ocorr√™ncia espec√≠fica
  async deleteOcorrencia(req, res) {
    try {
      const { nroNf, ocorrenciaId } = req.params;

      // Verificar se a nota fiscal existe
      const notaFiscal = await this.notasRepository.findByNumero(nroNf);
      if (!notaFiscal || notaFiscal.length === 0) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: `Nota fiscal ${nroNf} n√£o encontrada`
        });
      }

      // Verificar se a ocorr√™ncia existe e pertence √† nota fiscal
      const ocorrenciaExistente = await this.repository.findById(ocorrenciaId);
      if (!ocorrenciaExistente) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Ocorr√™ncia n√£o encontrada'
        });
      }

      if (ocorrenciaExistente.nro_nf != nroNf) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Ocorr√™ncia n√£o pertence √† nota fiscal informada'
        });
      }

      // Excluir ocorr√™ncia
      await this.repository.delete(ocorrenciaId);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Ocorr√™ncia exclu√≠da com sucesso',
        data: {
          nota_fiscal: {
            numero: nroNf
          },
          ocorrencia_id: ocorrenciaId
        }
      });
    } catch (error) {
      logger.error('Erro ao excluir ocorr√™ncia:', error);
      return this.handleError(res, error);
    }
  }
}

module.exports = NotaFiscalOcorrenciasController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\notas-fiscais.controller.js
================================================================================

const BaseController = require('./base.controller');
const NotasFiscaisRepository = require('../repositories/notas-fiscais.repository');
const ClientesRepository = require('../repositories/clientes.repository');
const EmbarcadoresRepository = require('../repositories/embarcadores.repository');
const TransportadorasRepository = require('../repositories/transportadoras.repository');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class NotasFiscaisController extends BaseController {
  constructor() {
    const repository = new NotasFiscaisRepository();
    super(repository);
    this.clientesRepository = new ClientesRepository();
    this.embarcadoresRepository = new EmbarcadoresRepository();
    this.transportadorasRepository = new TransportadorasRepository();
  }

  // Sobrescrever list para incluir relacionamentos
  async list(req, res) {
    try {
      const options = this.buildQueryOptions(req);
      const result = await this.repository.findAllWithStats(options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Notas fiscais recuperadas com sucesso',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error('Erro ao listar notas fiscais:', error);
      return this.handleError(res, error);
    }
  }

  // Sobrescrever get para incluir relacionamentos
  async get(req, res) {
    try {
      const { id } = req.params;
      const notaFiscal = await this.repository.findWithRelations(id);

      if (!notaFiscal) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Nota fiscal n√£o encontrada'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Nota fiscal encontrada',
        data: notaFiscal
      });
    } catch (error) {
      logger.error('Erro ao buscar nota fiscal por ID:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por chave da nota fiscal
  async getByChaveNf(req, res) {
    try {
      const { chave } = req.params;

      if (!chave || chave.length !== 44) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Chave da nota fiscal deve ter 44 caracteres'
        });
      }

      const notaFiscal = await this.repository.findByChaveNf(chave);

      if (!notaFiscal) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Nota fiscal n√£o encontrada'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Nota fiscal encontrada',
        data: notaFiscal
      });
    } catch (error) {
      logger.error('Erro ao buscar nota fiscal por chave:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por chave do CTE
  async getByChaveCte(req, res) {
    try {
      const { chave } = req.params;

      if (!chave || chave.length !== 44) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Chave do CTE deve ter 44 caracteres'
        });
      }

      const notaFiscal = await this.repository.findByChaveCte(chave);

      if (!notaFiscal) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Nota fiscal n√£o encontrada'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Nota fiscal encontrada',
        data: notaFiscal
      });
    } catch (error) {
      logger.error('Erro ao buscar nota fiscal por chave CTE:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por n√∫mero e s√©rie
  async getByNumeroSerie(req, res) {
    try {
      const { numero, serie } = req.params;

      if (!numero || !serie) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'N√∫mero e s√©rie s√£o obrigat√≥rios'
        });
      }

      const notasFiscais = await this.repository.findByNumeroSerie(parseInt(numero), parseInt(serie));

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Notas fiscais encontradas',
        data: notasFiscais
      });
    } catch (error) {
      logger.error('Erro ao buscar nota fiscal por n√∫mero e s√©rie:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar notas fiscais por cliente
  async getByCliente(req, res) {
    try {
      const { clienteId } = req.params;
      const options = this.buildQueryOptions(req);
      
      const result = await this.repository.findByCliente(clienteId, options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Notas fiscais do cliente recuperadas',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error('Erro ao buscar notas fiscais por cliente:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar notas fiscais por romaneio
  async getByRomaneio(req, res) {
    try {
      const { romaneioId } = req.params;
      
      const notasFiscais = await this.repository.findByRomaneio(romaneioId);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Notas fiscais do romaneio recuperadas',
        data: notasFiscais
      });
    } catch (error) {
      logger.error('Erro ao buscar notas fiscais por romaneio:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar notas fiscais pendentes de romaneio
  async getPendentesRomaneio(req, res) {
    try {
      const { transportadoraId } = req.query;
      
      const notasFiscais = await this.repository.findPendentesRomaneio(transportadoraId);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Notas fiscais pendentes de romaneio recuperadas',
        data: notasFiscais
      });
    } catch (error) {
      logger.error('Erro ao buscar notas fiscais pendentes:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar notas fiscais com atraso
  async getComAtraso(req, res) {
    try {
      const notasFiscais = await this.repository.findComAtraso();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Notas fiscais com atraso recuperadas',
        data: notasFiscais
      });
    } catch (error) {
      logger.error('Erro ao buscar notas fiscais com atraso:', error);
      return this.handleError(res, error);
    }
  }

  // Atualizar status
  async updateStatus(req, res) {
    try {
      const { id } = req.params;
      const { status, observacoes } = req.body;

      const existing = await this.repository.findById(id);
      if (!existing) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Nota fiscal n√£o encontrada'
        });
      }

      const notaFiscal = await this.repository.updateStatus(id, status, observacoes);

      logger.info('Status de nota fiscal atualizado:', {
        id,
        status_anterior: existing.status_nf,
        status_novo: status,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Status atualizado com sucesso',
        data: notaFiscal
      });
    } catch (error) {
      logger.error('Erro ao atualizar status da nota fiscal:', error);
      return this.handleError(res, error);
    }
  }

  // Finalizar nota fiscal
  async finalizar(req, res) {
    try {
      const { id } = req.params;
      const { data_entrega, hora_entrega, observacoes } = req.body;

      const existing = await this.repository.findById(id);
      if (!existing) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Nota fiscal n√£o encontrada'
        });
      }

      if (existing.finalizada) {
        return res.status(HTTP_STATUS.CONFLICT).json({
          success: false,
          message: 'Nota fiscal j√° foi finalizada'
        });
      }

      const notaFiscal = await this.repository.finalizar(id, data_entrega, hora_entrega, observacoes);

      logger.info('Nota fiscal finalizada:', {
        id,
        data_entrega,
        hora_entrega,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Nota fiscal finalizada com sucesso',
        data: notaFiscal
      });
    } catch (error) {
      logger.error('Erro ao finalizar nota fiscal:', error);
      return this.handleError(res, error);
    }
  }

  // Associar notas fiscais a romaneio
  async associarRomaneio(req, res) {
    try {
      const { romaneioId } = req.params;
      const { notaIds } = req.body;

      if (!Array.isArray(notaIds) || notaIds.length === 0) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Lista de IDs de notas fiscais √© obrigat√≥ria'
        });
      }

      const notasFiscais = await this.repository.associarRomaneio(notaIds, romaneioId);

      logger.info('Notas fiscais associadas ao romaneio:', {
        romaneio_id: romaneioId,
        nota_ids: notaIds,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Notas fiscais associadas ao romaneio com sucesso',
        data: notasFiscais
      });
    } catch (error) {
      logger.error('Erro ao associar notas fiscais ao romaneio:', error);
      return this.handleError(res, error);
    }
  }

  // Desassociar notas fiscais de romaneio
  async desassociarRomaneio(req, res) {
    try {
      const { notaIds } = req.body;

      if (!Array.isArray(notaIds) || notaIds.length === 0) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Lista de IDs de notas fiscais √© obrigat√≥ria'
        });
      }

      const notasFiscais = await this.repository.desassociarRomaneio(notaIds);

      logger.info('Notas fiscais desassociadas do romaneio:', {
        nota_ids: notaIds,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Notas fiscais desassociadas do romaneio com sucesso',
        data: notasFiscais
      });
    } catch (error) {
      logger.error('Erro ao desassociar notas fiscais do romaneio:', error);
      return this.handleError(res, error);
    }
  }

  // Estat√≠sticas gerais
  async getStats(req, res) {
    try {
      const stats = await this.repository.getStats();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Estat√≠sticas recuperadas com sucesso',
        data: stats
      });
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas de notas fiscais:', error);
      return this.handleError(res, error);
    }
  }

// Alias de compatibilidade com rotas antigas:
// GET /api/notas-fiscais/dashboard/status ‚Üí usa o mesmo c√°lculo do getStats,
// mas entrega num formato j√° ‚Äúpronto para dashboard‚Äù.
async getDashboardByStatus(req, res) {
  try {
    const s = await this.repository.getStats();

    const data = {
      totals: {
        total: Number(s?.total ?? 0),
        valor_total: Number(s?.valor_total ?? 0),
        peso_total: Number(s?.peso_total ?? 0),
      },
      status: [
        { key: 'finalizadas', value: Number(s?.finalizadas ?? 0) },
        { key: 'pendentes',   value: Number(s?.pendentes   ?? 0) },
        { key: 'atrasadas',   value: Number(s?.atrasadas   ?? 0) },
        { key: 'retidas',     value: Number(s?.retidas     ?? 0) },
      ],
      romaneio: [
        { key: 'com_romaneio', value: Number(s?.com_romaneio ?? 0) },
        { key: 'sem_romaneio', value: Number(s?.sem_romaneio ?? 0) },
      ],
      medias: {
        valor_medio: Number(s?.valor_medio ?? 0),
      },
    };

    return res.status(HTTP_STATUS.OK).json({
      success: true,
      message: 'Dashboard de notas fiscais recuperado com sucesso',
      data,
    });
  } catch (error) {
    logger.error('Erro ao obter dashboard de notas fiscais:', error);
    return this.handleError(res, error);
  }
}



  // Estat√≠sticas por per√≠odo
  async getStatsByPeriod(req, res) {
    try {
      const { data_inicio, data_fim } = req.query;

      if (!data_inicio || !data_fim) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Data de in√≠cio e fim s√£o obrigat√≥rias'
        });
      }

      const stats = await this.repository.getStatsByPeriod(data_inicio, data_fim);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Estat√≠sticas por per√≠odo recuperadas',
        data: stats
      });
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas por per√≠odo:', error);
      return this.handleError(res, error);
    }
  }

  // Valida√ß√µes antes de criar
  async beforeCreate(data, req) {
    // Validar se cliente existe
    if (data.cliente_id) {
      const cliente = await this.clientesRepository.findById(data.cliente_id);
      if (!cliente) {
        throw new Error('Cliente n√£o encontrado');
      }
    }

    // Validar se embarcador existe
    if (data.embarcador_id) {
      const embarcador = await this.embarcadoresRepository.findById(data.embarcador_id);
      if (!embarcador) {
        throw new Error('Embarcador n√£o encontrado');
      }
    }

    // Validar se transportadora existe
    if (data.transportadora_id) {
      const transportadora = await this.transportadorasRepository.findById(data.transportadora_id);
      if (!transportadora) {
        throw new Error('Transportadora n√£o encontrada');
      }
    }

    // Validar chave da nota fiscal √∫nica
    if (data.chave_nf) {
      const isUnique = await this.repository.validateUniqueChaveNf(data.chave_nf);
      if (!isUnique) {
        throw new Error('J√° existe uma nota fiscal com esta chave');
      }
    }

    // Validar chave CTE √∫nica
    if (data.chave_cte) {
      const isUnique = await this.repository.validateUniqueChaveCte(data.chave_cte);
      if (!isUnique) {
        throw new Error('J√° existe uma nota fiscal com esta chave CTE');
      }
    }

    // Validar datas
    if (data.emi_nf && new Date(data.emi_nf) > new Date()) {
      throw new Error('Data de emiss√£o n√£o pode ser futura');
    }

    if (data.previsao_entrega && data.emi_nf && new Date(data.previsao_entrega) < new Date(data.emi_nf)) {
      throw new Error('Data de previs√£o de entrega n√£o pode ser anterior √† emiss√£o');
    }

    // Normalizar dados
    if (data.nome_rep) {
      data.nome_rep = data.nome_rep.trim().toUpperCase();
    }

    // Valores padr√£o
    data.finalizada = data.finalizada || false;
    data.roteirizada = data.roteirizada || false;
    data.nf_retida = data.nf_retida || false;
    data.ordem = data.ordem || 0;

    return data;
  }

  // Valida√ß√µes antes de atualizar
  async beforeUpdate(id, data, req) {
    // Validar se cliente existe (se fornecido)
    if (data.cliente_id) {
      const cliente = await this.clientesRepository.findById(data.cliente_id);
      if (!cliente) {
        throw new Error('Cliente n√£o encontrado');
      }
    }

    // Validar se embarcador existe (se fornecido)
    if (data.embarcador_id) {
      const embarcador = await this.embarcadoresRepository.findById(data.embarcador_id);
      if (!embarcador) {
        throw new Error('Embarcador n√£o encontrado');
      }
    }

    // Validar se transportadora existe (se fornecido)
    if (data.transportadora_id) {
      const transportadora = await this.transportadorasRepository.findById(data.transportadora_id);
      if (!transportadora) {
        throw new Error('Transportadora n√£o encontrada');
      }
    }

    // Validar chave da nota fiscal √∫nica (se fornecida)
    if (data.chave_nf) {
      const isUnique = await this.repository.validateUniqueChaveNf(data.chave_nf, id);
      if (!isUnique) {
        throw new Error('J√° existe uma nota fiscal com esta chave');
      }
    }

    // Validar chave CTE √∫nica (se fornecida)
    if (data.chave_cte) {
      const isUnique = await this.repository.validateUniqueChaveCte(data.chave_cte, id);
      if (!isUnique) {
        throw new Error('J√° existe uma nota fiscal com esta chave CTE');
      }
    }

    // Validar se nota n√£o foi finalizada
    const existing = await this.repository.findById(id);
    if (existing && existing.finalizada && data.finalizada === false) {
      throw new Error('N√£o √© poss√≠vel reabrir uma nota fiscal finalizada');
    }

    // Normalizar dados
    if (data.nome_rep) {
      data.nome_rep = data.nome_rep.trim().toUpperCase();
    }

    return data;
  }

  // Valida√ß√µes antes de deletar
  async beforeDelete(id, req) {
    const notaFiscal = await this.repository.findById(id);
    
    if (notaFiscal && notaFiscal.finalizada) {
      throw new Error('N√£o √© poss√≠vel deletar uma nota fiscal finalizada');
    }

    if (notaFiscal && notaFiscal.romaneio_id) {
      throw new Error('N√£o √© poss√≠vel deletar nota fiscal associada a romaneio');
    }

    return true;
  }

  // A√ß√µes ap√≥s criar
  async afterCreate(record, req) {
    logger.info('Nova nota fiscal criada:', {
      id: record.id,
      nro: record.nro,
      chave_nf: record.chave_nf,
      cliente_id: record.cliente_id,
      transportadora_id: record.transportadora_id,
      user_id: req.user?.id
    });

    return record;
  }

  // A√ß√µes ap√≥s atualizar
  async afterUpdate(record, req) {
    logger.info('Nota fiscal atualizada:', {
      id: record.id,
      nro: record.nro,
      user_id: req.user?.id
    });

    return record;
  }

  // A√ß√µes ap√≥s deletar
  async afterDelete(id, req) {
    logger.info('Nota fiscal deletada:', {
      id,
      user_id: req.user?.id
    });

    return true;
  }

  // Tratamento de erros espec√≠ficos
  handleError(res, error) {
    // Erros espec√≠ficos de neg√≥cio
    if (error.message.includes('Cliente n√£o encontrado')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'Cliente inv√°lido',
        error: 'Cliente n√£o encontrado no sistema'
      });
    }

    if (error.message.includes('Embarcador n√£o encontrado')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'Embarcador inv√°lido',
        error: 'Embarcador n√£o encontrado no sistema'
      });
    }

    if (error.message.includes('Transportadora n√£o encontrada')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'Transportadora inv√°lida',
        error: 'Transportadora n√£o encontrada no sistema'
      });
    }

    if (error.message.includes('J√° existe uma nota fiscal')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'Nota fiscal duplicada',
        error: error.message
      });
    }

    if (error.message.includes('nota fiscal finalizada')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'Opera√ß√£o n√£o permitida',
        error: error.message
      });
    }

    if (error.message.includes('associada a romaneio')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'Opera√ß√£o n√£o permitida',
        error: 'Nota fiscal est√° associada a um romaneio'
      });
    }

    // Usar tratamento padr√£o para outros erros
    return super.handleError(res, error);
  }
}

module.exports = NotasFiscaisController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\ocorrencias.controller.js
================================================================================

const BaseController = require('./base.controller');
const OcorrenciasRepository = require('../repositories/ocorrencias.repository');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class OcorrenciasController extends BaseController {
  constructor() {
    const repository = new OcorrenciasRepository();
    super(repository);
  }

  // Sobrescrever list para incluir relacionamentos
  async list(req, res) {
    try {
      const options = this.buildQueryOptions(req);
      const result = await this.repository.findAllWithRelations(options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'C√≥digos de ocorr√™ncias recuperados com sucesso',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error('Erro ao listar c√≥digos de ocorr√™ncias:', error);
      return this.handleError(res, error);
    }
  }

  // Sobrescrever get para incluir relacionamentos
  async get(req, res) {
    try {
      const { id } = req.params;
      const ocorrencia = await this.repository.findWithRelations(id);

      if (!ocorrencia) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'C√≥digo de ocorr√™ncia n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'C√≥digo de ocorr√™ncia encontrado',
        data: ocorrencia
      });
    } catch (error) {
      logger.error('Erro ao buscar c√≥digo de ocorr√™ncia por ID:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por c√≥digo
  async getByCodigo(req, res) {
    try {
      const { codigo } = req.params;

      if (!codigo || isNaN(codigo)) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'C√≥digo inv√°lido'
        });
      }

      const ocorrencia = await this.repository.findByCodigo(parseInt(codigo));

      if (!ocorrencia) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'C√≥digo de ocorr√™ncia n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'C√≥digo de ocorr√™ncia encontrado',
        data: ocorrencia
      });
    } catch (error) {
      logger.error('Erro ao buscar c√≥digo de ocorr√™ncia por c√≥digo:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por tipo
  async getByTipo(req, res) {
    try {
      const { tipo } = req.params;

      if (!tipo) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Tipo √© obrigat√≥rio'
        });
      }

      const ocorrencias = await this.repository.findByTipo(tipo);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'C√≥digos de ocorr√™ncias encontrados',
        data: ocorrencias
      });
    } catch (error) {
      logger.error('Erro ao buscar c√≥digos de ocorr√™ncias por tipo:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por processo
  async getByProcesso(req, res) {
    try {
      const { processo } = req.params;

      if (!processo) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Processo √© obrigat√≥rio'
        });
      }

      const ocorrencias = await this.repository.findByProcesso(processo);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'C√≥digos de ocorr√™ncias encontrados',
        data: ocorrencias
      });
    } catch (error) {
      logger.error('Erro ao buscar c√≥digos de ocorr√™ncias por processo:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar finalizadoras
  async getFinalizadoras(req, res) {
    try {
      const ocorrencias = await this.repository.findFinalizadoras();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'C√≥digos de ocorr√™ncias finalizadoras',
        data: ocorrencias
      });
    } catch (error) {
      logger.error('Erro ao buscar c√≥digos finalizadores:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar ativas para API
  async getAtivasApi(req, res) {
    try {
      const ocorrencias = await this.repository.findAtivasApi();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'C√≥digos de ocorr√™ncias ativas para API',
        data: ocorrencias
      });
    } catch (error) {
      logger.error('Erro ao buscar c√≥digos ativos para API:', error);
      return this.handleError(res, error);
    }
  }

  // Estat√≠sticas dos c√≥digos de ocorr√™ncias
  async getStats(req, res) {
    try {
      const stats = await this.repository.getStats();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Estat√≠sticas obtidas com sucesso',
        data: stats
      });
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas dos c√≥digos:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por descri√ß√£o
  async search(req, res) {
    try {
      const { q, limit = 20 } = req.query;

      if (!q || q.length < 2) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Termo de busca deve ter pelo menos 2 caracteres'
        });
      }

      const ocorrencias = await this.repository.searchByDescricao(q, limit);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Busca realizada com sucesso',
        data: ocorrencias
      });
    } catch (error) {
      logger.error('Erro na busca por descri√ß√£o:', error);
      return this.handleError(res, error);
    }
  }

  // Ativar/desativar para API
  async toggleApi(req, res) {
    try {
      const { id } = req.params;

      const ocorrencia = await this.repository.findById(id);
      if (!ocorrencia) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'C√≥digo de ocorr√™ncia n√£o encontrado'
        });
      }

      await this.repository.update(id, { 
        api: !ocorrencia.api 
      });

      logger.info('Status API atualizado:', {
        id,
        novo_status: !ocorrencia.api,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Status da API atualizado com sucesso',
        data: { api: !ocorrencia.api }
      });
    } catch (error) {
      logger.error('Erro ao atualizar status da API:', error);
      return this.handleError(res, error);
    }
  }

  // Marcar/desmarcar como finalizadora
  async toggleFinalizadora(req, res) {
    try {
      const { id } = req.params;

      const ocorrencia = await this.repository.findById(id);
      if (!ocorrencia) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'C√≥digo de ocorr√™ncia n√£o encontrado'
        });
      }

      await this.repository.update(id, { 
        finalizadora: !ocorrencia.finalizadora 
      });

      logger.info('Status finalizadora atualizado:', {
        id,
        novo_status: !ocorrencia.finalizadora,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Status finalizadora atualizado com sucesso',
        data: { finalizadora: !ocorrencia.finalizadora }
      });
    } catch (error) {
      logger.error('Erro ao atualizar status finalizadora:', error);
      return this.handleError(res, error);
    }
  }

  // Valida√ß√µes antes de criar
  async beforeCreate(data, req) {
    // Validar c√≥digo √∫nico
    if (data.codigo) {
      const existingOcorrencia = await this.repository.findByCodigo(data.codigo);
      if (existingOcorrencia) {
        throw new Error('J√° existe um c√≥digo de ocorr√™ncia com este n√∫mero');
      }
    }

    // Normalizar dados
    if (data.descricao) data.descricao = data.descricao.trim();
    if (data.tipo) data.tipo = data.tipo.trim().toLowerCase();
    if (data.processo) data.processo = data.processo.trim().toLowerCase();

    // Definir valores padr√£o
    if (data.finalizadora === undefined) data.finalizadora = false;
    if (data.api === undefined) data.api = true;

    // Validar valores de tipo
    const tiposValidos = ['entrega', 'coleta', 'ocorrencia', 'status', 'informativo'];
    if (data.tipo && !tiposValidos.includes(data.tipo)) {
      throw new Error(`Tipo deve ser um dos seguintes: ${tiposValidos.join(', ')}`);
    }

    // Validar valores de processo
    const processosValidos = ['transporte', 'entrega', 'coleta', 'finalizacao', 'cancelamento', 'informativo'];
    if (data.processo && !processosValidos.includes(data.processo)) {
      throw new Error(`Processo deve ser um dos seguintes: ${processosValidos.join(', ')}`);
    }

    return data;
  }

  // Valida√ß√µes antes de atualizar
  async beforeUpdate(id, data, req) {
    // Validar c√≥digo √∫nico se fornecido (excluindo o registro atual)
    if (data.codigo) {
      const existingOcorrencia = await this.repository.findByCodigo(data.codigo);
      if (existingOcorrencia && existingOcorrencia.id !== parseInt(id)) {
        throw new Error('J√° existe um c√≥digo de ocorr√™ncia com este n√∫mero');
      }
    }

    // Normalizar dados
    if (data.descricao) data.descricao = data.descricao.trim();
    if (data.tipo) data.tipo = data.tipo.trim().toLowerCase();
    if (data.processo) data.processo = data.processo.trim().toLowerCase();

    // Validar valores de tipo
    const tiposValidos = ['entrega', 'coleta', 'ocorrencia', 'status', 'informativo'];
    if (data.tipo && !tiposValidos.includes(data.tipo)) {
      throw new Error(`Tipo deve ser um dos seguintes: ${tiposValidos.join(', ')}`);
    }

    // Validar valores de processo
    const processosValidos = ['transporte', 'entrega', 'coleta', 'finalizacao', 'cancelamento', 'informativo'];
    if (data.processo && !processosValidos.includes(data.processo)) {
      throw new Error(`Processo deve ser um dos seguintes: ${processosValidos.join(', ')}`);
    }

    return data;
  }

  // Valida√ß√µes antes de deletar
  async beforeDelete(id, req) {
    // Verificar se c√≥digo est√° sendo usado em transportadoras
    const transportadorasVinculadas = await this.repository.findTransportadorasVinculadas(id);
    if (transportadorasVinculadas.length > 0) {
      throw new Error('N√£o √© poss√≠vel deletar c√≥digo que est√° vinculado a transportadoras');
    }

    return true;
  }

  // A√ß√µes ap√≥s criar
  async afterCreate(record, req) {
    logger.info('C√≥digo de ocorr√™ncia criado:', {
      id: record.id,
      codigo: record.codigo,
      user_id: req.user?.id
    });

    return record;
  }

  // A√ß√µes ap√≥s atualizar
  async afterUpdate(id, record, req) {
    logger.info('C√≥digo de ocorr√™ncia atualizado:', {
      id,
      user_id: req.user?.id
    });

    return record;
  }

  // A√ß√µes ap√≥s deletar
  async afterDelete(id, req) {
    logger.info('C√≥digo de ocorr√™ncia deletado:', {
      id,
      user_id: req.user?.id
    });

    return true;
  }

  // Tratamento de erros espec√≠ficos
  handleError(res, error) {
    // Erros espec√≠ficos de neg√≥cio
    if (error.message.includes('J√° existe um c√≥digo')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'C√≥digo duplicado',
        error: error.message
      });
    }

    if (error.message.includes('Tipo deve ser um dos seguintes')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'Tipo inv√°lido',
        error: error.message
      });
    }

    if (error.message.includes('Processo deve ser um dos seguintes')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'Processo inv√°lido',
        error: error.message
      });
    }

    if (error.message.includes('vinculado a transportadoras')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'Opera√ß√£o n√£o permitida',
        error: 'C√≥digo est√° vinculado a transportadoras'
      });
    }

    // Usar tratamento padr√£o para outros erros
    return super.handleError(res, error);
  }
}

module.exports = OcorrenciasController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\romaneios.controller.js
================================================================================

const BaseController = require('./base.controller');
const RomaneiosRepository = require('../repositories/romaneios.repository');
const MotoristasRepository = require('../repositories/motoristas.repository');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class RomaneiosController extends BaseController {
  constructor() {
    const repository = new RomaneiosRepository();
    super(repository);
    this.motoristasRepository = new MotoristasRepository();
  }

  // Sobrescrever list para incluir relacionamentos
  async list(req, res) {
    try {
      const options = this.buildQueryOptions(req);
      const result = await this.repository.findAllWithRelations(options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Romaneios recuperados com sucesso',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error('Erro ao listar romaneios:', error);
      return this.handleError(res, error);
    }
  }

  // Sobrescrever get para incluir relacionamentos
  async get(req, res) {
    try {
      const { id } = req.params;
      const romaneio = await this.repository.findWithRelations(id);

      if (!romaneio) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Romaneio n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Romaneio encontrado',
        data: romaneio
      });
    } catch (error) {
      logger.error('Erro ao buscar romaneio por ID:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por n√∫mero
  async getByNumero(req, res) {
    try {
      const { numero } = req.params;

      if (!numero || isNaN(numero)) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'N√∫mero do romaneio inv√°lido'
        });
      }

      const romaneio = await this.repository.findByNumero(parseInt(numero));

      if (!romaneio) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Romaneio n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Romaneio encontrado',
        data: romaneio
      });
    } catch (error) {
      logger.error('Erro ao buscar romaneio por n√∫mero:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por placa do cavalo
  async getByPlacaCavalo(req, res) {
    try {
      const { placa } = req.params;

      if (!placa || placa.length < 7) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Placa inv√°lida'
        });
      }

      const romaneios = await this.repository.findByPlacaCavalo(placa.toUpperCase());

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Romaneios encontrados',
        data: romaneios
      });
    } catch (error) {
      logger.error('Erro ao buscar romaneios por placa do cavalo:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por motorista
  async getByMotorista(req, res) {
    try {
      const { motorista_id } = req.params;

      if (!motorista_id || isNaN(motorista_id)) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'ID do motorista inv√°lido'
        });
      }

      const romaneios = await this.repository.findByMotorista(parseInt(motorista_id));

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Romaneios do motorista encontrados',
        data: romaneios
      });
    } catch (error) {
      logger.error('Erro ao buscar romaneios por motorista:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por status de roteiriza√ß√£o
  async getByRoteirizacao(req, res) {
    try {
      const { status } = req.params;
      
      const validStatus = ['manual', 'automatica', 'otimizada'];
      if (!validStatus.includes(status)) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Status de roteiriza√ß√£o inv√°lido',
          validValues: validStatus
        });
      }

      const romaneios = await this.repository.findByRoteirizacao(status);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Romaneios encontrados',
        data: romaneios
      });
    } catch (error) {
      logger.error('Erro ao buscar romaneios por roteiriza√ß√£o:', error);
      return this.handleError(res, error);
    }
  }

  // Estat√≠sticas dos romaneios
  async getStats(req, res) {
    try {
      const stats = await this.repository.getStats();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Estat√≠sticas obtidas com sucesso',
        data: stats
      });
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas dos romaneios:', error);
      return this.handleError(res, error);
    }
  }

  // Notas fiscais do romaneio
  async getNotasFiscais(req, res) {
    try {
      const { id } = req.params;

      const notasFiscais = await this.repository.findNotasFiscais(id);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Notas fiscais do romaneio obtidas com sucesso',
        data: notasFiscais
      });
    } catch (error) {
      logger.error('Erro ao obter notas fiscais do romaneio:', error);
      return this.handleError(res, error);
    }
  }

  // Atualizar rotas do romaneio
  async updateRotas(req, res) {
    try {
      const { id } = req.params;
      const { rotas, markers, maplink_info } = req.body;

      const romaneio = await this.repository.findById(id);
      if (!romaneio) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Romaneio n√£o encontrado'
        });
      }

      const updateData = {};
      if (rotas !== undefined) updateData.rotas = rotas;
      if (markers !== undefined) updateData.markers = markers;
      if (maplink_info !== undefined) updateData.maplink_info = maplink_info;

      await this.repository.update(id, updateData);

      logger.info('Rotas do romaneio atualizadas:', {
        id,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Rotas atualizadas com sucesso'
      });
    } catch (error) {
      logger.error('Erro ao atualizar rotas do romaneio:', error);
      return this.handleError(res, error);
    }
  }

  // Marcar/desmarcar para roteirizar
  async toggleRoteirizar(req, res) {
    try {
      const { id } = req.params;

      const romaneio = await this.repository.findById(id);
      if (!romaneio) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Romaneio n√£o encontrado'
        });
      }

      await this.repository.update(id, { 
        roteirizar: !romaneio.roteirizar 
      });

      logger.info('Status de roteiriza√ß√£o atualizado:', {
        id,
        novo_status: !romaneio.roteirizar,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Status de roteiriza√ß√£o atualizado com sucesso',
        data: { roteirizar: !romaneio.roteirizar }
      });
    } catch (error) {
      logger.error('Erro ao atualizar status de roteiriza√ß√£o:', error);
      return this.handleError(res, error);
    }
  }

  // Valida√ß√µes antes de criar
  async beforeCreate(data, req) {
    // Validar se motorista existe
    if (data.motorista_id) {
      const motorista = await this.motoristasRepository.findById(data.motorista_id);
      if (!motorista) {
        throw new Error('Motorista n√£o encontrado');
      }
    }

    // Validar n√∫mero √∫nico se fornecido
    if (data.numero) {
      const existingRomaneio = await this.repository.findByNumero(data.numero);
      if (existingRomaneio) {
        throw new Error('J√° existe um romaneio com este n√∫mero');
      }
    }

    // Normalizar dados
    if (data.placa_cavalo) {
      data.placa_cavalo = data.placa_cavalo.toUpperCase().replace(/[^A-Z0-9]/g, '');
    }
    if (data.placa_carreta) {
      data.placa_carreta = data.placa_carreta.toUpperCase().replace(/[^A-Z0-9]/g, '');
    }
    if (data.unidade) data.unidade = data.unidade.trim();
    if (data.doca) data.doca = data.doca.trim();

    // Definir valores padr√£o
    if (!data.roteirizacao) data.roteirizacao = 'manual';
    if (data.roteirizar === undefined) data.roteirizar = false;

    return data;
  }

  // Valida√ß√µes antes de atualizar
  async beforeUpdate(id, data, req) {
    // Validar motorista se fornecido
    if (data.motorista_id) {
      const motorista = await this.motoristasRepository.findById(data.motorista_id);
      if (!motorista) {
        throw new Error('Motorista n√£o encontrado');
      }
    }

    // Validar n√∫mero √∫nico se fornecido (excluindo o registro atual)
    if (data.numero) {
      const existingRomaneio = await this.repository.findByNumero(data.numero);
      if (existingRomaneio && existingRomaneio.id !== parseInt(id)) {
        throw new Error('J√° existe um romaneio com este n√∫mero');
      }
    }

    // Normalizar dados
    if (data.placa_cavalo) {
      data.placa_cavalo = data.placa_cavalo.toUpperCase().replace(/[^A-Z0-9]/g, '');
    }
    if (data.placa_carreta) {
      data.placa_carreta = data.placa_carreta.toUpperCase().replace(/[^A-Z0-9]/g, '');
    }
    if (data.unidade) data.unidade = data.unidade.trim();
    if (data.doca) data.doca = data.doca.trim();

    return data;
  }

  // Valida√ß√µes antes de deletar
  async beforeDelete(id, req) {
    // Verificar se h√° notas fiscais associadas
    const notasFiscais = await this.repository.findNotasFiscais(id);
    if (notasFiscais.length > 0) {
      throw new Error('N√£o √© poss√≠vel deletar romaneio com notas fiscais associadas');
    }

    return true;
  }

  // A√ß√µes ap√≥s criar
  async afterCreate(record, req) {
    logger.info('Romaneio criado:', {
      id: record.id,
      numero: record.numero,
      user_id: req.user?.id
    });

    return record;
  }

  // A√ß√µes ap√≥s atualizar
  async afterUpdate(id, record, req) {
    logger.info('Romaneio atualizado:', {
      id,
      user_id: req.user?.id
    });

    return record;
  }

  // A√ß√µes ap√≥s deletar
  async afterDelete(id, req) {
    logger.info('Romaneio deletado:', {
      id,
      user_id: req.user?.id
    });

    return true;
  }

  // Tratamento de erros espec√≠ficos
  handleError(res, error) {
    // Erros espec√≠ficos de neg√≥cio
    if (error.message.includes('Motorista n√£o encontrado')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'Motorista inv√°lido',
        error: 'Motorista n√£o encontrado no sistema'
      });
    }

    if (error.message.includes('J√° existe um romaneio')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'Romaneio duplicado',
        error: error.message
      });
    }

    if (error.message.includes('notas fiscais associadas')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'Opera√ß√£o n√£o permitida',
        error: 'Romaneio possui notas fiscais associadas'
      });
    }

    // Usar tratamento padr√£o para outros erros
    return super.handleError(res, error);
  }
}

module.exports = RomaneiosController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\transportadora-codigo-ocorrencia.controller.js
================================================================================

// controllers/transportadora-codigo-ocorrencia.controller.js
const BaseController = require('./base.controller');
const TransportadoraCodigoOcorrenciaRepository = require('../repositories/transportadora-codigo-ocorrencia.repository');
const TransportadorasRepository = require('../repositories/transportadoras.repository');
const OcorrenciasRepository = require('../repositories/ocorrencias.repository');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class TransportadoraCodigoOcorrenciaController extends BaseController {
  constructor() {
    const repository = new TransportadoraCodigoOcorrenciaRepository();
    super(repository);
    this.transportadorasRepository = new TransportadorasRepository();
    this.ocorrenciasRepository = new OcorrenciasRepository();
  }

  // Sobrescrever list para incluir relacionamentos
  async list(req, res) {
    try {
      const options = this.buildQueryOptions(req);
      const result = await this.repository.findAllWithRelations(options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'V√≠nculos transportadora-c√≥digo recuperados com sucesso',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error('Erro ao listar v√≠nculos:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por transportadora
  async getByTransportadora(req, res) {
    try {
      const { transportadoraId } = req.params;
      const options = this.buildQueryOptions(req);

      const result = await this.repository.findByTransportadora(transportadoraId, options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'C√≥digos da transportadora recuperados',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error('Erro ao buscar c√≥digos por transportadora:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por c√≥digo de ocorr√™ncia
  async getByCodigoOcorrencia(req, res) {
    try {
      const { codigoOcorrencia } = req.params;
      const options = this.buildQueryOptions(req);

      const result = await this.repository.findByCodigoOcorrencia(codigoOcorrencia, options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Transportadoras do c√≥digo recuperadas',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error('Erro ao buscar transportadoras por c√≥digo:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar v√≠nculo espec√≠fico
  async getVinculo(req, res) {
    try {
      const { transportadoraId, codigoOcorrencia } = req.params;

      const vinculo = await this.repository.findVinculo(transportadoraId, codigoOcorrencia);

      if (!vinculo) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'V√≠nculo n√£o encontrado'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'V√≠nculo encontrado',
        data: vinculo
      });
    } catch (error) {
      logger.error('Erro ao buscar v√≠nculo espec√≠fico:', error);
      return this.handleError(res, error);
    }
  }

  // Criar m√∫ltiplos v√≠nculos
  async createMultiple(req, res) {
    try {
      const { vinculos } = req.body;

      if (!Array.isArray(vinculos) || vinculos.length === 0) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Lista de v√≠nculos √© obrigat√≥ria'
        });
      }

      // Validar cada v√≠nculo
      for (const vinculo of vinculos) {
        await this.beforeCreate(vinculo, req);
      }

      const result = await this.repository.createMultiple(vinculos);

      logger.info('M√∫ltiplos v√≠nculos criados:', {
        quantidade: result.length,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.CREATED).json({
        success: true,
        message: 'V√≠nculos criados com sucesso',
        data: result
      });
    } catch (error) {
      logger.error('Erro ao criar m√∫ltiplos v√≠nculos:', error);
      return this.handleError(res, error);
    }
  }

  // Deletar v√≠nculos por transportadora
  async deleteByTransportadora(req, res) {
    try {
      const { transportadoraId } = req.params;

      const transportadora = await this.transportadorasRepository.findById(transportadoraId);
      if (!transportadora) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Transportadora n√£o encontrada'
        });
      }

      const result = await this.repository.deleteByTransportadora(transportadoraId);

      logger.info('V√≠nculos deletados por transportadora:', {
        transportadora_id: transportadoraId,
        quantidade: result.length,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'V√≠nculos deletados com sucesso',
        data: { deletados: result.length }
      });
    } catch (error) {
      logger.error('Erro ao deletar v√≠nculos por transportadora:', error);
      return this.handleError(res, error);
    }
  }

  // Deletar v√≠nculos por c√≥digo
  async deleteByCodigoOcorrencia(req, res) {
    try {
      const { codigoOcorrencia } = req.params;

      const ocorrencia = await this.ocorrenciasRepository.findByCodigo(codigoOcorrencia);
      if (!ocorrencia) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'C√≥digo de ocorr√™ncia n√£o encontrado'
        });
      }

      const result = await this.repository.deleteByCodigoOcorrencia(codigoOcorrencia);

      logger.info('V√≠nculos deletados por c√≥digo:', {
        codigo_ocorrencia: codigoOcorrencia,
        quantidade: result.length,
        user_id: req.user?.id
      });

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'V√≠nculos deletados com sucesso',
        data: { deletados: result.length }
      });
    } catch (error) {
      logger.error('Erro ao deletar v√≠nculos por c√≥digo:', error);
      return this.handleError(res, error);
    }
  }

  // Estat√≠sticas
  async getStats(req, res) {
    try {
      const stats = await this.repository.getStats();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Estat√≠sticas obtidas com sucesso',
        data: stats
      });
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas:', error);
      return this.handleError(res, error);
    }
  }

  // Valida√ß√µes antes de criar
  async beforeCreate(data, req) {
    // Validar se transportadora existe
    if (data.transportadora_id) {
      const transportadora = await this.transportadorasRepository.findById(data.transportadora_id);
      if (!transportadora) {
        throw new Error('Transportadora n√£o encontrada');
      }
    }

    // Validar se c√≥digo de ocorr√™ncia existe
    if (data.codigo_ocorrencia_codigo) {
      const ocorrencia = await this.ocorrenciasRepository.findByCodigo(data.codigo_ocorrencia_codigo);
      if (!ocorrencia) {
        throw new Error('C√≥digo de ocorr√™ncia n√£o encontrado');
      }
    }

    // Validar se v√≠nculo j√° existe
    if (data.transportadora_id && data.codigo_ocorrencia_codigo) {
      const exists = await this.repository.existsVinculo(data.transportadora_id, data.codigo_ocorrencia_codigo);
      if (exists) {
        throw new Error('V√≠nculo j√° existe');
      }
    }

    // Validar c√≥digo
    if (!data.codigo) {
      throw new Error('C√≥digo √© obrigat√≥rio');
    }

    // Normalizar dados
    if (data.descricao) {
      data.descricao = data.descricao.trim();
    }

    return data;
  }

  // Valida√ß√µes antes de atualizar
  async beforeUpdate(id, data, req) {
    const existing = await this.repository.findById(id);
    if (!existing) {
      throw new Error('V√≠nculo n√£o encontrado');
    }

    // Validar se transportadora existe (se fornecida)
    if (data.transportadora_id && data.transportadora_id !== existing.transportadora_id) {
      const transportadora = await this.transportadorasRepository.findById(data.transportadora_id);
      if (!transportadora) {
        throw new Error('Transportadora n√£o encontrada');
      }
    }

    // Validar se c√≥digo de ocorr√™ncia existe (se fornecido)
    if (data.codigo_ocorrencia_codigo && data.codigo_ocorrencia_codigo !== existing.codigo_ocorrencia_codigo) {
      const ocorrencia = await this.ocorrenciasRepository.findByCodigo(data.codigo_ocorrencia_codigo);
      if (!ocorrencia) {
        throw new Error('C√≥digo de ocorr√™ncia n√£o encontrado');
      }

      // Validar se novo v√≠nculo j√° existe
      const transportadoraId = data.transportadora_id || existing.transportadora_id;
      const exists = await this.repository.existsVinculo(transportadoraId, data.codigo_ocorrencia_codigo);
      if (exists) {
        throw new Error('V√≠nculo j√° existe');
      }
    }

    // Normalizar dados
    if (data.descricao) {
      data.descricao = data.descricao.trim();
    }

    return data;
  }

  // Tratamento de erros espec√≠ficos
  handleError(res, error) {
    if (error.message.includes('Transportadora n√£o encontrada')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'Transportadora inv√°lida',
        error: error.message
      });
    }

    if (error.message.includes('C√≥digo de ocorr√™ncia n√£o encontrado')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'C√≥digo de ocorr√™ncia inv√°lido',
        error: error.message
      });
    }

    if (error.message.includes('V√≠nculo j√° existe')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'V√≠nculo duplicado',
        error: error.message
      });
    }

    return super.handleError(res, error);
  }
}

module.exports = TransportadoraCodigoOcorrenciaController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\transportadoras.controller.js
================================================================================

const BaseController = require('./base.controller');
const TransportadorasRepository = require('../repositories/transportadoras.repository');
const { validateCNPJ } = require('../utils/validators');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class TransportadorasController extends BaseController {
  constructor() {
    const repository = new TransportadorasRepository();
    super(repository);
  }

  // Sobrescrever list para incluir estat√≠sticas
  async list(req, res) {
    try {
      const options = this.buildQueryOptions(req);
      const result = await this.repository.findAllWithStats(options);

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Transportadoras recuperadas com sucesso',
        data: result.data,
        pagination: result.pagination
      });
    } catch (error) {
      logger.error('Erro ao listar transportadoras:', error);
      return this.handleError(res, error);
    }
  }

  // Sobrescrever get para incluir estat√≠sticas
  async get(req, res) {
    try {
      const { id } = req.params;
      const transportadora = await this.repository.findWithRomaneiosCount(id);

      if (!transportadora) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Transportadora n√£o encontrada'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Transportadora encontrada',
        data: transportadora
      });
    } catch (error) {
      logger.error('Erro ao buscar transportadora por ID:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por CNPJ
  async getByCnpj(req, res) {
    try {
      const { cnpj } = req.params;

      if (!validateCNPJ(cnpj)) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'CNPJ inv√°lido'
        });
      }

      const transportadora = await this.repository.findByCnpj(cnpj);

      if (!transportadora) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          message: 'Transportadora n√£o encontrada'
        });
      }

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Transportadora encontrada',
        data: transportadora
      });
    } catch (error) {
      logger.error('Erro ao buscar transportadora por CNPJ:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por nome (autocomplete)
  async search(req, res) {
    try {
      const { q: searchTerm, limit = 10 } = req.query;

      if (!searchTerm || searchTerm.length < 2) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Termo de busca deve ter pelo menos 2 caracteres'
        });
      }

      const transportadoras = await this.repository.searchByName(searchTerm, parseInt(limit));

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Busca realizada com sucesso',
        data: transportadoras
      });
    } catch (error) {
      logger.error('Erro ao buscar transportadoras por nome:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar por UF
  async getByUf(req, res) {
    try {
      const { uf } = req.params;

      if (!uf || uf.length !== 2) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'UF deve ter 2 caracteres'
        });
      }

      const transportadoras = await this.repository.findByUf(uf.toUpperCase());

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Transportadoras encontradas',
        data: transportadoras
      });
    } catch (error) {
      logger.error('Erro ao buscar transportadoras por UF:', error);
      return this.handleError(res, error);
    }
  }

  // Buscar transportadoras para integra√ß√£o
  async getForIntegration(req, res) {
    try {
      const transportadoras = await this.repository.findActiveForIntegration();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Transportadoras para integra√ß√£o recuperadas',
        data: transportadoras
      });
    } catch (error) {
      logger.error('Erro ao buscar transportadoras para integra√ß√£o:', error);
      return this.handleError(res, error);
    }
  }

  // Estat√≠sticas gerais
  async getStats(req, res) {
    try {
      const stats = await this.repository.getStats();

      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Estat√≠sticas recuperadas com sucesso',
        data: stats
      });
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas de transportadoras:', error);
      return this.handleError(res, error);
    }
  }

  // Valida√ß√µes antes de criar
  async beforeCreate(data, req) {
    // Validar CNPJ
    if (!data.cnpj || !validateCNPJ(data.cnpj)) {
      throw new Error('CNPJ inv√°lido');
    }

    // Verificar se CNPJ j√° existe
    const isUnique = await this.repository.validateUniqueCnpj(data.cnpj);
    if (!isUnique) {
      throw new Error('J√° existe uma transportadora com este CNPJ');
    }

    // Normalizar dados
    data.cnpj = data.cnpj.replace(/\D/g, ''); // Apenas n√∫meros
    data.nome = data.nome.trim().toUpperCase();
    data.uf = data.uf?.trim().toUpperCase();
    data.municipio = data.municipio?.trim();

    return data;
  }

  // Valida√ß√µes antes de atualizar
  async beforeUpdate(id, data, req) {
    // Validar CNPJ se fornecido
    if (data.cnpj) {
      if (!validateCNPJ(data.cnpj)) {
        throw new Error('CNPJ inv√°lido');
      }

      // Verificar se CNPJ j√° existe (excluindo o registro atual)
      const isUnique = await this.repository.validateUniqueCnpj(data.cnpj, id);
      if (!isUnique) {
        throw new Error('J√° existe uma transportadora com este CNPJ');
      }

      data.cnpj = data.cnpj.replace(/\D/g, ''); // Apenas n√∫meros
    }

    // Normalizar dados
    if (data.nome) {
      data.nome = data.nome.trim().toUpperCase();
    }
    if (data.uf) {
      data.uf = data.uf.trim().toUpperCase();
    }
    if (data.municipio) {
      data.municipio = data.municipio.trim();
    }

    return data;
  }

  // Valida√ß√µes antes de deletar
  async beforeDelete(id, req) {
    // Verificar se tem romaneios associados
    const transportadora = await this.repository.findWithRomaneiosCount(id);
    
    if (transportadora && parseInt(transportadora.total_romaneios) > 0) {
      throw new Error('N√£o √© poss√≠vel deletar transportadora com romaneios associados');
    }

    return true;
  }

  // A√ß√µes ap√≥s criar
  async afterCreate(record, req) {
    logger.info('Nova transportadora criada:', {
      id: record.id,
      nome: record.nome,
      cnpj: record.cnpj,
      user_id: req.user?.id
    });

    return record;
  }

  // A√ß√µes ap√≥s atualizar
  async afterUpdate(record, req) {
    logger.info('Transportadora atualizada:', {
      id: record.id,
      nome: record.nome,
      user_id: req.user?.id
    });

    return record;
  }

  // A√ß√µes ap√≥s deletar
  async afterDelete(id, req) {
    logger.info('Transportadora deletada:', {
      id,
      user_id: req.user?.id
    });

    return true;
  }

  // Tratamento de erros espec√≠ficos
  handleError(res, error) {
    // Erros espec√≠ficos de neg√≥cio
    if (error.message.includes('CNPJ inv√°lido')) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        message: 'CNPJ inv√°lido',
        error: 'Formato de CNPJ incorreto'
      });
    }

    if (error.message.includes('J√° existe uma transportadora')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'CNPJ j√° cadastrado',
        error: 'J√° existe uma transportadora com este CNPJ'
      });
    }

    if (error.message.includes('romaneios associados')) {
      return res.status(HTTP_STATUS.CONFLICT).json({
        success: false,
        message: 'N√£o √© poss√≠vel deletar',
        error: 'Transportadora possui romaneios associados'
      });
    }

    // Usar tratamento padr√£o para outros erros
    return super.handleError(res, error);
  }
}

module.exports = TransportadorasController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\controllers\webhook.controller.js
================================================================================

// ==========================================
// WEBHOOK CONTROLLER REFATORADO - USANDO PATTERN EXISTENTE
// ==========================================
// backend/src/controllers/webhook.controller.js

const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');
const WebhookService = require('../services/webhook.service');
const IntegrationFactory = require('../services/integrations/integration-factory');

class WebhookController {
  constructor() {
    this.service = new WebhookService();
  }

  // ==========================================
  // M√âTODO √öNICO USANDO INTEGRATION FACTORY EXISTENTE
  // ==========================================
  async handleTransportadoraWebhook(req, res) {
    try {
      const { transportadora } = req.params || req.transportadora || 'generic';
      
      logger.info('Webhook recebido:', {
        transportadora: transportadora,
        ip: req.ip,
        contentLength: req.get('Content-Length'),
        userAgent: req.get('User-Agent')
      });

      // 1. Usar IntegrationFactory existente para obter o service
      const integrationService = this.getIntegrationService(transportadora);
      
      // 2. Transformar dados de webhook usando o service de integra√ß√£o
      const transformedData = await this.transformWebhookData(integrationService, req.body, transportadora);
      
      // 3. Processar dados usando WebhookService
      const result = await this.processTransformedData(transformedData);

      // 4. Resposta padronizada
      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: `Webhook ${transportadora} processado com sucesso`,
        transportadora: transportadora,
        timestamp: new Date().toISOString(),
        data: result
      });

    } catch (error) {
      logger.error('Erro ao processar webhook:', {
        transportadora: req.params?.transportadora,
        error: error.message,
        stack: error.stack
      });
      
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: error.message || 'Erro interno do servidor',
        timestamp: new Date().toISOString()
      });
    }
  }

  // Obter service de integra√ß√£o usando Factory existente
  getIntegrationService(transportadora) {
    try {
      // Tentar usar o IntegrationFactory existente
      if (IntegrationFactory.getAvailableServices().includes(transportadora)) {
        return IntegrationFactory.create(transportadora);
      }
      
      // Se n√£o existe, retorna null para usar transforma√ß√£o gen√©rica
      return null;
    } catch (error) {
      logger.warn(`Service de integra√ß√£o n√£o encontrado para ${transportadora}:`, error.message);
      return null;
    }
  }

  // Transformar dados de webhook usando service existente ou gen√©rico
  async transformWebhookData(integrationService, rawData, transportadora) {
    if (integrationService && typeof integrationService.parseWebhookData === 'function') {
      // Usar m√©todo espec√≠fico do service se existir
      return await integrationService.parseWebhookData(rawData);
    }
    
    // Fallback para transforma√ß√£o gen√©rica
    return this.genericWebhookTransform(rawData, transportadora);
  }

  // Transforma√ß√£o gen√©rica para transportadoras sem service espec√≠fico
  genericWebhookTransform(rawData, transportadora) {
    const result = { notfis: [], ocorrencias: [] };

    // Detectar formato automaticamente
    if (rawData.notfis && Array.isArray(rawData.notfis)) {
      result.notfis = rawData.notfis;
    }

    if (rawData.ocorrencias && Array.isArray(rawData.ocorrencias)) {
      result.ocorrencias = rawData.ocorrencias;
    }

    // Tentar inferir formato baseado na estrutura
    if (result.notfis.length === 0 && result.ocorrencias.length === 0) {
      result = this.inferWebhookFormat(rawData, transportadora);
    }

    return result;
  }

  // Inferir formato baseado na transportadora e estrutura de dados
  inferWebhookFormat(rawData, transportadora) {
    const result = { notfis: [], ocorrencias: [] };

    switch (transportadora.toLowerCase()) {
      case 'jamef':
        return this.transformJamefWebhook(rawData);
      case 'braspress':
        return this.transformBraspressWebhook(rawData);
      case 'tnt':
        return this.transformTNTWebhook(rawData);
      default:
        return this.autoDetectFormat(rawData);
    }
  }

  // Transforma√ß√µes espec√≠ficas r√°pidas (baseadas nos services existentes)
  transformJamefWebhook(rawData) {
    const result = { notfis: [], ocorrencias: [] };

    // Baseado no JamefIntegrationService existente
    if (rawData.tracking && Array.isArray(rawData.tracking)) {
      for (const track of rawData.tracking) {
        if (track.nf_number) {
          result.notfis.push({
            nro_nf: track.nf_number,
            serie_nf: track.series,
            valor_nf: track.value,
            peso_nf: track.weight,
            cliente: track.customer_name ? {
              nome: track.customer_name,
              cnpj: track.customer_cnpj
            } : null,
            transportadora: {
              nome: 'Jamef',
              cnpj: '02404952000115'
            }
          });
        }
      }
    }

    if (rawData.events && Array.isArray(rawData.events)) {
      for (const event of rawData.events) {
        if (event.nf_number && event.event_code) {
          result.ocorrencias.push({
            nro_nf: event.nf_number,
            codigo: event.event_code,
            descricao: event.event_description,
            data_ocorrencia: event.event_date
          });
        }
      }
    }

    return result;
  }

  transformBraspressWebhook(rawData) {
    const result = { notfis: [], ocorrencias: [] };

    // Baseado no padr√£o do BraspressIntegrationService
    if (rawData.evento === 'nova_coleta' && rawData.dados) {
      result.notfis.push({
        nro_nf: rawData.dados.numero_nota,
        serie_nf: rawData.dados.serie,
        valor_nf: rawData.dados.valor,
        peso_nf: rawData.dados.peso,
        cliente: rawData.dados.remetente ? {
          nome: rawData.dados.remetente.nome,
          cnpj: rawData.dados.remetente.cnpj
        } : null,
        transportadora: {
          nome: 'Braspress',
          cnpj: '48588595000100'
        }
      });
    }

    if (rawData.evento === 'tracking_update' && rawData.dados) {
      result.ocorrencias.push({
        nro_nf: rawData.dados.numero_nota,
        codigo: rawData.dados.codigo_evento,
        descricao: rawData.dados.descricao_evento,
        data_ocorrencia: rawData.dados.data_evento
      });
    }

    return result;
  }

  transformTNTWebhook(rawData) {
    const result = { notfis: [], ocorrencias: [] };

    // TNT geralmente envia apenas tracking
    if (rawData.shipments && Array.isArray(rawData.shipments)) {
      for (const shipment of rawData.shipments) {
        if (shipment.events && Array.isArray(shipment.events)) {
          for (const event of shipment.events) {
            result.ocorrencias.push({
              nro_nf: shipment.reference || shipment.consignmentNumber,
              codigo: event.statusCode,
              descricao: event.statusDescription,
              data_ocorrencia: event.eventDate
            });
          }
        }
      }
    }

    return result;
  }

  autoDetectFormat(rawData) {
    const result = { notfis: [], ocorrencias: [] };

    // Auto-detec√ß√£o baseada na estrutura dos dados
    if (Array.isArray(rawData)) {
      for (const item of rawData) {
        if (this.looksLikeNotaFiscal(item)) {
          result.notfis.push(item);
        } else if (this.looksLikeOcorrencia(item)) {
          result.ocorrencias.push(item);
        }
      }
    }

    return result;
  }

  looksLikeNotaFiscal(data) {
    const notaFields = ['nro_nf', 'numero_nf', 'nf_number', 'invoice_number'];
    const valorFields = ['valor', 'value', 'amount'];
    
    return notaFields.some(field => data[field]) && 
           valorFields.some(field => data[field]);
  }

  looksLikeOcorrencia(data) {
    const codigoFields = ['codigo', 'code', 'status_code', 'event_code'];
    const descricaoFields = ['descricao', 'description', 'message'];
    
    return codigoFields.some(field => data[field]) && 
           descricaoFields.some(field => data[field]);
  }

  // Processar dados transformados
  async processTransformedData(transformedData) {
    let result = { processed: 0, errors: [] };

    if (transformedData.notfis && transformedData.notfis.length > 0) {
      const notasResult = await this.service.processNotasFiscais(transformedData.notfis);
      result.processed += notasResult.processed;
      result.errors = result.errors.concat(notasResult.errors);
    }

    if (transformedData.ocorrencias && transformedData.ocorrencias.length > 0) {
      const ocorrenciasResult = await this.service.processOcorrencias(transformedData.ocorrencias);
      result.processed += ocorrenciasResult.processed;
      result.errors = result.errors.concat(ocorrenciasResult.errors);
    }

    return result;
  }

  // M√©todos originais mantidos
  async receiveNotaFiscal(req, res) {
    try {
      const { notfis } = req.body;
      const result = await this.service.processNotasFiscais(notfis);
      
      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Notas fiscais processadas com sucesso',
        data: result
      });
    } catch (error) {
      logger.error('Erro ao processar notas fiscais:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  async receiveOcorrencias(req, res) {
    try {
      const { ocorrencias } = req.body;
      const result = await this.service.processOcorrencias(ocorrencias);
      
      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Ocorr√™ncias processadas com sucesso',
        data: result
      });
    } catch (error) {
      logger.error('Erro ao processar ocorr√™ncias:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  async getStatus(req, res) {
    try {
      const integrationServices = IntegrationFactory.getAvailableServices();
      
      return res.status(HTTP_STATUS.OK).json({
        success: true,
        message: 'Sistema de webhook ativo',
        version: '2.0.0',
        timestamp: new Date().toISOString(),
        endpoints: {
          notafiscal: '/api/webhook/notafiscal',
          ocorrencias: '/api/webhook/ocorrencias',
          status: '/api/webhook/status',
          transportadoras: integrationServices.map(t => `/api/webhooks/${t}`)
        },
        integration_services: integrationServices,
        webhook_transformers: ['jamef', 'braspress', 'tnt', 'generic']
      });
    } catch (error) {
      logger.error('Erro ao obter status:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  
// Adicionar este m√©todo ao WebhookController existente

  /**
   * Receber e processar ocorr√™ncias via webhook
   * @route POST /api/webhook/ocorrencia
   */
  async receiveOcorrencia(req, res) {
    try {
      const { ocorrencias } = req.body;

      if (!ocorrencias) {
        return res.status(400).json({
          success: false,
          message: 'Payload deve conter array de ocorr√™ncias'
        });
      }

      logger.info('Recebendo webhook de ocorr√™ncias:', {
        quantidade: Array.isArray(ocorrencias) ? ocorrencias.length : 1,
        ip: req.ip,
        userAgent: req.get('User-Agent')
      });

      // Processar ocorr√™ncias usando o service
      const results = await this.webhookService.processOcorrencias(ocorrencias);

      // Determinar status de resposta baseado nos resultados
      const statusCode = results.errors.length === 0 ? 200 : 
                        results.processed > 0 ? 207 : 400; // 207 = Multi-Status

      const response = {
        success: results.processed > 0,
        message: `${results.processed} ocorr√™ncias processadas com sucesso`,
        data: {
          total: Array.isArray(ocorrencias) ? ocorrencias.length : 1,
          processed: results.processed,
          errors: results.errors.length
        }
      };

      // Incluir detalhes dos erros se houverem
      if (results.errors.length > 0) {
        response.errors = results.errors;
      }

      logger.info('Webhook de ocorr√™ncias processado:', {
        statusCode,
        processed: results.processed,
        errors: results.errors.length,
        duration: new Date() - req.startTime
      });

      return res.status(statusCode).json(response);

    } catch (error) {
      logger.error('Erro no webhook de ocorr√™ncias:', {
        error: error.message,
        stack: error.stack,
        body: req.body
      });

      return res.status(500).json({
        success: false,
        message: 'Erro interno no processamento das ocorr√™ncias',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }





}

module.exports = WebhookController;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\database\connection.js
================================================================================

// backend/src/database/connection.js
const { Pool } = require('pg');
const config = require('../config/env');
const logger = require('../config/logger');

const sslConfig = config.database.ssl
  ? { rejectUnauthorized: false } // ou use CA se tiver (ver nota abaixo)
  : false;

// Pool de conex√µes PostgreSQL
const pool = new Pool({
  host: config.database.host,
  port: config.database.port,
  database: config.database.name,
  user: config.database.user,
  password: config.database.password,
  ssl: sslConfig,
  min: config.database.poolMin,
  max: config.database.poolMax,
  connectionTimeoutMillis: config.database.connectionTimeout,
  idleTimeoutMillis: config.database.idleTimeout,
  query_timeout: 30000,
  statement_timeout: 30000,
  application_name: 'road-rw-api'
});

// Teste simples de conex√£o: retorna boolean
async function testConnection() {
  try {
    const start = Date.now();
    await pool.query('SELECT 1');
    const ms = Date.now() - start;
    logger.info(`Database connected successfully (${ms}ms)`);
    return true;
  } catch (err) {
    logger.error('Database connection failed:', err);
    return false;
  }
}

// Health check detalhado: retorna objeto com m√©tricas
async function healthCheck() {
  const start = Date.now();
  try {
    const result = await pool.query('SELECT NOW() as now');
    const durationMs = Date.now() - start;
    return {
      status: 'up',
      now: result.rows[0].now,
      pool: {
        totalCount: pool.totalCount,
        idleCount: pool.idleCount,
        waitingCount: pool.waitingCount
      },
      latencyMs: durationMs
    };
  } catch (error) {
    return {
      status: 'down',
      error: error.message,
      latencyMs: Date.now() - start
    };
  }
}

// Encerrar pool com grace
async function close() {
  try {
    await pool.end();
  } catch (err) {
    logger.error('Erro ao encerrar pool do Postgres:', err);
  }
}

// Helper padr√£o de query
async function query(text, params) {
  const start = Date.now();
  const res = await pool.query(text, params);
  res.durationMs = Date.now() - start;
  return res;
}

module.exports = {
  pool,
  query,
  testConnection,
  healthCheck,
  close
};



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\database\seeds\jobs.seed.js
================================================================================

// ==========================================
// 4. SEEDS PARA CONFIGURA√á√ïES INICIAIS
// ==========================================
// backend/src/database/seeds/jobs.seed.js

const logger = require('../../config/logger');

async function seedJobsConfiguration(database) {
  try {
    logger.info('Iniciando seed de configura√ß√µes de jobs...');

    // 1. Configura√ß√µes de integra√ß√£o
    const integrationConfigQuery = `
      INSERT INTO settings (slug, env, settings, created_at, updated_at)
      VALUES ('integration_config', 'production', $1, NOW(), NOW())
      ON CONFLICT (slug, env) DO UPDATE SET
        settings = EXCLUDED.settings,
        updated_at = NOW()
    `;

    const integrationConfig = {
      enabled: true,
      poll_interval: 300,
      rate_limits: {
        jamef: { requests: 100, per: 'minute' },
        braspress: { requests: 500, per: 'hour' },
        tnt: { requests: 200, per: 'minute' }
      },
      timeouts: {
        default: 30000,
        jamef: 15000,
        braspress: 45000,
        tnt: 20000
      },
      retry: {
        attempts: 3,
        exponential: true,
        base_delay: 1000
      },
      circuit_breaker: {
        enabled: true,
        failure_threshold: 5,
        reset_timeout: 60000
      }
    };

    await database.query(integrationConfigQuery, [JSON.stringify(integrationConfig)]);

    // 2. Configura√ß√µes de monitoramento
    const monitoringConfigQuery = `
      INSERT INTO settings (slug, env, settings, created_at, updated_at)
      VALUES ('monitoring_config', 'production', $1, NOW(), NOW())
      ON CONFLICT (slug, env) DO UPDATE SET
        settings = EXCLUDED.settings,
        updated_at = NOW()
    `;

    const monitoringConfig = {
      alertas: {
        erro_threshold: 5,
        inatividade_hours: 4,
        email_notifications: false,
        webhook_url: null
      },
      dashboard: {
        periodo_padrao: 7,
        refresh_interval: 30,
        auto_refresh: true
      },
      logs: {
        retention_days: 30,
        max_log_size: 1000000
      }
    };

    await database.query(monitoringConfigQuery, [JSON.stringify(monitoringConfig)]);

    // 3. C√≥digos de ocorr√™ncia para APIs
    const codigosQuery = `
      INSERT INTO codigo_ocorrencias (codigo, descricao, tipo, processo, finalizadora, api, created_at)
      VALUES 
        (1, 'Coleta realizada', 'coleta', 'pickup', false, true, NOW()),
        (2, 'Em tr√¢nsito', 'transporte', 'transport', false, true, NOW()),
        (3, 'Saiu para entrega', 'entrega', 'delivery', false, true, NOW()),
        (4, 'Entregue', 'entrega', 'delivered', true, true, NOW()),
        (5, 'Tentativa de entrega', 'entrega', 'delivery_attempt', false, true, NOW()),
        (6, 'Devolvido', 'devolucao', 'returned', true, true, NOW()),
        (7, 'Extraviado', 'problema', 'lost', true, true, NOW()),
        (8, 'Avariado', 'problema', 'damaged', false, true, NOW()),
        (9, 'Aguardando retirada', 'entrega', 'waiting_pickup', false, true, NOW()),
        (99, 'Outros eventos', 'outros', 'other', false, true, NOW())
      ON CONFLICT (codigo) DO UPDATE SET
        descricao = EXCLUDED.descricao,
        tipo = EXCLUDED.tipo,
        processo = EXCLUDED.processo,
        finalizadora = EXCLUDED.finalizadora,
        api = EXCLUDED.api
    `;

    await database.query(codigosQuery);

    // 4. Tokens de exemplo (desabilitados)
    const tokensQuery = `
      INSERT INTO api_tokens (integracao, token, active, created_at)
      VALUES 
        ('jamef', 'EXEMPLO_TOKEN_JAMEF_DESABILITADO', false, NOW()),
        ('braspress', 'EXEMPLO_TOKEN_BRASPRESS_DESABILITADO', false, NOW()),
        ('tnt', 'EXEMPLO_TOKEN_TNT_DESABILITADO', false, NOW())
      ON CONFLICT DO NOTHING
    `;

    await database.query(tokensQuery);

    logger.info('Seed de configura√ß√µes de jobs conclu√≠do com sucesso');

  } catch (error) {
    logger.error('Erro no seed de configura√ß√µes de jobs:', error);
    throw error;
  }
}

module.exports = { seedJobsConfiguration };

// ==========================================
// 5. SCRIPT DE SETUP COMPLETO
// ==========================================
// backend/scripts/setup-jobs.js

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

const Database = require('../src/database/connection');
const { seedJobsConfiguration } = require('../src/database/seeds/jobs.seed');
const JobManagerService = require('../src/services/jobs/job-manager.service');
const logger = require('../src/config/logger');

async function setupJobs() {
  let database;

  try {
    logger.info('=== SETUP DO SISTEMA DE JOBS ===');

    // 1. Conectar ao banco
    database = new Database();
    await database.connect();
    logger.info('‚úì Conex√£o com banco estabelecida');

    // 2. Executar seeds
    await seedJobsConfiguration(database);
    logger.info('‚úì Configura√ß√µes iniciais criadas');

    // 3. Testar inicializa√ß√£o do sistema
    const jobManager = new JobManagerService(database);
    await jobManager.initialize();
    logger.info('‚úì Sistema de jobs inicializado');

    // 4. Testar funcionamento b√°sico
    const scheduler = jobManager.getScheduler();
    const status = scheduler.getStatus();
    logger.info('‚úì Status do scheduler:', status);

    // 5. Parar sistema
    await jobManager.shutdown();
    logger.info('‚úì Sistema finalizado corretamente');

    logger.info('=== SETUP CONCLU√çDO COM SUCESSO ===');

  } catch (error) {
    logger.error('‚ùå Erro no setup:', error);
    process.exit(1);
  } finally {
    if (database) {
      await database.disconnect();
    }
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  setupJobs();
}

module.exports = { setupJobs };



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\examples\add-new-integration.js
================================================================================

// ==========================================
// 4. EXEMPLOS DE USO - ADICIONANDO NOVA TRANSPORTADORA
// ==========================================
// examples/add-new-integration.js

/**
 * Exemplo: Como adicionar uma nova integra√ß√£o (Braspress)
 */

// 1. Criar servi√ßo de integra√ß√£o
// backend/src/services/integrations/braspress-integration.service.js

const axios = require('axios');
const xml2js = require('xml2js');
const BaseIntegrationService = require('./base-integration.service');

class BraspressIntegrationService extends BaseIntegrationService {
  constructor(config = {}) {
    super({
      name: 'braspress',
      timeout: 45000,
      retryAttempts: 3,
      rateLimitRequests: 500,
      rateLimitPer: 'hour',
      ...config
    });

    this.baseURL = config.baseURL || 'https://api.braspress.com.br';
    this.soapAction = 'http://tempuri.org/ConsultarRemessa';
  }

  async consultarAPI(numeroNF, transportadoraConfig) {
    await this.checkRateLimit();

    // Montar SOAP XML
    const soapEnvelope = `
      <?xml version="1.0" encoding="utf-8"?>
      <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
        <soap:Body>
          <ConsultarRemessa xmlns="http://tempuri.org/">
            <usuario>${transportadoraConfig.usuario}</usuario>
            <senha>${transportadoraConfig.senha}</senha>
            <numeroRemessa>${numeroNF}</numeroRemessa>
          </ConsultarRemessa>
        </soap:Body>
      </soap:Envelope>
    `;

    const response = await axios.post(this.baseURL + '/ws/tracking.asmx', soapEnvelope, {
      headers: {
        'Content-Type': 'text/xml; charset=utf-8',
        'SOAPAction': this.soapAction
      },
      timeout: this.timeout
    });

    if (response.status !== 200) {
      throw new Error(`API Braspress retornou status ${response.status}`);
    }

    // Parser XML para JSON
    const parser = new xml2js.Parser({ explicitArray: false });
    const result = await parser.parseStringPromise(response.data);
    
    return result;
  }

  parseResponse(response, numeroNF) {
    const ocorrencias = [];

    try {
      const eventos = response['soap:Envelope']['soap:Body']['ConsultarRemessaResponse']['ConsultarRemessaResult']['Eventos']['Evento'];
      const eventArray = Array.isArray(eventos) ? eventos : [eventos];

      for (const evento of eventArray) {
        const ocorrencia = {
          nro_nf: parseInt(numeroNF),
          codigo: this.mapearCodigoBraspress(evento.Codigo),
          descricao: evento.Descricao || 'Evento sem descri√ß√£o',
          dataHoraEvento: this.parseDate(evento.Data, evento.Hora),
          dataHoraEnvio: new Date(),
          nomeRecebedor: evento.Recebedor || null,
          docRecebedor: null,
          latitude: null,
          longitude: null,
          linkComprovante: null
        };

        ocorrencias.push(ocorrencia);
      }

    } catch (error) {
      logger.warn(`Erro ao processar resposta Braspress para NF ${numeroNF}:`, error);
    }

    return ocorrencias;
  }

  mapearCodigoBraspress(codigoBraspress) {
    const mapeamento = {
      '01': 1,  // Coleta
      '02': 2,  // Transfer√™ncia
      '03': 3,  // Saiu para entrega
      '04': 4,  // Entregue
      '05': 5,  // Tentativa
      '06': 6   // Devolvido
    };

    return mapeamento[codigoBraspress] || 99;
  }

  parseDate(data, hora) {
    try {
      const dateStr = `${data} ${hora}`;
      return new Date(dateStr);
    } catch (error) {
      return null;
    }
  }
}

// 2. Registrar no factory
// backend/src/services/integrations/integration-factory.js (ADICIONAR)

const BraspressIntegrationService = require('./braspress-integration.service');

// No m√©todo initialize():
this.register('braspress', BraspressIntegrationService);

// 3. Atualizar valida√ß√µes
// backend/src/validations/jobs.validation.js (ATUALIZAR)

integracao: Joi.string()
  .valid('jamef', 'braspress', 'tnt', 'correios') // Adicionar 'braspress'
  .required()

// 4. Configurar no banco
/**
 * INSERT INTO settings (slug, env, settings)
 * VALUES ('integration_config', 'production', '{
 *   "rate_limits": {
 *     "braspress": {"requests": 500, "per": "hour"}
 *   },
 *   "timeouts": {
 *     "braspress": 45000
 *   }
 * }')
 * ON CONFLICT (slug, env) DO UPDATE SET settings = settings || EXCLUDED.settings;
 */


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\examples\custom-monitoring.js
================================================================================

// ==========================================
// 5. EXEMPLO DE MONITORAMENTO PERSONALIZADO
// ==========================================
// examples/custom-monitoring.js

/**
 * Exemplo: Sistema de alertas personalizado
 */

const nodemailer = require('nodemailer');

class CustomAlertService {
  constructor(config) {
    this.emailTransporter = nodemailer.createTransporter(config.email);
    this.webhookUrl = config.webhookUrl;
    this.thresholds = config.thresholds;
  }

  // Verificar alertas personalizados
  async checkCustomAlerts(monitoringRepository) {
    const alerts = [];

    // Alerta: Taxa de erro acima do limite
    const errorRate = await this.checkErrorRate(monitoringRepository);
    if (errorRate > this.thresholds.errorRate) {
      alerts.push({
        type: 'HIGH_ERROR_RATE',
        severity: 'CRITICAL',
        message: `Taxa de erro: ${errorRate}% (limite: ${this.thresholds.errorRate}%)`,
        value: errorRate
      });
    }

    // Alerta: NFs paradas h√° muito tempo
    const stuckNFs = await this.checkStuckNFs(monitoringRepository);
    if (stuckNFs > this.thresholds.stuckNFs) {
      alerts.push({
        type: 'STUCK_NFS',
        severity: 'WARNING',
        message: `${stuckNFs} NFs paradas h√° mais de 24h`,
        value: stuckNFs
      });
    }

    // Enviar alertas
    for (const alert of alerts) {
      await this.sendAlert(alert);
    }

    return alerts;
  }

  async checkErrorRate(repository) {
    const stats = await repository.getPerformanceStats({ periodo: 1 });
    const latest = stats[stats.length - 1];
    
    if (!latest || latest.total_logs === 0) return 0;
    
    return (latest.erros / latest.total_logs) * 100;
  }

  async checkStuckNFs(repository) {
    const query = `
      SELECT COUNT(*) as stuck_count
      FROM notas_fiscais 
      WHERE finalizada = false 
        AND created_at < NOW() - INTERVAL '24 hours'
        AND (status_api IS NULL OR status_api != 'consultado_hoje')
    `;
    
    const result = await repository.database.query(query);
    return parseInt(result.rows[0].stuck_count);
  }

  async sendAlert(alert) {
    // Email
    if (this.emailTransporter) {
      await this.emailTransporter.sendMail({
        from: 'alerts@roadrw.com',
        to: 'admin@roadrw.com',
        subject: `[ROAD-RW] Alerta: ${alert.type}`,
        html: `
          <h3>Alerta do Sistema de Integra√ß√£o</h3>
          <p><strong>Tipo:</strong> ${alert.type}</p>
          <p><strong>Severidade:</strong> ${alert.severity}</p>
          <p><strong>Mensagem:</strong> ${alert.message}</p>
          <p><strong>Timestamp:</strong> ${new Date().toISOString()}</p>
        `
      });
    }

    // Webhook
    if (this.webhookUrl) {
      await axios.post(this.webhookUrl, {
        ...alert,
        timestamp: new Date().toISOString(),
        source: 'road-rw-jobs'
      });
    }
  }
}


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\auth.middleware.js
================================================================================

// backend/src/middlewares/auth.middleware.js
const jwt = require('jsonwebtoken');
const db = require('../database/connection');
const logger = require('../config/logger');
const config = require('../config/env');
const { HTTP_STATUS = {
  OK: 200,
  CREATED: 201,
  NO_CONTENT: 204,
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  CONFLICT: 409,
  UNPROCESSABLE_ENTITY: 422,
  TOO_MANY_REQUESTS: 429,
  INTERNAL_SERVER_ERROR: 500
} } = require('../utils/constants') || {};

// ------------------------------------------------------------
// Helpers
// ------------------------------------------------------------
function extractToken(req) {
  // 1) Authorization: Bearer <token>
  const auth = req.headers['authorization'] || req.headers['Authorization'];
  if (auth && typeof auth === 'string') {
    const [scheme, token] = auth.split(' ');
    if (/^Bearer$/i.test(scheme) && token) return token.trim();
  }

  // 2) Query string ?token=
  if (req.query && req.query.token) {
    return String(req.query.token);
  }

  // 3) Cookie (se voc√™ usa cookie-parser)
  if (req.cookies && req.cookies.token) {
    return String(req.cookies.token);
  }

  return null;
}

async function loadUserById(userId) {
  // Busca direta no DB para garantir role atualizada.
  // Ajuste os campos conforme sua tabela `users`.
  const sql = `
    SELECT id, name, email, role, deleted_at
    FROM public.users
    WHERE id = $1
    LIMIT 1
  `;
  const { rows } = await db.query(sql, [userId]);
  return rows[0] || null;
}

// ------------------------------------------------------------
// Middlewares
// ------------------------------------------------------------

/**
 * Autentica a requisi√ß√£o via JWT.
 * - Verifica token
 * - Carrega usu√°rio do banco
 * - Injeta req.user = { id, name, email, role }
 */
async function authenticate(req, res, next) {
  try {
    const token = extractToken(req);
    if (!token) {
      return res.status(HTTP_STATUS.UNAUTHORIZED).json({
        success: false,
        message: 'N√£o autenticado: token ausente'
      });
    }

    let decoded;
    try {
      decoded = jwt.verify(token, config.jwt.secret);
    } catch (err) {
      if (err.name === 'TokenExpiredError') {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Sess√£o expirada'
        });
      }
      return res.status(HTTP_STATUS.UNAUTHORIZED).json({
        success: false,
        message: 'Token inv√°lido'
      });
    }

    // Carrega o usu√°rio mais recente do DB (garante role atualizada)
    const user = await loadUserById(decoded.id);
    if (!user || user.deleted_at) {
      return res.status(HTTP_STATUS.UNAUTHORIZED).json({
        success: false,
        message: 'Usu√°rio n√£o encontrado ou inativo'
      });
    }

    // Injeta role (DEFAULT 'user' caso nulo)
    req.user = {
      id: user.id,
      name: user.name,
      email: user.email,
      role: user.role || 'user'
    };

    return next();
  } catch (error) {
    logger.error('Erro no authenticate middleware:', error);
    return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
      success: false,
      message: 'Erro interno de autentica√ß√£o'
    });
  }
}

/**
 * Autentica√ß√£o opcional:
 * - Se tiver token v√°lido ‚Üí popula req.user
 * - Se n√£o tiver/for inv√°lido ‚Üí segue sem req.user
 */
async function optionalAuthenticate(req, res, next) {
  try {
    const token = extractToken(req);
    if (!token) {
      return next();
    }

    try {
      const decoded = jwt.verify(token, config.jwt.secret);
      const user = await loadUserById(decoded.id);
      if (user && !user.deleted_at) {
        req.user = {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role || 'user'
        };
      }
    } catch (err) {
      // Token inv√°lido/expirado ‚Üí ignora e segue sem user
      logger.warn('optionalAuthenticate: token inv√°lido/expirado ignorado');
    }

    return next();
  } catch (error) {
    logger.error('Erro no optionalAuthenticate middleware:', error);
    return next(); // n√£o bloqueia requisi√ß√£o
  }
}

/**
 * Autoriza por role:
 * - Use ap√≥s `authenticate`
 * - Ex.: authorize(['admin', 'manager'])
 */
function authorize(roles = []) {
  return (req, res, next) => {
    try {
      if (!req.user) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'N√£o autenticado'
        });
      }

      // Normaliza role
      const userRole = req.user.role || 'user';

      if (Array.isArray(roles) && roles.length > 0) {
        if (!roles.includes(userRole)) {
          return res.status(HTTP_STATUS.FORBIDDEN).json({
            success: false,
            message: 'Acesso negado'
          });
        }
      }

      return next();
    } catch (error) {
      logger.error('Erro no authorize middleware:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno de autoriza√ß√£o'
      });
    }
  };
}

module.exports = {
  authenticate,
  optionalAuthenticate,
  authorize
};



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\cors.middleware.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\error.middleware.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\external-auth.middleware.js
================================================================================

// ==========================================
// 1. EXTERNAL AUTH MIDDLEWARE
// ==========================================
// backend/src/middlewares/external-auth.middleware.js

const ExternalAuthService = require('../services/external/external-auth.service');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

class ExternalAuthMiddleware {
  constructor(repositories) {
    this.authService = new ExternalAuthService(repositories);
  }

  // Middleware de autentica√ß√£o para APIs externas
  authenticate() {
    return async (req, res, next) => {
      try {
        // Extrair token do header Authorization
        const authHeader = req.headers.authorization;
        
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
          return res.status(HTTP_STATUS.UNAUTHORIZED).json({
            success: false,
            message: 'Token de autoriza√ß√£o necess√°rio. Use: Authorization: Bearer TOKEN'
          });
        }

        const token = authHeader.substring(7); // Remover 'Bearer '

        // Validar token
        const authResult = await this.authService.validateExternalToken(token);
        
        if (!authResult.valid) {
          return res.status(HTTP_STATUS.UNAUTHORIZED).json({
            success: false,
            message: authResult.error || 'Token inv√°lido'
          });
        }

        // Adicionar informa√ß√µes do token e transportadora na requisi√ß√£o
        req.externalAuth = {
          token: authResult.token,
          transportadora: authResult.transportadora,
          integracao: authResult.token.integracao
        };

        // Log da autentica√ß√£o
        logger.info('Autentica√ß√£o externa bem-sucedida:', {
          integracao: authResult.token.integracao,
          transportadora: authResult.transportadora.nome,
          ip: req.ip,
          userAgent: req.get('User-Agent')
        });

        next();

      } catch (error) {
        logger.error('Erro na autentica√ß√£o externa:', error);
        
        return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
          success: false,
          message: 'Erro interno na autentica√ß√£o'
        });
      }
    };
  }
}

module.exports = ExternalAuthMiddleware;



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\external-rate-limit.middleware.js
================================================================================

// src/middlewares/external-rate-limit.middleware.js

const rateLimit = require('express-rate-limit');

// Configura√ß√µes de rate limiting por integra√ß√£o
const rateLimitConfig = {
  jamef: {
    windowMs: 15 * 60 * 1000, // 15 minutos
    max: 500, // 500 requests por janela
    message: {
      error: 'Limite de requisi√ß√µes excedido para Jamef',
      retryAfter: 900
    }
  },
  braspress: {
    windowMs: 15 * 60 * 1000,
    max: 1000,
    message: {
      error: 'Limite de requisi√ß√µes excedido para Braspress',
      retryAfter: 900
    }
  },
  tnt: {
    windowMs: 15 * 60 * 1000,
    max: 300,
    message: {
      error: 'Limite de requisi√ß√µes excedido para TNT',
      retryAfter: 900
    }
  },
  default: {
    windowMs: 15 * 60 * 1000,
    max: 100,
    message: {
      error: 'Limite de requisi√ß√µes excedido',
      retryAfter: 900
    }
  }
};

// Middleware para determinar o rate limit baseado na integra√ß√£o
const externalRateLimitMiddleware = (req, res, next) => {
  try {
    // Determinar a integra√ß√£o baseada no token ou cabe√ßalhos
    const authHeader = req.headers.authorization || '';
    const token = authHeader.replace('Bearer ', '');
    
    let integration = 'default';
    
    // Simples l√≥gica para detectar a integra√ß√£o (adaptar conforme necess√°rio)
    if (token.includes('jamef') || req.headers['x-integration'] === 'jamef') {
      integration = 'jamef';
    } else if (token.includes('braspress') || req.headers['x-integration'] === 'braspress') {
      integration = 'braspress';
    } else if (token.includes('tnt') || req.headers['x-integration'] === 'tnt') {
      integration = 'tnt';
    }
    
    // Aplicar o rate limit espec√≠fico
    const limiter = rateLimit(rateLimitConfig[integration] || rateLimitConfig.default);
    
    return limiter(req, res, next);
  } catch (error) {
    console.error('Erro no rate limiting:', error);
    // Em caso de erro, continuar sem rate limiting
    next();
  }
};

module.exports = externalRateLimitMiddleware;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\jobs.middleware.js
================================================================================

// ==========================================
// 2. MIDDLEWARE ESPEC√çFICO PARA JOBS
// ==========================================
// backend/src/middlewares/jobs.middleware.js

const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

// Middleware para injetar controllers nos requests
const injectJobControllers = (jobManager) => {
  return (req, res, next) => {
    try {
      if (!jobManager.isInitialized) {
        return res.status(HTTP_STATUS.SERVICE_UNAVAILABLE).json({
          success: false,
          message: 'Sistema de jobs n√£o est√° dispon√≠vel'
        });
      }

      const repositories = jobManager.getRepositories();
      const scheduler = jobManager.getScheduler();

      // Injetar controllers espec√≠ficos
      const JobsController = require('../controllers/jobs.controller');
      const MonitoringController = require('../controllers/monitoring.controller');

      req.jobsController = new JobsController(repositories.jobs, scheduler);
      req.monitoringController = new MonitoringController(repositories.monitoring);

      next();
    } catch (error) {
      logger.error('Erro no middleware de jobs:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  };
};

// Middleware para validar permiss√µes de administra√ß√£o
const requireAdmin = (req, res, next) => {
  try {
    // Verificar se usu√°rio √© admin (baseado no padr√£o existente)
    if (!req.user || req.user.role !== 'admin') {
      return res.status(HTTP_STATUS.FORBIDDEN).json({
        success: false,
        message: 'Acesso negado. Permiss√µes de administrador necess√°rias.'
      });
    }

    next();
  } catch (error) {
    logger.error('Erro no middleware de admin:', error);
    return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
};

// Middleware para rate limiting de opera√ß√µes sens√≠veis
const jobsRateLimit = require('express-rate-limit')({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 10, // m√°ximo 10 opera√ß√µes por IP
  message: {
    success: false,
    message: 'Muitas opera√ß√µes de jobs. Tente novamente em 15 minutos.'
  },
  standardHeaders: true,
  legacyHeaders: false,
  skip: (req) => {
    // Pular rate limit para opera√ß√µes de leitura
    return req.method === 'GET';
  }
});

module.exports = {
  injectJobControllers,
  requireAdmin,
  jobsRateLimit
};



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\logger.middleware.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\monitoring.middleware.js
================================================================================

// ==========================================
// MIDDLEWARE ESPEC√çFICO PARA MONITORING
// ==========================================
// backend/src/middlewares/monitoring.middleware.js

const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

// Middleware para injetar monitoring controller nos requests
const injectMonitoringControllers = (jobManager) => {
  return (req, res, next) => {
    try {
      if (!jobManager || !jobManager.isInitialized) {
        return res.status(HTTP_STATUS.SERVICE_UNAVAILABLE).json({
          success: false,
          message: 'Sistema de monitoramento n√£o est√° dispon√≠vel'
        });
      }

      const repositories = jobManager.getRepositories();

      // Injetar controller espec√≠fico de monitoring
      const MonitoringController = require('../controllers/monitoring.controller');
      req.monitoringController = new MonitoringController(repositories.monitoring);

      next();
    } catch (error) {
      logger.error('Erro no middleware de monitoring:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  };
};

// ‚úÖ Exporte a fun√ß√£o diretamente, n√£o como objeto
module.exports = injectMonitoringControllers;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\prometheus.middleware.js
================================================================================

// ==========================================
// 7. MONITORAMENTO COM PROMETHEUS/GRAFANA
// ==========================================
// backend/src/middleware/prometheus.middleware.js

const client = require('prom-client');
const logger = require('../config/logger');

// Criar m√©tricas personalizadas para APIs externas
const externalApiRequests = new client.Counter({
  name: 'external_api_requests_total',
  help: 'Total number of external API requests',
  labelNames: ['integracao', 'operacao', 'status']
});

const externalApiDuration = new client.Histogram({
  name: 'external_api_request_duration_seconds',
  help: 'Duration of external API requests',
  labelNames: ['integracao', 'operacao'],
  buckets: [0.1, 0.3, 0.5, 0.7, 1, 3, 5, 7, 10]
});

const externalApiErrors = new client.Counter({
  name: 'external_api_errors_total',
  help: 'Total number of external API errors',
  labelNames: ['integracao', 'operacao', 'error_type']
});

const externalApiActiveTokens = new client.Gauge({
  name: 'external_api_active_tokens',
  help: 'Number of active external API tokens',
  labelNames: ['integracao']
});

class PrometheusMiddleware {
  constructor() {
    // Registrar m√©tricas padr√£o
    client.register.clear();
    client.collectDefaultMetrics();
  }

  // Middleware para coletar m√©tricas das APIs externas
  metricsMiddleware() {
    return (req, res, next) => {
      if (!req.path.startsWith('/api/external/')) {
        return next();
      }

      const startTime = Date.now();
      const integracao = req.externalAuth?.integracao || 'unknown';
      const operacao = this.extractOperation(req.path, req.method);

      // Interceptar resposta para coletar m√©tricas
      const originalSend = res.send;
      res.send = function(body) {
        const duration = (Date.now() - startTime) / 1000;
        const status = res.statusCode >= 400 ? 'error' : 'success';

        // Coletar m√©tricas
        externalApiRequests.inc({ integracao, operacao, status });
        externalApiDuration.observe({ integracao, operacao }, duration);

        if (res.statusCode >= 400) {
          externalApiErrors.inc({ 
            integracao, 
            operacao, 
            error_type: res.statusCode >= 500 ? 'server_error' : 'client_error' 
          });
        }

        return originalSend.call(this, body);
      };

      next();
    };
  }

  extractOperation(path, method) {
    if (path.includes('/notas-fiscais')) {
      return method === 'GET' ? 'consulta_nf' : 'envio_nf';
    }
    if (path.includes('/ocorrencias')) {
      return method === 'GET' ? 'consulta_ocorrencia' : 'envio_ocorrencia';
    }
    if (path.includes('/webhook')) {
      return 'webhook';
    }
    return 'other';
  }

  // Atualizar m√©trica de tokens ativos
  async updateActiveTokensMetric(database) {
    try {
      const query = `
        SELECT integracao, COUNT(*) as count
        FROM api_tokens 
        WHERE active = true 
          AND (expires_at IS NULL OR expires_at > NOW())
        GROUP BY integracao
      `;

      const result = await database.query(query);
      
      // Reset gauge
      externalApiActiveTokens.reset();
      
      // Atualizar valores
      result.rows.forEach(row => {
        externalApiActiveTokens.set({ integracao: row.integracao }, row.count);
      });

    } catch (error) {
      logger.error('Erro ao atualizar m√©tricas de tokens:', error);
    }
  }

  // Endpoint para Prometheus scraping
  metricsEndpoint() {
    return async (req, res) => {
      try {
        res.set('Content-Type', client.register.contentType);
        res.end(await client.register.metrics());
      } catch (error) {
        res.status(500).end(error);
      }
    };
  }
}

module.exports = PrometheusMiddleware;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\rate-limit.middleware.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\validate.middleware.js
================================================================================

const Joi = require('joi');
const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');

// Valida√ß√£o do corpo da requisi√ß√£o
const validateBody = (schema) => {
  return (req, res, next) => {
    try {
      const { error, value } = schema.validate(req.body, {
        abortEarly: false,
        stripUnknown: true,
        convert: true
      });

      if (error) {
        const errors = error.details.map(detail => ({
          field: detail.path.join('.'),
          message: detail.message,
          value: detail.context?.value
        }));

        logger.warn('Erro de valida√ß√£o do body:', { errors, body: req.body });

        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Dados inv√°lidos no corpo da requisi√ß√£o',
          errors
        });
      }

      req.body = value;
      next();
    } catch (validationError) {
      logger.error('Erro no middleware de valida√ß√£o do body:', validationError);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  };
};

// Valida√ß√£o dos par√¢metros da URL
const validateParams = (schema) => {
  return (req, res, next) => {
    try {
      const { error, value } = schema.validate(req.params, {
        abortEarly: false,
        stripUnknown: true,
        convert: true
      });

      if (error) {
        const errors = error.details.map(detail => ({
          field: detail.path.join('.'),
          message: detail.message,
          value: detail.context?.value
        }));

        logger.warn('Erro de valida√ß√£o dos par√¢metros:', { errors, params: req.params });

        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Par√¢metros inv√°lidos na URL',
          errors
        });
      }

      req.params = value;
      next();
    } catch (validationError) {
      logger.error('Erro no middleware de valida√ß√£o dos par√¢metros:', validationError);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  };
};

// Valida√ß√£o dos query parameters
const validateQuery = (schema) => {
  return (req, res, next) => {
    try {
      const { error, value } = schema.validate(req.query, {
        abortEarly: false,
        stripUnknown: true,
        convert: true
      });

      if (error) {
        const errors = error.details.map(detail => ({
          field: detail.path.join('.'),
          message: detail.message,
          value: detail.context?.value
        }));

        logger.warn('Erro de valida√ß√£o da query:', { errors, query: req.query });

        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Par√¢metros de consulta inv√°lidos',
          errors
        });
      }

      req.query = value;
      next();
    } catch (validationError) {
      logger.error('Erro no middleware de valida√ß√£o da query:', validationError);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  };
};

// Valida√ß√£o geral (alias para validateBody para compatibilidade)
const validate = validateBody;

module.exports = {
  validate,
  validateBody,
  validateParams,
  validateQuery
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\webhook-auth.middleware.js
================================================================================

// ==========================================
// 9. MIDDLEWARE DE AUTENTICA√á√ÉO PARA WEBHOOKS
// ==========================================
// backend/src/middlewares/webhook-auth.middleware.js

const logger = require('../config/logger');
const { HTTP_STATUS } = require('../utils/constants');
const IntegrationFactory = require('../services/integrations/integration-factory');

class WebhookAuthMiddleware {
    // Valida√ß√£o din√¢mica baseada na transportadora
  static validateByTransportadora(req, res, next) {
    try {
      const { transportadora } = req.params;
      
      if (!transportadora) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          message: 'Nome da transportadora √© obrigat√≥rio'
        });
      }

      // Verificar se √© uma transportadora com integration service
      const availableServices = IntegrationFactory.getAvailableServices();
      const isKnownService = availableServices.includes(transportadora.toLowerCase());

      // Aplicar valida√ß√£o espec√≠fica se existe service
      if (isKnownService) {
        return this.validateKnownTransportadora(req, res, next, transportadora.toLowerCase());
      } else {
        // Valida√ß√£o gen√©rica para transportadoras desconhecidas
        return this.validateGenericTransportadora(req, res, next, transportadora);
      }

    } catch (error) {
      logger.error('Erro na valida√ß√£o de webhook:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }

  static validateKnownTransportadora(req, res, next, transportadora) {
    // Redirecionar para valida√ß√£o espec√≠fica
    switch (transportadora) {
      case 'jamef':
        return this.validateJamef(req, res, next);
      case 'braspress':
        return this.validateBraspress(req, res, next);
      case 'tnt':
        return this.validateTNT(req, res, next);
      default:
        return this.validateGenericTransportadora(req, res, next, transportadora);
    }
  }

  static validateGenericTransportadora(req, res, next, transportadora) {
    const authHeader = req.get('Authorization');
    
    if (!authHeader) {
      return res.status(HTTP_STATUS.UNAUTHORIZED).json({
        success: false,
        message: 'Token de autoriza√ß√£o necess√°rio'
      });
    }
    
    const token = authHeader.replace('Bearer ', '');
    const expectedToken = process.env[`${transportadora.toUpperCase()}_WEBHOOK_TOKEN`];
    
    if (!expectedToken || token !== expectedToken) {
      logger.warn('Token inv√°lido para webhook:', {
        transportadora: transportadora,
        ip: req.ip
      });
      
      return res.status(HTTP_STATUS.UNAUTHORIZED).json({
        success: false,
        message: 'Token de autoriza√ß√£o inv√°lido'
      });
    }
    
    req.transportadora = transportadora;
    next();
  }

  // Valida√ß√£o para Jamef
  static validateJamef(req, res, next) {
    try {
      const authHeader = req.get('Authorization');
      const jamefToken = process.env.JAMEF_WEBHOOK_TOKEN;
      
      if (!authHeader || !jamefToken) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Token de autoriza√ß√£o necess√°rio'
        });
      }
      
      const token = authHeader.replace('Bearer ', '');
      if (token !== jamefToken) {
        logger.warn('Token inv√°lido para webhook Jamef:', {
          ip: req.ip,
          userAgent: req.get('User-Agent')
        });
        
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Token de autoriza√ß√£o inv√°lido'
        });
      }
      
      req.transportadora = 'jamef';
      next();
    } catch (error) {
      logger.error('Erro na valida√ß√£o de webhook Jamef:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  
  // Valida√ß√£o para Braspress
  static validateBraspress(req, res, next) {
    try {
      const signature = req.get('X-Braspress-Signature');
      const braspressSecret = process.env.BRASPRESS_WEBHOOK_SECRET;
      
      if (!signature || !braspressSecret) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Assinatura de autoriza√ß√£o necess√°ria'
        });
      }
      
      // Validar assinatura HMAC (implementar conforme especifica√ß√£o da Braspress)
      const crypto = require('crypto');
      const expectedSignature = crypto
        .createHmac('sha256', braspressSecret)
        .update(JSON.stringify(req.body))
        .digest('hex');
      
      if (signature !== `sha256=${expectedSignature}`) {
        logger.warn('Assinatura inv√°lida para webhook Braspress:', {
          ip: req.ip,
          signature: signature
        });
        
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Assinatura de autoriza√ß√£o inv√°lida'
        });
      }
      
      req.transportadora = 'braspress';
      next();
    } catch (error) {
      logger.error('Erro na valida√ß√£o de webhook Braspress:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  
  // Valida√ß√£o para TNT
  static validateTNT(req, res, next) {
    try {
      const apiKey = req.get('X-API-Key');
      const tntApiKey = process.env.TNT_WEBHOOK_API_KEY;
      
      if (!apiKey || !tntApiKey) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'API Key necess√°ria'
        });
      }
      
      if (apiKey !== tntApiKey) {
        logger.warn('API Key inv√°lida para webhook TNT:', {
          ip: req.ip,
          apiKey: apiKey
        });
        
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'API Key inv√°lida'
        });
      }
      
      req.transportadora = 'tnt';
      next();
    } catch (error) {
      logger.error('Erro na valida√ß√£o de webhook TNT:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  
  // Valida√ß√£o gen√©rica
  static validateGeneric(req, res, next) {
    try {
      const { transportadora } = req.params;
      const authHeader = req.get('Authorization');
      
      if (!authHeader) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Token de autoriza√ß√£o necess√°rio'
        });
      }
      
      // Valida√ß√£o b√°sica - pode ser customizada por transportadora
      const token = authHeader.replace('Bearer ', '');
      const expectedToken = process.env[`${transportadora.toUpperCase()}_WEBHOOK_TOKEN`];
      
      if (!expectedToken || token !== expectedToken) {
        logger.warn('Token inv√°lido para webhook gen√©rico:', {
          transportadora: transportadora,
          ip: req.ip
        });
        
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          message: 'Token de autoriza√ß√£o inv√°lido'
        });
      }
      
      req.transportadora = transportadora;
      next();
    } catch (error) {
      logger.error('Erro na valida√ß√£o de webhook gen√©rico:', error);
      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
}

module.exports = WebhookAuthMiddleware;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\middlewares\webhook.middleware.js
================================================================================

// ==========================================
// 6. MIDDLEWARES ADICIONAIS PARA WEBHOOK
// ==========================================
// backend/src/middlewares/webhook.middleware.js

const logger = require('../config/logger');

// Middleware para log de webhooks
const logWebhook = (req, res, next) => {
  const start = Date.now();
  
  logger.info('Webhook iniciado:', {
    method: req.method,
    url: req.originalUrl,
    ip: req.ip,
    userAgent: req.get('User-Agent'),
    contentType: req.get('Content-Type'),
    bodySize: req.get('Content-Length')
  });

  res.on('finish', () => {
    const duration = Date.now() - start;
    logger.info('Webhook finalizado:', {
      method: req.method,
      url: req.originalUrl,
      statusCode: res.statusCode,
      duration: `${duration}ms`
    });
  });
  
  next();
};

// Middleware para validar formato JSON
const validateJsonFormat = (req, res, next) => {
  if (req.method === 'POST' && req.get('Content-Type') !== 'application/json') {
    return res.status(400).json({
      success: false,
      message: 'Content-Type deve ser application/json'
    });
  }
  next();
};

module.exports = {
  logWebhook,
  validateJsonFormat
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\models\base.model.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\models\cliente.model.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\models\embarcador.model.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\models\motorista.model.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\models\nota-fiscal.model.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\models\ocorrencia.model.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\models\romaneio.model.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\models\transportadora.model.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\models\user.model.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\api-tokens.repository.js
================================================================================

// ==========================================
// 2. API TOKENS REPOSITORY EXTENSION
// ==========================================
// backend/src/repositories/api-tokens.repository.js

const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class ApiTokensRepository extends BaseRepository {
  constructor(database) {
    super(database, 'api_tokens');
  }

  // Buscar token ativo
  async findActiveToken(token) {
    const query = `
      SELECT * FROM api_tokens 
      WHERE token = $1 
        AND active = true 
        AND (expires_at IS NULL OR expires_at > NOW())
      LIMIT 1
    `;

    const result = await this.database.query(query, [token]);
    return result.rows[0];
  }

  // Buscar por integra√ß√£o
  async findByIntegracao(integracao) {
    const query = `
      SELECT * FROM api_tokens 
      WHERE integracao = $1 
        AND active = true
      ORDER BY created_at DESC
    `;

    const result = await this.database.query(query, [integracao]);
    return result.rows;
  }

  // Desativar tokens por integra√ß√£o
  async deactivateByIntegracao(integracao) {
    const query = `
      UPDATE api_tokens 
      SET active = false, updated_at = NOW()
      WHERE integracao = $1 AND active = true
    `;

    const result = await this.database.query(query, [integracao]);
    return result.rowCount;
  }

  // Buscar tokens ativos
  async findActiveTokens() {
    const query = `
      SELECT 
        id, integracao, expires_at, last_used_at, created_at,
        CASE 
          WHEN expires_at IS NULL THEN 'never'
          WHEN expires_at > NOW() THEN 'valid'
          ELSE 'expired'
        END as status
      FROM api_tokens 
      WHERE active = true
      ORDER BY integracao, created_at DESC
    `;

    const result = await this.database.query(query);
    return result.rows;
  }

  // Atualizar √∫ltimo uso
  async updateLastUsed(tokenId) {
    const query = `
      UPDATE api_tokens 
      SET last_used_at = NOW()
      WHERE id = $1
    `;

    const result = await this.database.query(query, [tokenId]);
    return result.rowCount;
  }

  // Buscar por token
  async findByToken(token) {
    const query = `
      SELECT * FROM api_tokens 
      WHERE token = $1
      LIMIT 1
    `;

    const result = await this.database.query(query, [token]);
    return result.rows[0];
  }
}

module.exports = ApiTokensRepository;



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\base.repository.js
================================================================================

// backend/src/repositories/base.repository.js
const db = require('../database/connection');
const logger = require('../config/logger');
const config = require('../config/env');

class BaseRepository {
  // Aceita: super('tabela')  OU  super(database, 'tabela')
   constructor(arg1, arg2) {
     if (arg2) {
       this.database = arg1 || db; // se n√£o vier, usa fallback global
       this.tableName = arg2;
     } else {
       this.database = db;
       this.tableName = arg1;
     }
     this.defaultLimit = config.pagination.defaultLimit;
     this.maxLimit = config.pagination.maxLimit;
     this._columnsCache = null;
   }
 

  async executeQuery(sql, params = []) {
    try {
      return await db.query(sql, params);
    } catch (error) {
      logger.error(`Erro em executeQuery na tabela ${this.tableName}:`, error);
      throw error;
    }
  }

  // üîß novos helpers
  async getTableColumns() {
    if (this._columnsCache) return this._columnsCache;
    const sql = `
      SELECT column_name
      FROM information_schema.columns
      WHERE table_schema = 'public' AND table_name = $1
    `;
    const { rows } = await db.query(sql, [this.tableName]);
    this._columnsCache = rows.map(r => r.column_name);
    return this._columnsCache;
  }

  async hasColumn(columnName) {
    const cols = await this.getTableColumns();
    return cols.includes(columnName);
  }

  // M√©todo gen√©rico para buscar todos os registros com pagina√ß√£o e filtros
// M√©todo gen√©rico para buscar todos os registros com pagina√ß√£o e filtros
async findAll(options = {}) {
  try {
    const {
      page = 1,
      limit = this.defaultLimit,
      orderBy = 'created_at',
      orderDirection = 'DESC',
      filters = {},
      select = '*',
      joins = [],
      groupBy = null,
      having = null
    } = options;

    // Validar e limitar o limit
    const validLimit = Math.min(limit, this.maxLimit);
    const offset = (page - 1) * validLimit;

    // Construir SELECT
    let query = `SELECT ${select} FROM ${this.tableName}`;
    const params = [];
    let paramCount = 0;

    // Adicionar JOINs
    if (joins.length > 0) {
      query += ` ${joins.join(' ')}`;
    }

    // Construir WHERE
    const whereConditions = [];
    
    // Soft delete check (se a tabela tiver deleted_at)
    if (await this.hasColumn('deleted_at')) {
      whereConditions.push(`${this.tableName}.deleted_at IS NULL`);
    }

    // Filtros din√¢micos
    Object.entries(filters).forEach(([key, value]) => {
      if (value !== undefined && value !== null && value !== '') {
        paramCount++;
        if (Array.isArray(value)) {
          whereConditions.push(`${key} = ANY($${paramCount})`);
          params.push(value);
        } else if (typeof value === 'string' && value.includes('%')) {
          whereConditions.push(`${key} ILIKE $${paramCount}`);
          params.push(value);
        } else {
          whereConditions.push(`${key} = $${paramCount}`);
          params.push(value);
        }
      }
    });

    if (whereConditions.length > 0) {
      query += ` WHERE ${whereConditions.join(' AND ')}`;
    }

    // GROUP BY
    if (groupBy) {
      query += ` GROUP BY ${groupBy}`;
    }

    // HAVING
    if (having) {
      query += ` HAVING ${having}`;
    }

    // Contar total de registros - CORRE√á√ÉO AQUI
    let countQuery = `SELECT COUNT(*) as total FROM ${this.tableName}`;
    
    if (joins.length > 0) {
      countQuery += ` ${joins.join(' ')}`;
    }
    
    if (whereConditions.length > 0) {
      countQuery += ` WHERE ${whereConditions.join(' AND ')}`;
    }

    // GROUP BY e HAVING para count (se aplic√°vel)
    if (groupBy) {
      countQuery += ` GROUP BY ${groupBy}`;
    }
    if (having) {
      countQuery += ` HAVING ${having}`;
    }

    // Se h√° GROUP BY, precisamos contar diferentemente
    if (groupBy) {
      countQuery = `SELECT COUNT(*) as total FROM (${countQuery}) as subquery`;
    }

    const countResult = await db.query(countQuery, params);
    const total = groupBy ? parseInt(countResult.rows[0].total) : parseInt(countResult.rows[0].total);

    // ORDER BY
    const allowedOrderColumns = await this.getTableColumns();
    if (allowedOrderColumns.includes(orderBy.split('.').pop())) {
      query += ` ORDER BY ${orderBy} ${orderDirection.toUpperCase()}`;
    } else {
      query += ` ORDER BY created_at DESC`;
    }

    // LIMIT e OFFSET
    paramCount++;
    query += ` LIMIT $${paramCount}`;
    params.push(validLimit);

    paramCount++;
    query += ` OFFSET $${paramCount}`;
    params.push(offset);

    const result = await db.query(query, params);

    return {
      data: result.rows,
      pagination: {
        page: parseInt(page),
        limit: validLimit,
        total,
        totalPages: Math.ceil(total / validLimit),
        hasNext: page * validLimit < total,
        hasPrev: page > 1
      }
    };
  } catch (error) {
    logger.error(`Erro ao buscar registros de ${this.tableName}:`, error);
    throw error;
  }
}

  // Buscar por ID
  async findById(id, options = {}) {
    try {
      const { select = '*', joins = [] } = options;
      
      let query = `SELECT ${select} FROM ${this.tableName}`;
      
      if (joins.length > 0) {
        query += ` ${joins.join(' ')}`;
      }
      
      query += ` WHERE ${this.tableName}.id = $1`;
      
      if (await this.hasColumn('deleted_at')) {
        query += ` AND ${this.tableName}.deleted_at IS NULL`;
      }

      const result = await db.query(query, [id]);
      return result.rows[0];
    } catch (error) {
      logger.error(`Erro ao buscar registro ${id} de ${this.tableName}:`, error);
      throw error;
    }
  }

  // Buscar por campos espec√≠ficos
  async findBy(criteria, options = {}) {
    try {
      const { select = '*', joins = [], orderBy = 'created_at', orderDirection = 'DESC' } = options;
      
      let query = `SELECT ${select} FROM ${this.tableName}`;
      const params = [];
      let paramCount = 0;

      if (joins.length > 0) {
        query += ` ${joins.join(' ')}`;
      }

      const whereConditions = [];
      
      if (await this.hasColumn('deleted_at')) {
        whereConditions.push(`${this.tableName}.deleted_at IS NULL`);
      }

      Object.entries(criteria).forEach(([key, value]) => {
        paramCount++;
        whereConditions.push(`${key} = $${paramCount}`);
        params.push(value);
      });

      if (whereConditions.length > 0) {
        query += ` WHERE ${whereConditions.join(' AND ')}`;
      }

      query += ` ORDER BY ${orderBy} ${orderDirection}`;

      const result = await db.query(query, params);
      return result.rows;
    } catch (error) {
      logger.error(`Erro ao buscar registros de ${this.tableName} por crit√©rio:`, error);
      throw error;
    }
  }

  // Buscar um registro por crit√©rio
  async findOneBy(criteria, options = {}) {
    const results = await this.findBy(criteria, { ...options, limit: 1 });
    return results[0];
  }

  // Criar registro
  async create(data, options = {}) {
    try {
      const { returning = '*' } = options;
      
      // Adicionar timestamps se as colunas existirem
      if (await this.hasColumn('created_at')) {
        data.created_at = new Date();
      }
      if (await this.hasColumn('updated_at')) {
        data.updated_at = new Date();
      }

      const keys = Object.keys(data);
      const values = Object.values(data);
      const placeholders = keys.map((_, index) => `$${index + 1}`);

      const query = `
        INSERT INTO ${this.tableName} (${keys.join(', ')})
        VALUES (${placeholders.join(', ')})
        RETURNING ${returning}
      `;

      const result = await db.query(query, values);
      return result.rows[0];
    } catch (error) {
      logger.error(`Erro ao criar registro em ${this.tableName}:`, error);
      throw error;
    }
  }

  // Atualizar registro
  async update(id, data, options = {}) {
    try {
      const { returning = '*' } = options;
      
      // Adicionar updated_at se a coluna existir
      if (await this.hasColumn('updated_at')) {
        data.updated_at = new Date();
      }

      const entries = Object.entries(data);
      const setClause = entries.map(([key], index) => `${key} = $${index + 1}`);
      const values = entries.map(([, value]) => value);
      values.push(id);

      let query = `
        UPDATE ${this.tableName}
        SET ${setClause.join(', ')}
        WHERE id = $${values.length}
      `;

      if (await this.hasColumn('deleted_at')) {
        query += ` AND deleted_at IS NULL`;
      }

      query += ` RETURNING ${returning}`;

      const result = await db.query(query, values);
      return result.rows[0];
    } catch (error) {
      logger.error(`Erro ao atualizar registro ${id} em ${this.tableName}:`, error);
      throw error;
    }
  }

  // Soft delete
  async softDelete(id) {
    try {
      if (!(await this.hasColumn('deleted_at'))) {
        throw new Error(`Tabela ${this.tableName} n√£o suporta soft delete`);
      }

      const query = `
        UPDATE ${this.tableName}
        SET deleted_at = $1, updated_at = $2
        WHERE id = $3 AND deleted_at IS NULL
        RETURNING id
      `;

      const result = await db.query(query, [new Date(), new Date(), id]);
      return result.rows[0];
    } catch (error) {
      logger.error(`Erro ao fazer soft delete do registro ${id} em ${this.tableName}:`, error);
      throw error;
    }
  }

  // Hard delete
  async delete(id) {
    try {
      let query = `DELETE FROM ${this.tableName} WHERE id = $1`;
      
      if (await this.hasColumn('deleted_at')) {
        query += ` AND deleted_at IS NULL`;
      }
      
      query += ` RETURNING id`;

      const result = await db.query(query, [id]);
      return result.rows[0];
    } catch (error) {
      logger.error(`Erro ao deletar registro ${id} em ${this.tableName}:`, error);
      throw error;
    }
  }

  // Restaurar soft deleted
  async restore(id) {
    try {
      if (!(await this.hasColumn('deleted_at'))) {
        throw new Error(`Tabela ${this.tableName} n√£o suporta restore`);
      }

      const query = `
        UPDATE ${this.tableName}
        SET deleted_at = NULL, updated_at = $1
        WHERE id = $2
        RETURNING *
      `;

      const result = await db.query(query, [new Date(), id]);
      return result.rows[0];
    } catch (error) {
      logger.error(`Erro ao restaurar registro ${id} em ${this.tableName}:`, error);
      throw error;
    }
  }

  // Contar registros
  async count(criteria = {}) {
    try {
      let query = `SELECT COUNT(*) as total FROM ${this.tableName}`;
      const params = [];
      let paramCount = 0;

      const whereConditions = [];
      
      if (await this.hasColumn('deleted_at')) {
        whereConditions.push(`deleted_at IS NULL`);
      }

      Object.entries(criteria).forEach(([key, value]) => {
        paramCount++;
        whereConditions.push(`${key} = $${paramCount}`);
        params.push(value);
      });

      if (whereConditions.length > 0) {
        query += ` WHERE ${whereConditions.join(' AND ')}`;
      }

      const result = await db.query(query, params);
      return parseInt(result.rows[0].total);
    } catch (error) {
      logger.error(`Erro ao contar registros em ${this.tableName}:`, error);
      throw error;
    }
  }

  // Verificar se existe
  async exists(criteria) {
    const count = await this.count(criteria);
    return count > 0;
  }
}


  module.exports = BaseRepository;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\clientes.repository.js
================================================================================

// src/repositories/clientes.repository.js
const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class ClientesRepository extends BaseRepository {
  constructor() {
    super('clientes');
    this.defaultLimit = this.defaultLimit || 20;
    this.maxLimit = this.maxLimit || 100;
  }

  /** ----------------------------------------------------------------
   * Helpers de metadados (exist√™ncia de tabela/coluna e soft delete)
   * ---------------------------------------------------------------- */
  async _tableExists(tableName) {
    const sql = `
      SELECT 1
      FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = $1
      LIMIT 1
    `;
    const r = await this.executeQuery(sql, [String(tableName)]);
    return r.rowCount > 0;
  }

  async _tableHasColumn(tableName, columnName) {
    const sql = `
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public' AND table_name = $1 AND column_name = $2
      LIMIT 1
    `;
    const r = await this.executeQuery(sql, [String(tableName), String(columnName)]);
    return r.rowCount > 0;
  }

  async _whereNotDeleted(alias = 'c') {
    const hasDeletedAt = await this._tableHasColumn(this.tableName, 'deleted_at');
    return hasDeletedAt ? `${alias}.deleted_at IS NULL` : '1=1';
  }

  async _andNotDeleted(alias = 'c') {
    return `AND ${(await this._whereNotDeleted(alias))}`;
  }

  /** ----------------------------------------------------------------
   * Descoberta din√¢mica da tabela de endere√ßos e colunas dispon√≠veis
   * ---------------------------------------------------------------- */
  async _resolveEnderecoSchema() {
    const candidateTables = [
      'enderecos_cliente',
      'endereco_entrega',
      'enderecos',
      'clientes_enderecos'
    ];
    const candidateFKs = ['cliente_id', 'id_cliente'];

    const getColumns = async (tableName) => {
      const sql = `
        SELECT column_name
        FROM information_schema.columns
        WHERE table_schema='public' AND table_name=$1
      `;
      const r = await this.executeQuery(sql, [String(tableName)]);
      return new Set(r.rows.map(x => x.column_name));
    };

    for (const t of candidateTables) {
      if (await this._tableExists(t)) {
        const cols = await getColumns(t);
        for (const fk of candidateFKs) {
          if (cols.has(fk)) {
            const softClause = cols.has('deleted_at') ? `${t}.deleted_at IS NULL` : '1=1';
            const idColExists = cols.has('id');
            return { table: t, fk, softClause, columns: cols, idColExists };
          }
        }
      }
    }
    return null; // sem tabela compat√≠vel
  }

  /** ----------------------------------------------------------------
   * M√©todos de neg√≥cio
   * ---------------------------------------------------------------- */

  // ‚úÖ ADICIONADO: M√©todo para buscar por CNPJ (usado pelo webhook)
  async findByCnpj(cnpj) {
    try {
      const andNotDeleted = await this._andNotDeleted('c');
      const sql = `
        SELECT * 
        FROM ${this.tableName} c 
        WHERE c.documento = $1 ${andNotDeleted}
        LIMIT 1
      `;
      const r = await this.executeQuery(sql, [cnpj]);
      return r.rows[0] || null;
    } catch (err) {
      logger.error('Erro ao buscar cliente por CNPJ:', err);
      throw err;
    }
  }

  async findByDocumento(documento) {
    try {
      const sql = `SELECT * FROM clientes WHERE documento = $1 LIMIT 1`;
      const result = await this.database.query(sql, [documento]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Erro ao buscar cliente por documento:', error);
      throw error;
    }
  }

  async findByCodigo(codCliente) {
    try {
      const andNotDeleted = await this._andNotDeleted('c');
      const sql = `
        SELECT *
        FROM ${this.tableName} c
        WHERE c.cod_cliente = $1 ${andNotDeleted}
        LIMIT 1
      `;
      const r = await this.executeQuery(sql, [codCliente]);
      return r.rows[0] || null;
    } catch (err) {
      logger.error('Erro ao buscar cliente por c√≥digo:', err);
      throw err;
    }
  }

  // === helper: resolve schema de notas do cliente ===
  async _resolveNotasSchema() {
    const table = 'notas_fiscais';
    // existem bases que usam 'cliente_id' ou 'id_cliente'
    const candidateFKs = ['cliente_id', 'id_cliente'];
    // checa se a tabela existe
    const tableExists = await this._tableExists(table);
    if (!tableExists) return null;

    // pega colunas existentes
    const colsRes = await this.executeQuery(`
      SELECT column_name
      FROM information_schema.columns
      WHERE table_schema='public' AND table_name=$1
    `, [table]);
    const columns = new Set(colsRes.rows.map(r => r.column_name));

    // escolhe a FK que existir
    const fk = candidateFKs.find(k => columns.has(k));
    if (!fk) return null;

    // soft delete opcional em notas
    const softClause = columns.has('deleted_at') ? `${table}.deleted_at IS NULL` : '1=1';

    return { table, fk, columns, softClause };
  }

  // alias para manter compatibilidade com o controller atual
  async findByCodCliente(codCliente) {
    return this.findByCodigo(codCliente);
  }

  // Cliente com endere√ßos agregados (N√ÉO quebra se tabela/colunas mudarem)
  async findWithEnderecos(id) {
    try {
      const endCfg = await this._resolveEnderecoSchema();
      const andNotDeletedC = await this._andNotDeleted('c');

      if (!endCfg) {
        const sql = `
          SELECT c.*, '[]'::json AS enderecos
          FROM ${this.tableName} c
          WHERE c.id = $1 ${andNotDeletedC}
          LIMIT 1
        `;
        const r = await this.executeQuery(sql, [id]);
        return r.rows[0] || null;
      }

      const { table, fk, softClause, columns, idColExists } = endCfg;

      // Mapeia chaves de sa√≠da ‚Üí poss√≠veis colunas da tabela de endere√ßos
      const mappings = [
        { key:'id',           sources:['id'] },
        { key:'apelido',      sources:['apelido','alias','nome'] },
        { key:'logradouro',   sources:['logradouro','rua','endereco','endereco_logradouro'] },
        { key:'numero',       sources:['numero','num'] },
        { key:'bairro',       sources:['bairro','district'] },
        { key:'cidade',       sources:['cidade','municipio'] },
        { key:'uf',           sources:['uf','estado'] },
        { key:'cep',          sources:['cep','codigo_postal'] },
        { key:'complemento',  sources:['complemento','compl'] },
        { key:'principal',    sources:['principal','is_principal','padrao'] },
        { key:'latitude',     sources:['latitude','lat'] },
        { key:'longitude',    sources:['longitude','lng','long','lon'] }
      ];

      const jsonPairs = [];
      for (const map of mappings) {
        const col = map.sources.find(s => columns.has(s));
        if (col) jsonPairs.push(`'${map.key}', ec."${col}"`);
      }
      if (jsonPairs.length === 0) {
        // Garante ao menos um identificador de refer√™ncia
        const refCol = idColExists ? 'ec.id' : `ec.${fk}`;
        jsonPairs.push(`'ref', ${refCol}`);
      }
      const jsonObject = `json_build_object(${jsonPairs.join(', ')})`;

      // Ordena√ß√£o da lista de endere√ßos (tudo QUALIFICADO com alias ec.)
      const primaryCol = ['principal','is_principal','padrao'].find(c => columns.has(c)) || null;
      const notNullRef = idColExists ? 'ec.id' : `ec.${fk}`;
      const orderTerms = [];
      if (primaryCol) orderTerms.push(`ec."${primaryCol}" DESC NULLS LAST`);
      orderTerms.push(notNullRef); // sempre ordena por refer√™ncia no final
      const orderClause = orderTerms.join(', ');

      const sql = `
        SELECT 
          c.*,
          json_agg(${jsonObject} ORDER BY ${orderClause})
            FILTER (WHERE ${notNullRef} IS NOT NULL) AS enderecos
        FROM ${this.tableName} c
        LEFT JOIN ${table} ec
          ON ec.${fk} = c.id
         AND ${softClause}
        WHERE c.id = $1 ${andNotDeletedC}
        GROUP BY c.id
      `;
      const r = await this.executeQuery(sql, [id]);
      return r.rows[0] || null;
    } catch (err) {
      logger.error('Erro ao buscar cliente com endere√ßos:', err);
      throw err;
    }
  }

  // Listagem com filtros + pagina√ß√£o + total_enderecos (resiliente)
  async findAll(options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 'c.created_at',
        orderDirection = 'DESC',
        filters = {}
      } = options;

      const validLimit = Math.min(Number(limit) || this.defaultLimit, this.maxLimit);
      const offset = (Number(page) - 1) * validLimit;

      const orderable = new Set([
        'c.id', 'c.nome', 'c.documento', 'c.cod_cliente',
        'c.cidade', 'c.uf', 'c.created_at', 'c.updated_at'
      ]);
      const normalizeOrderBy = (col) => {
        if (!col) return 'c.created_at';
        const withAlias = col.includes('.') ? col : `c.${col}`;
        return orderable.has(withAlias) ? withAlias : 'c.created_at';
      };
      const _orderBy = normalizeOrderBy(orderBy);
      const _orderDir = String(orderDirection).toUpperCase() === 'ASC' ? 'ASC' : 'DESC';

      const whereNotDeletedC = await this._whereNotDeleted('c');
      const whereClauses = [whereNotDeletedC];
      const params = [];
      let i = 0;

      if (filters.nome) {
        params.push(`%${filters.nome}%`); i++;
        whereClauses.push(`c.nome ILIKE $${i}`);
      }
      if (filters.documento) {
        params.push(filters.documento); i++;
        whereClauses.push(`c.documento = $${i}`);
      }
      if (filters.cod_cliente) {
        params.push(filters.cod_cliente); i++;
        whereClauses.push(`c.cod_cliente = $${i}`);
      }
      if (filters.cidade) {
        params.push(`%${filters.cidade}%`); i++;
        whereClauses.push(`c.cidade ILIKE $${i}`);
      }
      if (filters.uf) {
        params.push(filters.uf); i++;
        whereClauses.push(`c.uf = $${i}`);
      }

      const whereSQL = `WHERE ${whereClauses.join(' AND ')}`;

      // COUNT total com os mesmos filtros
      const countQuery = `
        SELECT COUNT(DISTINCT c.id) AS total
        FROM ${this.tableName} c
        ${whereSQL}
      `;
      const countResult = await this.executeQuery(countQuery, params);
      const total = parseInt(countResult.rows?.[0]?.total || 0, 10);

      // Query principal (conta endere√ßos se existir tabela)
      const endCfg = await this._resolveEnderecoSchema();

      let query;
      if (endCfg) {
        const { table, fk, softClause } = endCfg;
        query = `
          SELECT
            c.*,
            COUNT(ec.${fk}) AS total_enderecos
          FROM ${this.tableName} c
          LEFT JOIN ${table} ec
            ON ec.${fk} = c.id
           AND ${softClause}
          ${whereSQL}
          GROUP BY c.id
          ORDER BY ${_orderBy} ${_orderDir}
          LIMIT $${i + 1}
          OFFSET $${i + 2}
        `;
      } else {
        query = `
          SELECT
            c.*,
            0::bigint AS total_enderecos
          FROM ${this.tableName} c
          ${whereSQL}
          ORDER BY ${_orderBy} ${_orderDir}
          LIMIT $${i + 1}
          OFFSET $${i + 2}
        `;
      }

      const queryParams = [...params, validLimit, offset];
      const result = await this.executeQuery(query, queryParams);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page, 10),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (err) {
      logger.error('Erro ao listar clientes:', err);
      throw err;
    }
  }

  // Autocomplete por nome
  async searchByName(searchTerm, limit = 10) {
    try {
      const andNotDeleted = await this._andNotDeleted('c');
      const sql = `
        SELECT c.id, c.nome, c.documento, c.cidade, c.uf
        FROM ${this.tableName} c
        WHERE c.nome ILIKE $1 ${andNotDeleted}
        ORDER BY c.nome
        LIMIT $2
      `;
      const r = await this.executeQuery(sql, [`%${searchTerm}%`, Number(limit)]);
      return r.rows;
    } catch (err) {
      logger.error('Erro ao buscar clientes por nome:', err);
      throw err;
    }
  }

  // Filtros simples (se seu controller exp√µe)
  async findByUf(uf) {
    try {
      const andNotDeleted = await this._andNotDeleted('c');
      const sql = `
        SELECT *
        FROM ${this.tableName} c
        WHERE c.uf = $1 ${andNotDeleted}
        ORDER BY c.nome
      `;
      const r = await this.executeQuery(sql, [uf]);
      return r.rows;
    } catch (err) {
      logger.error('Erro ao buscar clientes por UF:', err);
      throw err;
    }
  }

  async findByCidade(cidade) {
    try {
      const andNotDeleted = await this._andNotDeleted('c');
      const sql = `
        SELECT *
        FROM ${this.tableName} c
        WHERE c.cidade ILIKE $1 ${andNotDeleted}
        ORDER BY c.nome
      `;
      const r = await this.executeQuery(sql, [`%${cidade}%`]);
      return r.rows;
    } catch (err) {
      logger.error('Erro ao buscar clientes por cidade:', err);
      throw err;
    }
  }

  // Unicidade de documento
  async validateUniqueDocumento(documento, excludeId = null) {
    try {
      const andNotDeleted = await this._andNotDeleted('c');
      const params = [documento];
      let i = 1;

      let where = `WHERE c.documento = $${i} ${andNotDeleted}`;
      if (excludeId) {
        i += 1;
        params.push(excludeId);
        where += ` AND c.id <> $${i}`;
      }

      const sql = `
        SELECT c.id
        FROM ${this.tableName} c
        ${where}
        LIMIT 1
      `;
      const r = await this.executeQuery(sql, params);
      return r.rowCount === 0;
    } catch (err) {
      logger.error('Erro ao validar documento √∫nico (clientes):', err);
      throw err;
    }
  }




// Adicione este m√©todo se n√£o existir no clientes.repository.js
async findByCnpj(cnpj) {
  try {
    const andNotDeleted = await this._andNotDeleted('c');
    const sql = `
      SELECT * 
      FROM ${this.tableName} c 
      WHERE c.documento = $1 ${andNotDeleted}
      LIMIT 1
    `;
    const r = await this.executeQuery(sql, [cnpj]);
    return r.rows[0] || null;
  } catch (err) {
    logger.error('Erro ao buscar cliente por CNPJ:', err);
    throw err;
  }
}



  // Estat√≠sticas gerais
  async getStats() {
    try {
      const whereNotDeleted = await this._whereNotDeleted('c');
      const sql = `
        SELECT 
          COUNT(*) AS total,
          COUNT(DISTINCT c.cidade) AS total_cidades,
          COUNT(DISTINCT c.uf) AS total_ufs
        FROM ${this.tableName} c
        WHERE ${whereNotDeleted}
      `;
      const r = await this.executeQuery(sql);
      return r.rows[0];
    } catch (err) {
      logger.error('Erro ao obter estat√≠sticas de clientes:', err);
      throw err;
    }
  }

  // Compat: alguns controllers chamam findAllWithStats
  async findAllWithStats(options = {}) {
    return this.findAll(options);
  }
}

module.exports = ClientesRepository;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\codigo-ocorrencias.repository.js
================================================================================

const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class CodigoOcorrenciasRepository extends BaseRepository {
  constructor() {
    super('codigo_ocorrencias');
  }

  // Buscar por c√≥digo num√©rico
  async findByCodigo(codigo) {
    try {
      const where = [];
      const params = [codigo];
      const soft = await this.softDeleteClause('co');
      if (soft) where.push(soft);
      where.push(`co.codigo = $1`);

      const query = `
        SELECT co.*
        FROM ${this.tableName} co
        ${this._where(where)}
        LIMIT 1
      `;

      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar c√≥digo de ocorr√™ncia por c√≥digo:', error);
      throw error;
    }
  }

  // Validar c√≥digo √∫nico
  async validateUniqueCodigo(codigo, excludeId = null) {
    try {
      const where = [];
      const params = [codigo];
      const soft = await this.softDeleteClause('co');
      if (soft) where.push(soft);
      where.push(`co.codigo = $1`);

      if (excludeId) {
        params.push(excludeId);
        where.push(`co.id != $${params.length}`);
      }

      const query = `
        SELECT co.id 
        FROM ${this.tableName} co
        ${this._where(where)}
        LIMIT 1
      `;

      const result = await this.executeQuery(query, params);
      return result.rows.length === 0;
    } catch (error) {
      logger.error('Erro ao validar c√≥digo √∫nico:', error);
      throw error;
    }
  }

  // Verificar se c√≥digo est√° em uso
  async isUsedInOcorrencias(id) {
    try {
      const query = `
        SELECT COUNT(*) as count
        FROM ocorrencias o
        WHERE o.codigo = (
          SELECT codigo FROM ${this.tableName} WHERE id = $1
        )
        LIMIT 1
      `;

      const result = await this.executeQuery(query, [id]);
      return parseInt(result.rows[0]?.count || 0, 10) > 0;
    } catch (error) {
      logger.error('Erro ao verificar uso do c√≥digo:', error);
      throw error;
    }
  }

  // Listar tipos dispon√≠veis
  async getTipos() {
    try {
      const query = `
        SELECT DISTINCT tipo
        FROM ${this.tableName}
        WHERE tipo IS NOT NULL
        ORDER BY tipo
      `;

      const result = await this.executeQuery(query);
      return result.rows.map(row => row.tipo);
    } catch (error) {
      logger.error('Erro ao buscar tipos:', error);
      throw error;
    }
  }

  // Listar processos dispon√≠veis
  async getProcessos() {
    try {
      const query = `
        SELECT DISTINCT processo
        FROM ${this.tableName}
        WHERE processo IS NOT NULL
        ORDER BY processo
      `;

      const result = await this.executeQuery(query);
      return result.rows.map(row => row.processo);
    } catch (error) {
      logger.error('Erro ao buscar processos:', error);
      throw error;
    }
  }

  // Buscar com filtros espec√≠ficos
  async findAllWithFilters(options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 'co.codigo',
        orderDirection = 'ASC',
        filters = {}
      } = options;

      const validLimit = Math.min(limit, this.maxLimit);
      const offset = (page - 1) * validLimit;

      const where = [];
      const params = [];
      const soft = await this.softDeleteClause('co');
      if (soft) where.push(soft);

      // Aplicar filtros
      let paramCount = 0;
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          paramCount++;
          if (key === 'finalizadora' || key === 'api') {
            where.push(`co.${key} = $${paramCount}`);
          } else if (typeof value === 'string' && value.includes('%')) {
            where.push(`co.${key} ILIKE $${paramCount}`);
          } else {
            where.push(`co.${key} = $${paramCount}`);
          }
          params.push(value);
        }
      });

      // Query de dados
      let dataSql = `
        SELECT co.*
        FROM ${this.tableName} co
        ${this._where(where)}
        ORDER BY ${orderBy} ${orderDirection.toUpperCase()}
        LIMIT $${params.push(validLimit)}
        OFFSET $${params.push(offset)}
      `;

      // Query de contagem
      let countSql = `
        SELECT COUNT(*) AS total
        FROM ${this.tableName} co
        ${this._where(where)}
      `;

      const [countResult, result] = await Promise.all([
        this.executeQuery(countSql, params.slice(0, params.length - 2)),
        this.executeQuery(dataSql, params)
      ]);

      const total = parseInt(countResult.rows[0]?.total || 0, 10);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page, 10),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (error) {
      logger.error('Erro ao buscar c√≥digos de ocorr√™ncia com filtros:', error);
      throw error;
    }
  }
}

module.exports = CodigoOcorrenciasRepository;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\embarcadores.repository.js
================================================================================

// src/repositories/embarcadores.repository.js
const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class EmbarcadoresRepository extends BaseRepository {
  constructor() {
    super('embarcadores');
    // toler√¢ncia caso BaseRepository n√£o defina defaults
    this.defaultLimit = this.defaultLimit || 20;
    this.maxLimit = this.maxLimit || 100;
  }

  /** -----------------------------
   * Helpers internos (soft delete / metadata)
   * ------------------------------ */

  // Verifica se uma tabela possui uma coluna
  async _tableHasColumn(tableName, columnName) {
    const sql = `
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name = $1
        AND column_name = $2
      LIMIT 1
    `;
    const r = await this.executeQuery(sql, [String(tableName), String(columnName)]);
    return r.rowCount > 0;
  }

  // Cl√°usula WHERE para ignorar registros deletados por alias (ou neutro se n√£o houver deleted_at)
  async _whereNotDeleted(alias = 'e') {
    const hasDeletedAt = await this._tableHasColumn(this.tableName, 'deleted_at');
    return hasDeletedAt ? `${alias}.deleted_at IS NULL` : '1=1';
  }

  // Atalho para "AND not deleted"
  async _andNotDeleted(alias = 'e') {
    return `AND ${(await this._whereNotDeleted(alias))}`;
  }

  // Retorna condi√ß√£o opcional de not-deleted para outra tabela (ex.: notas_fiscais)
  async _andOtherTableNotDeleted(otherTableAlias, otherTableName) {
    const hasDeletedAt = await this._tableHasColumn(otherTableName, 'deleted_at');
    return hasDeletedAt ? `AND ${otherTableAlias}.deleted_at IS NULL` : '';
  }

  /** -----------------------------
   * M√©todos de neg√≥cio
   * ------------------------------ */

  // Buscar por documento (CNPJ)
async findByDocumento(documento) {
  try {
    const sql = `SELECT * FROM embarcadores WHERE documento = $1 LIMIT 1`;
    const result = await this.database.query(sql, [documento]);
    return result.rows[0] || null;
  } catch (error) {
    console.error('Erro ao buscar embarcador por documento:', error);
    throw error;
  }
}

  // Buscar embarcador + estat√≠sticas de notas fiscais
  async findWithNotasStats(id) {
    try {
      const andNotDeletedE = await this._andNotDeleted('e');
      const andNotDeletedNF = await this._andOtherTableNotDeleted('nf', 'notas_fiscais');

      const query = `
        SELECT 
          e.*,
          COUNT(nf.id) AS total_notas,
          COUNT(CASE WHEN nf.finalizada = true THEN 1 END) AS notas_finalizadas,
          COUNT(CASE WHEN nf.created_at >= CURRENT_DATE - INTERVAL '30 days' THEN 1 END) AS notas_mes,
          COALESCE(SUM(nf.valor), 0) AS valor_total,
          COALESCE(SUM(nf.peso_calculo), 0) AS peso_total
        FROM ${this.tableName} e
        LEFT JOIN notas_fiscais nf
          ON nf.embarcador_id = e.id
          ${andNotDeletedNF}
        WHERE e.id = $1 ${andNotDeletedE}
        GROUP BY e.id
      `;
      const result = await this.executeQuery(query, [id]);
      return result.rows[0] || null;
    } catch (error) {
      logger.error('Erro ao buscar embarcador com estat√≠sticas:', error);
      throw error;
    }
  }

  // Buscar por cidade
  async findByCidade(cidade) {
    try {
      const andNotDeleted = await this._andNotDeleted('e');
      const query = `
        SELECT e.*
        FROM ${this.tableName} e
        WHERE e.cidade ILIKE $1 ${andNotDeleted}
        ORDER BY e.nome
      `;
      const result = await this.executeQuery(query, [`%${cidade}%`]);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar embarcadores por cidade:', error);
      throw error;
    }
  }

  // Buscar por UF
  async findByUf(uf) {
    try {
      const andNotDeleted = await this._andNotDeleted('e');
      const query = `
        SELECT e.*
        FROM ${this.tableName} e
        WHERE e.uf = $1 ${andNotDeleted}
        ORDER BY e.nome
      `;
      const result = await this.executeQuery(query, [uf]);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar embarcadores por UF:', error);
      throw error;
    }
  }

  // Buscar com dep√≥sitos associados
  // OBS: mant√©m o nome de tabela "deposito" conforme seu c√≥digo original.
  async findWithDepositos(id) {
    try {
      const andNotDeleted = await this._andNotDeleted('e');
      const query = `
        SELECT 
          e.*,
          json_agg(
            json_build_object(
              'id', d.id,
              'nome', d.nome,
              'latitude', d.latitude,
              'longitude', d.longitude,
              'endereco_completo', d.endereco_completo,
              'restricao_logistica_id', d.restricao_logistica_id
            ) ORDER BY d.id
          ) FILTER (WHERE d.id IS NOT NULL) AS depositos
        FROM ${this.tableName} e
        LEFT JOIN deposito d ON d.embarcador_id = e.id
        WHERE e.id = $1 ${andNotDeleted}
        GROUP BY e.id
      `;
      const result = await this.executeQuery(query, [id]);
      return result.rows[0] || null;
    } catch (error) {
      logger.error('Erro ao buscar embarcador com dep√≥sitos:', error);
      throw error;
    }
  }

  // Listagem com estat√≠sticas + filtros + pagina√ß√£o
  async findAllWithStats(options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 'e.created_at',
        orderDirection = 'DESC',
        filters = {}
      } = options;

      const validLimit = Math.min(Number(limit) || this.defaultLimit, this.maxLimit);
      const offset = (Number(page) - 1) * validLimit;

      // Whitelist de colunas para ORDER BY (usar sempre com alias e.)
      const orderable = new Set([
        'e.id', 'e.nome', 'e.documento', 'e.cidade', 'e.uf', 'e.created_at', 'e.updated_at'
      ]);

      // Permitir que venha "created_at" do validador e normalizar para "e.created_at"
      const normalizeOrderBy = (col) => {
        if (!col) return 'e.created_at';
        const hasAlias = col.includes('.');
        const withAlias = hasAlias ? col : `e.${col}`;
        return orderable.has(withAlias) ? withAlias : 'e.created_at';
      };

      const _orderBy = normalizeOrderBy(orderBy);
      const _orderDir = String(orderDirection).toUpperCase() === 'ASC' ? 'ASC' : 'DESC';

      const whereNotDeletedE = await this._whereNotDeleted('e');
      const andNotDeletedNF = await this._andOtherTableNotDeleted('nf', 'notas_fiscais');

      const whereClauses = [whereNotDeletedE];
      const params = [];
      let i = 0;

      if (filters.nome) {
        params.push(`%${filters.nome}%`); i++;
        whereClauses.push(`e.nome ILIKE $${i}`);
      }
      if (filters.documento) {
        params.push(filters.documento); i++;
        whereClauses.push(`e.documento = $${i}`);
      }
      if (filters.cidade) {
        params.push(`%${filters.cidade}%`); i++;
        whereClauses.push(`e.cidade ILIKE $${i}`);
      }
      if (filters.uf) {
        params.push(filters.uf); i++;
        whereClauses.push(`e.uf = $${i}`);
      }

      const whereSQL = whereClauses.length ? `WHERE ${whereClauses.join(' AND ')}` : '';

      const query = `
        SELECT
          e.*,
          COUNT(DISTINCT nf.id) AS total_notas,
          COUNT(DISTINCT CASE WHEN nf.finalizada = true THEN nf.id END) AS notas_finalizadas,
          COUNT(DISTINCT d.id) AS total_depositos,
          COALESCE(SUM(nf.valor), 0) AS valor_total
        FROM ${this.tableName} e
        LEFT JOIN notas_fiscais nf
          ON nf.embarcador_id = e.id
          ${andNotDeletedNF}
        LEFT JOIN deposito d
          ON d.embarcador_id = e.id
        ${whereSQL}
        GROUP BY e.id
        ORDER BY ${_orderBy} ${_orderDir}
        LIMIT $${i + 1}
        OFFSET $${i + 2}
      `;
      const queryParams = [...params, validLimit, offset];

      const countQuery = `
        SELECT COUNT(DISTINCT e.id) AS total
        FROM ${this.tableName} e
        ${whereSQL}
      `;
      const countResult = await this.executeQuery(countQuery, params);
      const total = parseInt(countResult.rows?.[0]?.total || 0, 10);

      const result = await this.executeQuery(query, queryParams);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page, 10),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (error) {
      logger.error('Erro ao buscar embarcadores com estat√≠sticas:', error);
      throw error;
    }
  }

  // Autocomplete por nome
  async searchByName(searchTerm, limit = 10) {
    try {
      const andNotDeleted = await this._andNotDeleted('e');
      const query = `
        SELECT e.id, e.nome, e.documento, e.cidade, e.uf
        FROM ${this.tableName} e
        WHERE e.nome ILIKE $1 ${andNotDeleted}
        ORDER BY e.nome
        LIMIT $2
      `;
      const result = await this.executeQuery(query, [`%${searchTerm}%`, Number(limit)]);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar embarcadores por nome:', error);
      throw error;
    }
  }

  // Valida unicidade de documento (CNPJ)
  async validateUniqueDocumento(documento, excludeId = null) {
    try {
      const andNotDeleted = await this._andNotDeleted('e');
      const params = [documento];
      let i = 1;

      let where = `WHERE e.documento = $${i} ${andNotDeleted}`;
      if (excludeId) {
        i += 1;
        params.push(excludeId);
        where += ` AND e.id <> $${i}`;
      }

      const query = `
        SELECT e.id
        FROM ${this.tableName} e
        ${where}
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rowCount === 0;
    } catch (error) {
      logger.error('Erro ao validar documento √∫nico:', error);
      throw error;
    }
  }

  // Estat√≠sticas gerais
  async getStats() {
    try {
      const whereNotDeleted = await this._whereNotDeleted('e');
      const query = `
        SELECT 
          COUNT(*) AS total,
          COUNT(DISTINCT e.cidade) AS total_cidades,
          COUNT(DISTINCT e.uf) AS total_ufs,
          COUNT(CASE WHEN e.inscricao_estadual IS NOT NULL AND e.inscricao_estadual <> '' THEN 1 END) AS com_inscricao_estadual
        FROM ${this.tableName} e
        WHERE ${whereNotDeleted}
      `;
      const result = await this.executeQuery(query);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas de embarcadores:', error);
      throw error;
    }
  }
}

module.exports = EmbarcadoresRepository;



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\endereco-entrega.repository.js
================================================================================

const BaseRepository = require('./base.repository');
const logger = require('../config/logger');
const Joi = require('joi');

class EnderecoEntregaRepository extends BaseRepository {
  constructor() {
    super('endereco_entrega');
    this.defaultLimit = this.defaultLimit || 20;
    this.maxLimit = this.maxLimit || 100;
  }

  // Buscar endere√ßos por cliente
  async findByCliente(clienteId) {
    try {
      const result = await this.findAll({
        filters: { cliente_id: clienteId },
        orderBy: 'created_at',
        orderDirection: 'DESC'
      });
      return result.data;
    } catch (error) {
      logger.error('Erro ao buscar endere√ßos por cliente:', error);
      throw error;
    }
  }

  /**
 * Buscar endere√ßo de entrega por cliente e CEP
 */
async findByClienteAndCep(clienteId, cep) {
  try {
    const sql = `
      SELECT * FROM endereco_entrega 
      WHERE cliente_id = $1 
      AND cep = $2 
      LIMIT 1
    `;
    
    const result = await this.database.query(sql, [clienteId, cep]);
    return result.rows[0] || null;
  } catch (error) {
    logger.error('Erro ao buscar endere√ßo por cliente e CEP:', {
      cliente_id: clienteId,
      cep,
      error: error.message
    });
    throw error;
  }
}


// Adicionar este m√©todo ao EnderecoEntregaRepository

  /**
   * Processa endere√ßo de entrega - cria novo ou atualiza existente
   * @param {Object} enderecoData - Dados do endere√ßo
   * @param {number} clienteId - ID do cliente
   * @returns {Object} - Endere√ßo processado com ID
   */
  async processEnderecoEntrega(enderecoData, clienteId) {
    try {
      // Validar dados obrigat√≥rios
      if (!enderecoData.endereco || !enderecoData.cidade || !enderecoData.uf) {
        throw new Error('Endere√ßo, cidade e UF s√£o obrigat√≥rios');
      }

      // Buscar endere√ßo existente
      const enderecosExistentes = await this.findAll({
        filters: {
          endereco: enderecoData.endereco,
          cidade: enderecoData.cidade,
          uf: enderecoData.uf
        },
        limit: 1
      });

      // Se encontrou endere√ßo existente, atualizar
      if (enderecosExistentes.data && enderecosExistentes.data.length > 0) {
        const enderecoExistente = enderecosExistentes.data[0];
        
        const dadosParaAtualizar = {
          bairro: enderecoData.bairro || enderecoExistente.bairro,
          cep: enderecoData.cep || enderecoExistente.cep,
          doca: enderecoData.doca || enderecoExistente.doca,
          rota: enderecoData.rota || enderecoExistente.rota,
          lat: enderecoData.latitude || enderecoExistente.lat,
          lon: enderecoData.longitude || enderecoExistente.lon,
          updated_at: new Date()
        };

        await this.update(enderecoExistente.id, dadosParaAtualizar);
        
        logger.debug('Endere√ßo de entrega atualizado:', {
          id: enderecoExistente.id,
          endereco: enderecoData.endereco
        });

        return {
          id: enderecoExistente.id,
          isNew: false,
          endereco: enderecoExistente
        };
      }

      // Se n√£o encontrou, criar novo endere√ßo
      const novoEndereco = {
        cliente_id: clienteId,
        endereco: enderecoData.endereco,
        bairro: enderecoData.bairro || null,
        cidade: enderecoData.cidade,
        uf: enderecoData.uf,
        cep: enderecoData.cep || null,
        doca: enderecoData.doca || null,
        rota: enderecoData.rota || null,
        lat: enderecoData.latitude || null,
        lon: enderecoData.longitude || null,
        created_at: new Date(),
        updated_at: new Date()
      };

      const enderecoCreated = await this.create(novoEndereco);
      
      logger.debug('Endere√ßo de entrega criado:', {
        id: enderecoCreated.id,
        endereco: enderecoData.endereco
      });

      return {
        id: enderecoCreated.id,
        isNew: true,
        endereco: enderecoCreated
      };

    } catch (error) {
      logger.error('Erro ao processar endere√ßo de entrega no reposit√≥rio:', {
        endereco: enderecoData.endereco,
        error: error.message
      });
      throw error;
    }
  }

  // Adicionar este m√©todo ao EnderecoEntregaRepository existente

  // M√©todo espec√≠fico para webhook - buscar endere√ßo duplicado
  async findEnderecoEntregaDuplicado(endereco, cidade, uf) {
    try {
      const sql = `
        SELECT id FROM endereco_entrega 
        WHERE endereco = $1 
        AND cidade = $2 
        AND uf = $3 
        LIMIT 1
      `;
      
      const result = await this.executeQuery(sql, [endereco, cidade, uf]);
      return result.rows[0] || null;
    } catch (error) {
      logger.error('Erro ao buscar endere√ßo duplicado:', {
        endereco,
        cidade, 
        uf,
        error: error.message
      });
      throw error;
    }
  }

  // M√©todo melhorado para validar endere√ßo √∫nico
  async validateUniqueEnderecoWebhook(endereco, cidade, uf, clienteId = null) {
    try {
      let sql = `
        SELECT id FROM endereco_entrega 
        WHERE endereco = $1 
        AND cidade = $2 
        AND uf = $3
      `;
      
      const params = [endereco, cidade, uf];
      
      if (clienteId) {
        sql += ` AND cliente_id = $4`;
        params.push(clienteId);
      }
      
      sql += ` LIMIT 1`;
      
      const result = await this.executeQuery(sql, params);
      return result.rows.length === 0; // true se n√£o encontrou (√© √∫nico)
    } catch (error) {
      logger.error('Erro ao validar endere√ßo √∫nico:', error);
      return false; // Em caso de erro, assume que n√£o √© √∫nico para evitar duplica√ß√£o
    }
  }

  // Buscar por CEP
  async findByCep(cep) {
    try {
      const query = `
        SELECT * FROM ${this.tableName} 
        WHERE cep = ? AND deleted_at IS NULL
        ORDER BY created_at DESC
        LIMIT 1
      `;
      
      const [rows] = await this.db.execute(query, [cep]);
      return rows[0] || null;
    } catch (error) {
      throw error;
    }
  }

  // Buscar por coordenadas (proximidade)
  async findByCoordinates(latitude, longitude, radius = 1) {
    try {
      const query = `
        SELECT *, 
        (6371 * acos(cos(radians(?)) * cos(radians(latitude)) * 
        cos(radians(longitude) - radians(?)) + sin(radians(?)) * 
        sin(radians(latitude)))) AS distance
        FROM ${this.tableName}
        WHERE latitude IS NOT NULL 
        AND longitude IS NOT NULL
        AND deleted_at IS NULL
        HAVING distance < ?
        ORDER BY distance
        LIMIT 10
      `;
      
      const [rows] = await this.db.execute(query, [latitude, longitude, latitude, radius]);
      return rows;
    } catch (error) {
      throw error;
    }
  }

  // Buscar por munic√≠pio e UF
  async findByLocation(municipio, uf) {
    try {
      const query = `
        SELECT * FROM ${this.tableName} 
        WHERE municipio = ? AND uf = ? AND deleted_at IS NULL
        ORDER BY created_at DESC
      `;
      
      const [rows] = await this.db.execute(query, [municipio, uf]);
      return rows;
    } catch (error) {
      throw error;
    }
  }

  // Estat√≠sticas de endere√ßos
  async getStats() {
    try {
      const query = `
        SELECT 
          COUNT(*) as total,
          COUNT(CASE WHEN latitude IS NOT NULL AND longitude IS NOT NULL THEN 1 END) as com_coordenadas,
          COUNT(DISTINCT uf) as total_ufs,
          COUNT(DISTINCT municipio) as total_municipios
        FROM ${this.tableName} 
        WHERE deleted_at IS NULL
      `;
      
      const [rows] = await this.db.execute(query);
      return rows[0];
    } catch (error) {
      throw error;
    }
  }




  // Buscar endere√ßos por cidade e UF
  async findByCidadeUf(cidade, uf) {
    try {
      const result = await this.findAll({
        filters: {
          cidade: `%${cidade}%`,
          uf: uf.toUpperCase()
        },
        orderBy: 'endereco',
        orderDirection: 'ASC'
      });
      return result.data;
    } catch (error) {
      logger.error('Erro ao buscar endere√ßos por cidade e UF:', error);
      throw error;
    }
  }

  // Buscar endere√ßos com restri√ß√£o
  async findComRestricao() {
    try {
      const result = await this.findAll({
        filters: { restrito: true },
        orderBy: 'cidade',
        orderDirection: 'ASC'
      });
      return result.data;
    } catch (error) {
      logger.error('Erro ao buscar endere√ßos com restri√ß√£o:', error);
      throw error;
    }
  }

  // Buscar endere√ßo com relacionamentos
async findWithRelations(id) {
  try {
    const query = `
      SELECT 
        ee.*,
        c.nome as cliente_nome,
        rl.nome as restricao_nome
      FROM endereco_entrega ee
      LEFT JOIN clientes c ON ee.cliente_id = c.id
      LEFT JOIN restricao_logistica rl ON ee.restricao_logistica_id = rl.id
      WHERE ee.id = $1  -- Removida a verifica√ß√£o de deleted_at
    `;
    
    const result = await this.executeQuery(query, [id]);
    return result.rows[0];
  } catch (error) {
    logger.error('Erro ao buscar endere√ßo com relacionamentos:', error);
    throw error;
  }
}

  // Validar endere√ßo √∫nico para cliente
  async validateUniqueEndereco(clienteId, endereco, cidade, uf, excludeId = null) {
    try {
      let filters = {
        cliente_id: clienteId,
        endereco: endereco,
        cidade: cidade,
        uf: uf.toUpperCase()
      };

      if (excludeId) {
        const result = await this.findBy(filters);
        return result.length === 0 || (result.length === 1 && result[0].id === parseInt(excludeId));
      } else {
        const result = await this.findBy(filters);
        return result.length === 0;
      }
    } catch (error) {
      logger.error('Erro ao validar endere√ßo √∫nico:', error);
      throw error;
    }
  }

  // Atualizar coordenadas
  async updateCoordenadas(id, lat, lon) {
    try {
      return await this.update(id, {
        lat,
        lon,
        updated_at: new Date()
      });
    } catch (error) {
      logger.error('Erro ao atualizar coordenadas:', error);
      throw error;
    }
  }
}

// Validador personalizado para CEP brasileiro
const cepValidator = (value, helpers) => {
  if (!value) return value;
  
  const cleanValue = String(value).replace(/\D/g, '');
  if (cleanValue.length !== 8) {
    return helpers.error('any.invalid');
  }
  return cleanValue;
};

// Schema para cria√ß√£o de endere√ßo de entrega
const createEnderecoEntrega = Joi.object({
  cliente_id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'Cliente √© obrigat√≥rio',
      'number.base': 'Cliente deve ser um n√∫mero',
      'number.integer': 'Cliente deve ser um n√∫mero inteiro',
      'number.positive': 'Cliente deve ser um n√∫mero positivo'
    }),

  endereco: Joi.string()
    .required()
    .max(255)
    .trim()
    .messages({
      'any.required': 'Endere√ßo √© obrigat√≥rio',
      'string.max': 'Endere√ßo deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Endere√ßo n√£o pode estar vazio'
    }),

  bairro: Joi.string()
    .required()
    .max(255)
    .trim()
    .messages({
      'any.required': 'Bairro √© obrigat√≥rio',
      'string.max': 'Bairro deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Bairro n√£o pode estar vazio'
    }),

  cidade: Joi.string()
    .required()
    .max(255)
    .trim()
    .messages({
      'any.required': 'Cidade √© obrigat√≥ria',
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Cidade n√£o pode estar vazia'
    }),

  uf: Joi.string()
    .required()
    .length(2)
    .uppercase()
    .messages({
      'any.required': 'UF √© obrigat√≥ria',
      'string.length': 'UF deve ter 2 caracteres',
      'string.empty': 'UF n√£o pode estar vazia'
    }),

  cep: Joi.string()
    .required()
    .custom(cepValidator)
    .messages({
      'any.required': 'CEP √© obrigat√≥rio',
      'any.invalid': 'CEP deve ter 8 d√≠gitos'
    }),

  doca: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Doca deve ter no m√°ximo 255 caracteres'
    }),

  lat: Joi.number()
    .precision(6)
    .allow(null)
    .messages({
      'number.base': 'Latitude deve ser um n√∫mero',
      'number.precision': 'Latitude deve ter no m√°ximo 6 casas decimais'
    }),

  lon: Joi.number()
    .precision(6)
    .allow(null)
    .messages({
      'number.base': 'Longitude deve ser um n√∫mero',
      'number.precision': 'Longitude deve ter no m√°ximo 6 casas decimais'
    }),

  restricao_logistica_id: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'Restri√ß√£o log√≠stica deve ser um n√∫mero',
      'number.integer': 'Restri√ß√£o log√≠stica deve ser um n√∫mero inteiro',
      'number.positive': 'Restri√ß√£o log√≠stica deve ser um n√∫mero positivo'
    }),

  restrito: Joi.boolean()
    .default(false)
    .messages({
      'boolean.base': 'Restrito deve ser verdadeiro ou falso'
    }),

  rota: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Rota deve ter no m√°ximo 255 caracteres'
    }),

  janela1: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 1 deve ter no m√°ximo 50 caracteres'
    }),

  janela2: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 2 deve ter no m√°ximo 50 caracteres'
    }),

  janela3: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 3 deve ter no m√°ximo 50 caracteres'
    }),

  janela4: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 4 deve ter no m√°ximo 50 caracteres'
    })
});

// Schema para atualiza√ß√£o de endere√ßo de entrega
const updateEnderecoEntrega = Joi.object({
  cliente_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Cliente deve ser um n√∫mero',
      'number.integer': 'Cliente deve ser um n√∫mero inteiro',
      'number.positive': 'Cliente deve ser um n√∫mero positivo'
    }),

  endereco: Joi.string()
    .max(255)
    .trim()
    .messages({
      'string.max': 'Endere√ßo deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Endere√ßo n√£o pode estar vazio'
    }),

  bairro: Joi.string()
    .max(255)
    .trim()
    .messages({
      'string.max': 'Bairro deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Bairro n√£o pode estar vazio'
    }),

  cidade: Joi.string()
    .max(255)
    .trim()
    .messages({
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Cidade n√£o pode estar vazia'
    }),

  uf: Joi.string()
    .length(2)
    .uppercase()
    .messages({
      'string.length': 'UF deve ter 2 caracteres',
      'string.empty': 'UF n√£o pode estar vazia'
    }),

  cep: Joi.string()
    .custom(cepValidator)
    .messages({
      'any.invalid': 'CEP deve ter 8 d√≠gitos'
    }),

  doca: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Doca deve ter no m√°ximo 255 caracteres'
    }),

  lat: Joi.number()
    .precision(6)
    .allow(null)
    .messages({
      'number.base': 'Latitude deve ser um n√∫mero',
      'number.precision': 'Latitude deve ter no m√°ximo 6 casas decimais'
    }),

  lon: Joi.number()
    .precision(6)
    .allow(null)
    .messages({
      'number.base': 'Longitude deve ser um n√∫mero',
      'number.precision': 'Longitude deve ter no m√°ximo 6 casas decimais'
    }),

  restricao_logistica_id: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'Restri√ß√£o log√≠stica deve ser um n√∫mero',
      'number.integer': 'Restri√ß√£o log√≠stica deve ser um n√∫mero inteiro',
      'number.positive': 'Restri√ß√£o log√≠stica deve ser um n√∫mero positivo'
    }),

  restrito: Joi.boolean()
    .messages({
      'boolean.base': 'Restrito deve ser verdadeiro ou falso'
    }),

  rota: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Rota deve ter no m√°ximo 255 caracteres'
    }),

  janela1: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 1 deve ter no m√°ximo 50 caracteres'
    }),

  janela2: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 2 deve ter no m√°ximo 50 caracteres'
    }),

  janela3: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 3 deve ter no m√°ximo 50 caracteres'
    }),

  janela4: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 4 deve ter no m√°ximo 50 caracteres'
    })
}).min(1); // Pelo menos um campo deve ser fornecido

// Schema para listagem com filtros
const listEnderecosEntrega = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser maior que 0'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(20)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 100'
    }),

  cliente_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Cliente deve ser um n√∫mero',
      'number.integer': 'Cliente deve ser um n√∫mero inteiro',
      'number.positive': 'Cliente deve ser um n√∫mero positivo'
    }),

  cidade: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Cidade deve ter pelo menos 2 caracteres',
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    }),

  uf: Joi.string()
    .length(2)
    .uppercase()
    .messages({
      'string.length': 'UF deve ter 2 caracteres',
      'string.base': 'UF deve ser uma string'
    }),

  restrito: Joi.boolean()
    .messages({
      'boolean.base': 'Restrito deve ser verdadeiro ou falso'
    })
});

// Schema para par√¢metros de rota
const enderecoEntregaParams = Joi.object({
  id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'ID √© obrigat√≥rio',
      'number.base': 'ID deve ser um n√∫mero',
      'number.integer': 'ID deve ser um n√∫mero inteiro',
      'number.positive': 'ID deve ser um n√∫mero positivo'
    })
});

// Schema para atualiza√ß√£o de coordenadas
const updateCoordenadasSchema = Joi.object({
  lat: Joi.number()
    .required()
    .precision(6)
    .messages({
      'any.required': 'Latitude √© obrigat√≥ria',
      'number.base': 'Latitude deve ser um n√∫mero',
      'number.precision': 'Latitude deve ter no m√°ximo 6 casas decimais'
    }),

  lon: Joi.number()
    .required()
    .precision(6)
    .messages({
      'any.required': 'Longitude √© obrigat√≥ria',
      'number.base': 'Longitude deve ser um n√∫mero',
      'number.precision': 'Longitude deve ter no m√°ximo 6 casas decimais'
    })
});

module.exports = {
  EnderecoEntregaRepository,
  createEnderecoEntrega,
  updateEnderecoEntrega,
  listEnderecosEntrega,
  enderecoEntregaParams,
  updateCoordenadasSchema
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\extensions\external-api-manager.service.js
================================================================================


// ==========================================
// 2. EXTERNAL API MANAGER (INTEGRA√á√ÉO PRINCIPAL)
// ==========================================
// backend/src/services/external/external-api-manager.service.js

const ExternalAuthMiddleware = require('../../middlewares/external-auth.middleware');
const ExternalLogsRepository = require('../../repositories/external-logs.repository');
const ApiTokensRepository = require('../../repositories/api-tokens.repository');
const logger = require('../../config/logger');

class ExternalApiManagerService {
  constructor(database, repositories) {
    this.database = database;
    this.repositories = {
      ...repositories,
      externalLogs: new ExternalLogsRepository(database),
      apiTokens: new ApiTokensRepository(database)
    };
    
    this.authMiddleware = new ExternalAuthMiddleware(this.repositories);
    this.isInitialized = false;
  }

  // Inicializar sistema de APIs externas
  async initialize() {
    try {
      logger.info('Inicializando sistema de APIs externas...');

      // Verificar se as tabelas existem
      await this.checkTables();

      // Configurar tokens iniciais se n√£o existirem
      await this.setupInitialTokens();

      // Configurar c√≥digos de ocorr√™ncia padr√£o
      await this.setupCodigosOcorrencia();

      this.isInitialized = true;
      logger.info('Sistema de APIs externas inicializado com sucesso');

    } catch (error) {
      logger.error('Erro ao inicializar APIs externas:', error);
      throw error;
    }
  }

  // Verificar se tabelas necess√°rias existem
  async checkTables() {
    const tables = [
      'external_logs',
      'api_tokens',
      'notas_fiscais',
      'transportadoras',
      'clientes',
      'embarcadores',
      'ocorrencias',
      'codigo_ocorrencias'
    ];

    for (const table of tables) {
      const query = `
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = $1 AND table_schema = 'public'
        )
      `;
      
      const result = await this.database.query(query, [table]);
      
      if (!result.rows[0].exists) {
        throw new Error(`Tabela obrigat√≥ria n√£o encontrada: ${table}`);
      }
    }

    logger.info('Todas as tabelas necess√°rias est√£o presentes');
  }

  // Configurar tokens iniciais para transportadoras existentes
  async setupInitialTokens() {
    try {
      // Buscar transportadoras ativas sem tokens
      const query = `
        SELECT t.* FROM transportadoras t
        WHERE t.ativo = true 
          AND t.integracao_ocorrencia IS NOT NULL 
          AND t.integracao_ocorrencia != 'manual'
          AND NOT EXISTS (
            SELECT 1 FROM api_tokens at 
            WHERE at.integracao = t.integracao_ocorrencia AND at.active = true
          )
      `;

      const transportadoras = await this.database.query(query);

      if (transportadoras.rows.length > 0) {
        logger.info(`Configurando tokens para ${transportadoras.rows.length} transportadoras`);

        for (const transportadora of transportadoras.rows) {
          // Criar token placeholder (deve ser atualizado manualmente)
          await this.repositories.apiTokens.create({
            integracao: transportadora.integracao_ocorrencia,
            token: `PLACEHOLDER_${transportadora.integracao_ocorrencia.toUpperCase()}_${Date.now()}`,
            active: false, // Inativo at√© ser configurado manualmente
            description: `Token autom√°tico para ${transportadora.nome}`,
            created_at: new Date()
          });

          logger.info(`Token placeholder criado para ${transportadora.nome}`);
        }
      }

    } catch (error) {
      logger.warn('Erro ao configurar tokens iniciais:', error.message);
    }
  }

  // Configurar c√≥digos de ocorr√™ncia padr√£o
  async setupCodigosOcorrencia() {
    try {
      // C√≥digos padr√£o para APIs externas
      const codigosPadrao = [
        { codigo: 1, descricao: 'Coleta realizada', tipo: 'coleta', processo: 'pickup', finalizadora: false, api: true },
        { codigo: 2, descricao: 'Em tr√¢nsito', tipo: 'transporte', processo: 'transport', finalizadora: false, api: true },
        { codigo: 3, descricao: 'Saiu para entrega', tipo: 'entrega', processo: 'delivery', finalizadora: false, api: true },
        { codigo: 4, descricao: 'Entregue', tipo: 'entrega', processo: 'delivered', finalizadora: true, api: true },
        { codigo: 5, descricao: 'Tentativa de entrega', tipo: 'entrega', processo: 'delivery_attempt', finalizadora: false, api: true },
        { codigo: 6, descricao: 'Devolvido', tipo: 'devolucao', processo: 'returned', finalizadora: true, api: true },
        { codigo: 7, descricao: 'Extraviado', tipo: 'problema', processo: 'lost', finalizadora: true, api: true },
        { codigo: 8, descricao: 'Avariado', tipo: 'problema', processo: 'damaged', finalizadora: false, api: true },
        { codigo: 9, descricao: 'Aguardando retirada', tipo: 'entrega', processo: 'waiting_pickup', finalizadora: false, api: true },
        { codigo: 99, descricao: 'Outros eventos', tipo: 'outros', processo: 'other', finalizadora: false, api: true }
      ];

      for (const codigo of codigosPadrao) {
        const existsQuery = `
          SELECT EXISTS (
            SELECT 1 FROM codigo_ocorrencias 
            WHERE codigo = $1 AND api = true
          )
        `;
        
        const exists = await this.database.query(existsQuery, [codigo.codigo]);
        
        if (!exists.rows[0].exists) {
          const insertQuery = `
            INSERT INTO codigo_ocorrencias (
              codigo, descricao, tipo, processo, finalizadora, api, created_at
            ) VALUES ($1, $2, $3, $4, $5, $6, NOW())
          `;
          
          await this.database.query(insertQuery, [
            codigo.codigo,
            codigo.descricao,
            codigo.tipo,
            codigo.processo,
            codigo.finalizadora,
            codigo.api
          ]);
        }
      }

      logger.info('C√≥digos de ocorr√™ncia configurados');

    } catch (error) {
      logger.warn('Erro ao configurar c√≥digos de ocorr√™ncia:', error.message);
    }
  }

  // Obter repositories configurados
  getRepositories() {
    if (!this.isInitialized) {
      throw new Error('Sistema de APIs externas n√£o foi inicializado');
    }
    return this.repositories;
  }

  // Obter middleware de autentica√ß√£o
  getAuthMiddleware() {
    if (!this.isInitialized) {
      throw new Error('Sistema de APIs externas n√£o foi inicializado');
    }
    return this.authMiddleware;
  }

  // Obter estat√≠sticas de uso
  async getUsageStats(integracao = null, dias = 7) {
    try {
      const stats = await this.repositories.externalLogs.getApiStats(integracao, dias);
      return stats;
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas de uso:', error);
      throw error;
    }
  }

  // Limpar logs antigos
  async cleanOldLogs(diasRetencao = 30) {
    try {
      const query = `
        DELETE FROM external_logs 
        WHERE created_at < NOW() - INTERVAL '${diasRetencao} days'
      `;

      const result = await this.database.query(query);
      
      logger.info(`${result.rowCount} logs antigos removidos`);
      return result.rowCount;

    } catch (error) {
      logger.error('Erro ao limpar logs antigos:', error);
      throw error;
    }
  }

  // Status do sistema
  getSystemStatus() {
    return {
      initialized: this.isInitialized,
      repositories: Object.keys(this.repositories),
      authMiddleware: !!this.authMiddleware
    };
  }
}

module.exports = ExternalApiManagerService;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\extensions\notas.repository.extensions.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\external-logs.repository.js
================================================================================

// ==========================================
// 1. EXTERNAL LOGS REPOSITORY
// ==========================================
// backend/src/repositories/external-logs.repository.js

const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class ExternalLogsRepository extends BaseRepository {
  constructor(database) {
    super(database, 'external_logs');
  }

  // Criar log de opera√ß√£o externa
  async create(logData) {
    const query = `
      INSERT INTO external_logs (
        integracao, transportadora_id, operacao, ip, user_agent, 
        resultado, request_size, created_at
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      RETURNING *
    `;

    const values = [
      logData.integracao,
      logData.transportadora_id,
      logData.operacao,
      logData.ip,
      logData.user_agent,
      JSON.stringify(logData.resultado),
      logData.request_size,
      logData.created_at
    ];

    const result = await this.database.query(query, values);
    return result.rows[0];
  }

  // Buscar logs por integra√ß√£o
  async findByIntegracao(integracao, options = {}) {
    const { page = 1, limit = 50, dataInicio, dataFim } = options;
    const offset = (page - 1) * limit;

    let whereClause = 'WHERE integracao = $1';
    const values = [integracao];
    let paramCount = 1;

    if (dataInicio) {
      whereClause += ` AND created_at >= $${++paramCount}`;
      values.push(dataInicio);
    }

    if (dataFim) {
      whereClause += ` AND created_at <= $${++paramCount}`;
      values.push(dataFim);
    }

    const query = `
      SELECT 
        el.*,
        t.nome as transportadora_nome
      FROM external_logs el
      LEFT JOIN transportadoras t ON t.id = el.transportadora_id
      ${whereClause}
      ORDER BY created_at DESC
      LIMIT $${++paramCount} OFFSET $${++paramCount}
    `;

    values.push(limit, offset);

    const result = await this.database.query(query, values);
    return result.rows;
  }

  // Estat√≠sticas de uso da API
  async getApiStats(integracao = null, dias = 7) {
    let whereClause = '';
    const values = [dias];

    if (integracao) {
      whereClause = 'AND integracao = $2';
      values.push(integracao);
    }

    const query = `
      SELECT 
        integracao,
        operacao,
        COUNT(*) as total_requests,
        COUNT(CASE WHEN resultado->>'error' IS NULL THEN 1 END) as successful_requests,
        COUNT(CASE WHEN resultado->>'error' IS NOT NULL THEN 1 END) as failed_requests,
        AVG(request_size) as avg_request_size,
        COUNT(DISTINCT ip) as unique_ips
      FROM external_logs
      WHERE created_at >= NOW() - INTERVAL '$1 days'
        ${whereClause}
      GROUP BY integracao, operacao
      ORDER BY total_requests DESC
    `;

    const result = await this.database.query(query, values);
    return result.rows;
  }

  // Logs de erro recentes
  async getRecentErrors(limit = 20) {
    const query = `
      SELECT 
        el.*,
        t.nome as transportadora_nome
      FROM external_logs el
      LEFT JOIN transportadoras t ON t.id = el.transportadora_id
      WHERE resultado->>'error' IS NOT NULL
      ORDER BY created_at DESC
      LIMIT $1
    `;

    const result = await this.database.query(query, [limit]);
    return result.rows;
  }
}

module.exports = ExternalLogsRepository;



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\jobs.repository.js
================================================================================

// ==========================================
// 1. JOBS REPOSITORY
// ==========================================
// backend/src/repositories/jobs.repository.js

const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class JobsRepository extends BaseRepository {
  constructor(database) {
    super(database, 'job_integracoes');
  }

  // Criar nova integra√ß√£o
  async createIntegracao(data) {
    const query = `
      INSERT INTO job_integracoes (integracao, qtd, inicio)
      VALUES ($1, $2, $3)
      RETURNING id
    `;
    
    const values = [data.integracao, data.qtd, data.inicio];
    const result = await this.database.query(query, values);
    
    logger.info('Nova integra√ß√£o criada:', { id: result.rows[0].id, ...data });
    return result.rows[0].id;
  }

  // Atualizar integra√ß√£o
  async updateIntegracao(id, data) {
    const query = `
      UPDATE job_integracoes 
      SET qtd = $2, fim = $3
      WHERE id = $1
      RETURNING *
    `;
    
    const values = [id, data.qtd, data.fim];
    const result = await this.database.query(query, values);
    
    return result.rows[0];
  }

  // Criar log de integra√ß√£o
  async createLog(data) {
    const query = `
      INSERT INTO log_integracaos (integracao, nro, texto, created_at)
      VALUES ($1, $2, $3, NOW())
      RETURNING id
    `;
    
    const values = [data.integracao, data.nro, data.texto];
    const result = await this.database.query(query, values);
    
    return result.rows[0].id;
  }

  // Buscar integra√ß√µes recentes
  async getRecentIntegrations(options = {}) {
    const { page = 1, limit = 20, dias = 7 } = options;
    const offset = (page - 1) * limit;

    const query = `
      SELECT 
        ji.*,
        COUNT(li.id) as total_logs,
        COUNT(CASE WHEN li.texto LIKE '%Erro%' THEN 1 END) as total_erros
      FROM job_integracoes ji
      LEFT JOIN log_integracaos li ON li.integracao = ji.integracao 
        AND li.created_at >= ji.inicio 
        AND (ji.fim IS NULL OR li.created_at <= ji.fim)
      WHERE ji.inicio >= NOW() - INTERVAL '${dias} days'
      GROUP BY ji.id
      ORDER BY ji.inicio DESC
      LIMIT $1 OFFSET $2
    `;

    const countQuery = `
      SELECT COUNT(*) as total
      FROM job_integracoes 
      WHERE inicio >= NOW() - INTERVAL '${dias} days'
    `;

    const [dataResult, countResult] = await Promise.all([
      this.database.query(query, [limit, offset]),
      this.database.query(countQuery)
    ]);

    return {
      data: dataResult.rows,
      total: parseInt(countResult.rows[0].total),
      page,
      limit,
      totalPages: Math.ceil(countResult.rows[0].total / limit)
    };
  }

  // Buscar logs de uma integra√ß√£o
  async getIntegrationLogs(options = {}) {
    const { integracaoId, page = 1, limit = 50 } = options;
    const offset = (page - 1) * limit;

    // Primeiro buscar a integra√ß√£o
    const integracaoQuery = `
      SELECT * FROM job_integracoes WHERE id = $1
    `;
    const integracaoResult = await this.database.query(integracaoQuery, [integracaoId]);
    
    if (integracaoResult.rows.length === 0) {
      throw new Error('Integra√ß√£o n√£o encontrada');
    }

    const integracao = integracaoResult.rows[0];

    // Buscar logs
    const logsQuery = `
      SELECT * FROM log_integracaos 
      WHERE integracao = $1 
        AND created_at >= $2 
        AND ($3::timestamp IS NULL OR created_at <= $3)
      ORDER BY created_at DESC
      LIMIT $4 OFFSET $5
    `;

    const countQuery = `
      SELECT COUNT(*) as total FROM log_integracaos 
      WHERE integracao = $1 
        AND created_at >= $2 
        AND ($3::timestamp IS NULL OR created_at <= $3)
    `;

    const values = [integracao.integracao, integracao.inicio, integracao.fim, limit, offset];
    const countValues = [integracao.integracao, integracao.inicio, integracao.fim];

    const [logsResult, countResult] = await Promise.all([
      this.database.query(logsQuery, values),
      this.database.query(countQuery, countValues)
    ]);

    return {
      integracao,
      logs: logsResult.rows,
      total: parseInt(countResult.rows[0].total),
      page,
      limit,
      totalPages: Math.ceil(countResult.rows[0].total / limit)
    };
  }

  // Estat√≠sticas dos jobs
  async getJobStats() {
    const query = `
      SELECT 
        COUNT(*) as total_integracoes,
        COUNT(CASE WHEN fim IS NOT NULL THEN 1 END) as concluidas,
        COUNT(CASE WHEN fim IS NULL THEN 1 END) as em_andamento,
        AVG(CASE WHEN fim IS NOT NULL THEN 
          EXTRACT(EPOCH FROM (fim - inicio)) END) as tempo_medio_segundos,
        SUM(qtd) as total_nfs_processadas
      FROM job_integracoes 
      WHERE inicio >= NOW() - INTERVAL '24 hours'
    `;

    const result = await this.database.query(query);
    const stats = result.rows[0];

    // Estat√≠sticas de logs
    const logsQuery = `
      SELECT 
        COUNT(*) as total_logs,
        COUNT(CASE WHEN texto LIKE '%Erro%' THEN 1 END) as total_erros,
        COUNT(CASE WHEN texto LIKE '%sucesso%' THEN 1 END) as total_sucessos
      FROM log_integracaos 
      WHERE created_at >= NOW() - INTERVAL '24 hours'
    `;

    const logsResult = await this.database.query(logsQuery);
    const logsStats = logsResult.rows[0];

    return {
      ...stats,
      ...logsStats,
      taxa_sucesso: logsStats.total_logs > 0 ? 
        (parseFloat(logsStats.total_sucessos) / parseFloat(logsStats.total_logs) * 100).toFixed(2) : 0
    };
  }

  // Buscar transportadora por ID
  async getTransportadoraById(id) {
    const query = `
      SELECT * FROM transportadoras 
      WHERE id = $1 AND ativo = true
    `;
    
    const result = await this.database.query(query, [id]);
    return result.rows[0];
  }

  // Gerenciar tokens de API
  async createApiToken(data) {
    const query = `
      INSERT INTO api_tokens (integracao, token, expires_at, active, created_at)
      VALUES ($1, $2, $3, $4, NOW())
      RETURNING *
    `;
    
    const values = [data.integracao, data.token, data.expires_at, data.active];
    const result = await this.database.query(query, values);
    
    return result.rows[0];
  }

  async deactivateApiTokens(integracao) {
    const query = `
      UPDATE api_tokens 
      SET active = false 
      WHERE integracao = $1
    `;
    
    await this.database.query(query, [integracao]);
  }

  async getApiTokens() {
    const query = `
      SELECT * FROM api_tokens 
      ORDER BY created_at DESC
    `;
    
    const result = await this.database.query(query);
    return result.rows;
  }

  async getActiveToken(integracao) {
    const query = `
      SELECT * FROM api_tokens 
      WHERE integracao = $1 
        AND active = true 
        AND (expires_at IS NULL OR expires_at > NOW())
      ORDER BY created_at DESC
      LIMIT 1
    `;
    
    const result = await this.database.query(query, [integracao]);
    return result.rows[0];
  }
}

module.exports = JobsRepository;




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\monitoring.repository.js
================================================================================

// ==========================================
// 2. MONITORING REPOSITORY
// ==========================================
// backend/src/repositories/monitoring.repository.js

const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class MonitoringRepository extends BaseRepository {
  constructor(database) {
    super(database, 'log_integracaos');
  }

  // Dashboard principal
  async getDashboardData(options = {}) {
    const { periodo = 7 } = options;

    // M√©tricas gerais
    const metricsQuery = `
      SELECT 
        COUNT(DISTINCT ji.id) as total_integracoes,
        SUM(ji.qtd) as total_nfs_processadas,
        COUNT(DISTINCT CASE WHEN ji.fim IS NOT NULL THEN ji.id END) as integracoes_concluidas,
        AVG(CASE WHEN ji.fim IS NOT NULL THEN 
          EXTRACT(EPOCH FROM (ji.fim - ji.inicio)) END) as tempo_medio_segundos
      FROM job_integracoes ji
      WHERE ji.inicio >= NOW() - INTERVAL '${periodo} days'
    `;

    // Estat√≠sticas por transportadora
    const transportadorasQuery = `
      SELECT 
        t.id,
        t.nome,
        t.integracao_ocorrencia,
        COUNT(nf.id) as total_nfs,
        COUNT(CASE WHEN nf.finalizada = true THEN 1 END) as nfs_finalizadas,
        COUNT(CASE WHEN nf.finalizada = false THEN 1 END) as nfs_pendentes
      FROM transportadoras t
      LEFT JOIN notas_fiscais nf ON nf.transportadora_id = t.id 
        AND nf.created_at >= NOW() - INTERVAL '${periodo} days'
      WHERE t.ativo = true
      GROUP BY t.id, t.nome, t.integracao_ocorrencia
      ORDER BY total_nfs DESC
      LIMIT 10
    `;

    // Evolu√ß√£o di√°ria
    const evolucaoQuery = `
      SELECT 
        DATE(ji.inicio) as data,
        COUNT(*) as integracoes,
        SUM(ji.qtd) as nfs_processadas,
        AVG(CASE WHEN ji.fim IS NOT NULL THEN 
          EXTRACT(EPOCH FROM (ji.fim - ji.inicio)) END) as tempo_medio
      FROM job_integracoes ji
      WHERE ji.inicio >= NOW() - INTERVAL '${periodo} days'
      GROUP BY DATE(ji.inicio)
      ORDER BY data ASC
    `;

    // Erros recentes
    const errosQuery = `
      SELECT 
        li.integracao,
        li.nro,
        li.texto,
        li.created_at
      FROM log_integracaos li
      WHERE li.texto LIKE '%Erro%' 
        AND li.created_at >= NOW() - INTERVAL '24 hours'
      ORDER BY li.created_at DESC
      LIMIT 10
    `;

    const [metricsResult, transportadorasResult, evolucaoResult, errosResult] = await Promise.all([
      this.database.query(metricsQuery),
      this.database.query(transportadorasQuery),
      this.database.query(evolucaoQuery),
      this.database.query(errosQuery)
    ]);

    return {
      metricas: metricsResult.rows[0],
      transportadoras: transportadorasResult.rows,
      evolucao: evolucaoResult.rows,
      erros_recentes: errosResult.rows
    };
  }

  // M√©tricas por transportadora
  async getTransportadoraMetrics(options = {}) {
    const { transportadoraId, periodo = 30 } = options;

    const query = `
      SELECT 
        DATE(nf.created_at) as data,
        COUNT(*) as total_nfs,
        COUNT(CASE WHEN nf.finalizada = true THEN 1 END) as nfs_finalizadas,
        COUNT(CASE WHEN nf.finalizada = false THEN 1 END) as nfs_pendentes,
        COUNT(o.id) as total_ocorrencias
      FROM notas_fiscais nf
      LEFT JOIN ocorrencias o ON o.nro_nf = nf.nro_ctrc
      WHERE nf.transportadora_id = $1 
        AND nf.created_at >= NOW() - INTERVAL '${periodo} days'
      GROUP BY DATE(nf.created_at)
      ORDER BY data ASC
    `;

    const detailsQuery = `
      SELECT 
        COUNT(*) as total_nfs,
        COUNT(CASE WHEN finalizada = true THEN 1 END) as finalizadas,
        COUNT(CASE WHEN finalizada = false THEN 1 END) as pendentes,
        AVG(CASE WHEN finalizada = true AND data_integracao IS NOT NULL THEN 
          EXTRACT(EPOCH FROM (data_integracao - created_at)) / 3600 END) as tempo_medio_horas
      FROM notas_fiscais 
      WHERE transportadora_id = $1 
        AND created_at >= NOW() - INTERVAL '${periodo} days'
    `;

    const [metricsResult, detailsResult] = await Promise.all([
      this.database.query(query, [transportadoraId]),
      this.database.query(detailsQuery, [transportadoraId])
    ]);

    return {
      evolucao: metricsResult.rows,
      resumo: detailsResult.rows[0]
    };
  }

  // Estat√≠sticas de performance
  async getPerformanceStats(options = {}) {
    const { periodo = 7, agrupamento = 'dia' } = options;
    
    let dateFormat = 'DATE(created_at)';
    let intervalGroup = 'day';
    
    if (agrupamento === 'hora') {
      dateFormat = 'DATE_TRUNC(\'hour\', created_at)';
      intervalGroup = 'hour';
    } else if (agrupamento === 'mes') {
      dateFormat = 'DATE_TRUNC(\'month\', created_at)';
      intervalGroup = 'month';
    }

    const query = `
      SELECT 
        ${dateFormat} as periodo,
        COUNT(*) as total_logs,
        COUNT(CASE WHEN texto LIKE '%Erro%' THEN 1 END) as erros,
        COUNT(CASE WHEN texto LIKE '%sucesso%' THEN 1 END) as sucessos,
        COUNT(DISTINCT integracao) as integracoes_ativas
      FROM log_integracaos 
      WHERE created_at >= NOW() - INTERVAL '${periodo} ${intervalGroup}s'
      GROUP BY ${dateFormat}
      ORDER BY periodo ASC
    `;

    const result = await this.database.query(query);
    
    return result.rows.map(row => ({
      ...row,
      taxa_sucesso: row.total_logs > 0 ? 
        (parseFloat(row.sucessos) / parseFloat(row.total_logs) * 100).toFixed(2) : 0
    }));
  }

  // Relat√≥rio de sa√∫de das integra√ß√µes
  async getIntegrationsHealth() {
    const query = `
      SELECT 
        t.nome,
        t.integracao_ocorrencia,
        COUNT(nf.id) as total_nfs_periodo,
        COUNT(CASE WHEN nf.finalizada = false THEN 1 END) as nfs_pendentes,
        COUNT(CASE WHEN li.texto LIKE '%Erro%' THEN 1 END) as erros_recentes,
        MAX(li.created_at) as ultimo_log,
        CASE 
          WHEN COUNT(CASE WHEN li.texto LIKE '%Erro%' THEN 1 END) > 10 THEN 'CRITICO'
          WHEN COUNT(CASE WHEN li.texto LIKE '%Erro%' THEN 1 END) > 5 THEN 'ALERTA'
          WHEN MAX(li.created_at) < NOW() - INTERVAL '2 hours' THEN 'INATIVO'
          ELSE 'SAUDAVEL'
        END as status_saude
      FROM transportadoras t
      LEFT JOIN notas_fiscais nf ON nf.transportadora_id = t.id 
        AND nf.created_at >= NOW() - INTERVAL '24 hours'
      LEFT JOIN log_integracaos li ON li.integracao = t.integracao_ocorrencia 
        AND li.created_at >= NOW() - INTERVAL '24 hours'
      WHERE t.ativo = true 
        AND t.integracao_ocorrencia IS NOT NULL 
        AND t.integracao_ocorrencia != 'manual'
      GROUP BY t.id, t.nome, t.integracao_ocorrencia
      ORDER BY 
        CASE status_saude 
          WHEN 'CRITICO' THEN 1 
          WHEN 'ALERTA' THEN 2 
          WHEN 'INATIVO' THEN 3 
          ELSE 4 
        END,
        t.nome
    `;

    const result = await this.database.query(query);
    return result.rows;
  }

  // Logs com filtros avan√ßados
  async getLogsWithFilters(filters = {}) {
    const { 
      page = 1, 
      limit = 50, 
      integracao, 
      nivel, 
      dataInicio, 
      dataFim, 
      nro, 
      busca 
    } = filters;
    
    const offset = (page - 1) * limit;
    const conditions = [];
    const values = [];
    let paramCount = 0;

    if (integracao) {
      conditions.push(`integracao = $${++paramCount}`);
      values.push(integracao);
    }

    if (nivel) {
      if (nivel === 'erro') {
        conditions.push(`texto LIKE '%Erro%'`);
      } else if (nivel === 'sucesso') {
        conditions.push(`texto LIKE '%sucesso%'`);
      }
    }

    if (dataInicio) {
      conditions.push(`created_at >= $${++paramCount}`);
      values.push(dataInicio);
    }

    if (dataFim) {
      conditions.push(`created_at <= $${++paramCount}`);
      values.push(dataFim);
    }

    if (nro) {
      conditions.push(`nro = $${++paramCount}`);
      values.push(nro);
    }

    if (busca) {
      conditions.push(`texto ILIKE $${++paramCount}`);
      values.push(`%${busca}%`);
    }

    const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';

    const query = `
      SELECT * FROM log_integracaos 
      ${whereClause}
      ORDER BY created_at DESC
      LIMIT $${++paramCount} OFFSET $${++paramCount}
    `;

    const countQuery = `
      SELECT COUNT(*) as total FROM log_integracaos 
      ${whereClause}
    `;

    values.push(limit, offset);

    const [dataResult, countResult] = await Promise.all([
      this.database.query(query, values),
      this.database.query(countQuery, values.slice(0, -2))
    ]);

    return {
      data: dataResult.rows,
      total: parseInt(countResult.rows[0].total),
      page,
      limit,
      totalPages: Math.ceil(countResult.rows[0].total / limit)
    };
  }

  // Alertas ativos (baseado em regras)
  async getActiveAlerts() {
    const alerts = [];

    // Alerta: Muitos erros nas √∫ltimas 2 horas
    const errosQuery = `
      SELECT 
        integracao,
        COUNT(*) as total_erros
      FROM log_integracaos 
      WHERE texto LIKE '%Erro%' 
        AND created_at >= NOW() - INTERVAL '2 hours'
      GROUP BY integracao
      HAVING COUNT(*) >= 5
    `;

    const errosResult = await this.database.query(errosQuery);
    
    for (const erro of errosResult.rows) {
      alerts.push({
        tipo: 'ERROR_RATE',
        severidade: 'ALTO',
        titulo: `Taxa alta de erros - ${erro.integracao}`,
        descricao: `${erro.total_erros} erros nas √∫ltimas 2 horas`,
        integracao: erro.integracao,
        created_at: new Date()
      });
    }

    // Alerta: Integra√ß√µes inativas
    const inativasQuery = `
      SELECT DISTINCT 
        t.nome,
        t.integracao_ocorrencia
      FROM transportadoras t
      WHERE t.ativo = true 
        AND t.integracao_ocorrencia IS NOT NULL 
        AND t.integracao_ocorrencia != 'manual'
        AND NOT EXISTS (
          SELECT 1 FROM log_integracaos li 
          WHERE li.integracao = t.integracao_ocorrencia 
            AND li.created_at >= NOW() - INTERVAL '4 hours'
        )
    `;

    const inativasResult = await this.database.query(inativasQuery);
    
    for (const inativa of inativasResult.rows) {
      alerts.push({
        tipo: 'INTEGRATION_INACTIVE',
        severidade: 'MEDIO',
        titulo: `Integra√ß√£o inativa - ${inativa.nome}`,
        descricao: 'Nenhuma atividade nas √∫ltimas 4 horas',
        integracao: inativa.integracao_ocorrencia,
        created_at: new Date()
      });
    }

    return alerts;
  }

  // Resumo de NFs por status
  async getNFStatusSummary(options = {}) {
    const { transportadoraId, periodo = 30 } = options;
    
    let whereClause = '';
    const values = [periodo];
    
    if (transportadoraId) {
      whereClause = 'AND nf.transportadora_id = $2';
      values.push(transportadoraId);
    }

    const query = `
      SELECT 
        nf.status_api,
        COUNT(*) as quantidade,
        COUNT(CASE WHEN nf.finalizada = true THEN 1 END) as finalizadas,
        COUNT(CASE WHEN nf.finalizada = false THEN 1 END) as pendentes
      FROM notas_fiscais nf
      WHERE nf.created_at >= NOW() - INTERVAL '$1 days'
        ${whereClause}
      GROUP BY nf.status_api
      ORDER BY quantidade DESC
    `;

    const result = await this.database.query(query, values);
    return result.rows;
  }

  // Gerar relat√≥rio
  async generateReport(options = {}) {
    const { tipo, periodo = 30, transportadoraId } = options;

    if (tipo === 'performance') {
      return this.getPerformanceStats({ periodo, agrupamento: 'dia' });
    }

    if (tipo === 'transportadoras') {
      const query = `
        SELECT 
          t.nome,
          t.integracao_ocorrencia,
          COUNT(nf.id) as total_nfs,
          COUNT(CASE WHEN nf.finalizada = true THEN 1 END) as finalizadas,
          COUNT(CASE WHEN nf.finalizada = false THEN 1 END) as pendentes,
          AVG(CASE WHEN nf.finalizada = true AND nf.data_integracao IS NOT NULL THEN 
            EXTRACT(EPOCH FROM (nf.data_integracao - nf.created_at)) / 3600 END) as tempo_medio_horas
        FROM transportadoras t
        LEFT JOIN notas_fiscais nf ON nf.transportadora_id = t.id 
          AND nf.created_at >= NOW() - INTERVAL '${periodo} days'
        WHERE t.ativo = true
        GROUP BY t.id, t.nome, t.integracao_ocorrencia
        ORDER BY total_nfs DESC
      `;

      const result = await this.database.query(query);
      return result.rows;
    }

    throw new Error(`Tipo de relat√≥rio n√£o suportado: ${tipo}`);
  }

  // Configura√ß√µes de monitoramento
  async getMonitoringConfig() {
    const query = `
      SELECT * FROM settings 
      WHERE slug = 'monitoring_config'
      ORDER BY created_at DESC
      LIMIT 1
    `;

    const result = await this.database.query(query);
    
    if (result.rows.length === 0) {
      return {
        alertas: {
          erro_threshold: 5,
          inatividade_hours: 4
        },
        dashboard: {
          periodo_padrao: 7,
          refresh_interval: 30
        }
      };
    }

    return result.rows[0].settings;
  }

  // Atualizar configura√ß√µes
  async updateMonitoringConfig(config) {
    const query = `
      INSERT INTO settings (slug, env, settings, created_at)
      VALUES ('monitoring_config', 'production', $1, NOW())
      ON CONFLICT (slug, env) 
      DO UPDATE SET 
        settings = $1,
        updated_at = NOW()
      RETURNING *
    `;

    const result = await this.database.query(query, [JSON.stringify(config)]);
    return result.rows[0];
  }
}

module.exports = MonitoringRepository;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\motoristas.repository.js
================================================================================

const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class MotoristasRepository extends BaseRepository {
  constructor() {
    super('motoristas');
  }

  // Helper para aplicar soft-delete condicionalmente
  async softDeleteClause(alias) {
    const has = await this.hasColumn('deleted_at');
    return has ? `${alias}.deleted_at IS NULL` : null;
  }

  // Helper gen√©rico para WHERE din√¢mico seguro
  _where(parts) {
    const filtered = parts.filter(Boolean);
    return filtered.length ? `WHERE ${filtered.join(' AND ')}` : '';
  }

  // Buscar por CPF
  async findByCpf(cpf) {
    try {
      const where = [];
      const params = [cpf];
      const soft = await this.softDeleteClause('m');
      if (soft) where.push(soft);
      where.push(`m.cpf = $1`);

      const query = `
        SELECT m.*
        FROM ${this.tableName} m
        ${this._where(where)}
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar motorista por CPF:', error);
      throw error;
    }
  }

  // Buscar por email
  async findByEmail(email) {
    try {
      const where = [];
      const params = [email];
      const soft = await this.softDeleteClause('m');
      if (soft) where.push(soft);
      where.push(`m.email = $1`);

      const query = `
        SELECT m.*
        FROM ${this.tableName} m
        ${this._where(where)}
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar motorista por email:', error);
      throw error;
    }
  }

  // Buscar por nome (busca parcial)
  async searchByName(searchTerm, limit = 10) {
    try {
      const where = [];
      const params = [];
      const soft = await this.softDeleteClause('m');
      if (soft) where.push(soft);

      params.push(`%${searchTerm}%`);
      where.push(`(m.nome ILIKE $${params.length} OR m.sobrenome ILIKE $${params.length})`);

      params.push(limit);
      const query = `
        SELECT m.id, m.nome, m.sobrenome, m.cpf, m.contato, m.email
        FROM ${this.tableName} m
        ${this._where(where)}
        ORDER BY m.nome, m.sobrenome
        LIMIT $${params.length}
      `;
      const result = await this.executeQuery(query, params);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar motoristas por nome:', error);
      throw error;
    }
  }

  // Buscar por cidade
  async findByCidade(cidade) {
    try {
      const where = [];
      const params = [];
      const soft = await this.softDeleteClause('m');
      if (soft) where.push(soft);

      params.push(`%${cidade}%`);
      where.push(`m.cidade ILIKE $${params.length}`);

      const query = `
        SELECT m.*
        FROM ${this.tableName} m
        ${this._where(where)}
        ORDER BY m.nome, m.sobrenome
      `;
      const result = await this.executeQuery(query, params);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar motoristas por cidade:', error);
      throw error;
    }
  }

  // Buscar com informa√ß√µes de legisla√ß√£o
  async findWithLegislacao(id) {
    try {
      const where = [];
      const params = [id];
      const soft = await this.softDeleteClause('m');
      if (soft) where.push(soft);
      where.push(`m.id = $1`);

      const query = `
        SELECT 
          m.*,
          l.nome as legislacao_nome,
          l.max_direcao_continua,
          l.max_trabalho_continuo,
          l.tempo_pausa
        FROM ${this.tableName} m
        LEFT JOIN legislacao l ON l.id = m.legislacao_id
        ${this._where(where)}
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar motorista com legisla√ß√£o:', error);
      throw error;
    }
  }

  // Buscar com contagem de romaneios
  async findWithRomaneiosCount(id) {
    try {
      const mSoft = await this.softDeleteClause('m');

      // Checa soft-delete em romaneios
      const hasRDeleted = await (async () => {
        const sql = `
          SELECT 1
          FROM information_schema.columns
          WHERE table_schema='public' AND table_name='romaneios' AND column_name='deleted_at'
          LIMIT 1
        `;
        const { rows } = await this.executeQuery(sql);
        return rows.length > 0;
      })();
      const rSoft = hasRDeleted ? `r.deleted_at IS NULL` : null;

      const where = [];
      const params = [id];
      where.push(`m.id = $1`);
      if (mSoft) where.push(mSoft);

      const query = `
        SELECT 
          m.*,
          l.nome as legislacao_nome,
          COUNT(r.id) AS total_romaneios,
          COUNT(CASE WHEN r.created_at >= CURRENT_DATE - INTERVAL '30 days' THEN 1 END) AS romaneios_mes
        FROM ${this.tableName} m
        LEFT JOIN legislacao l ON l.id = m.legislacao_id
        LEFT JOIN romaneios r
          ON r.motorista_id = m.id
          ${rSoft ? `AND ${rSoft}` : ''}
        ${this._where(where)}
        GROUP BY m.id, l.id
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar motorista com contagem de romaneios:', error);
      throw error;
    }
  }

  // Buscar motoristas com estat√≠sticas
  async findAllWithStats(options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 'm.created_at',
        orderDirection = 'DESC',
        filters = {}
      } = options;

      const validLimit = Math.min(limit, this.maxLimit);
      const offset = (page - 1) * validLimit;

      // Soft-delete por tabela/alias
      const mSoft = await this.softDeleteClause('m');

      const hasRDeleted = await (async () => {
        const sql = `
          SELECT 1
          FROM information_schema.columns
          WHERE table_schema='public' AND table_name='romaneios' AND column_name='deleted_at'
          LIMIT 1
        `;
        const { rows } = await this.executeQuery(sql);
        return rows.length > 0;
      })();
      const rSoft = hasRDeleted ? `r.deleted_at IS NULL` : null;

      const hasVDeleted = await (async () => {
        const sql = `
          SELECT 1
          FROM information_schema.columns
          WHERE table_schema='public' AND table_name='veiculos' AND column_name='deleted_at'
          LIMIT 1
        `;
        const { rows } = await this.executeQuery(sql);
        return rows.length > 0;
      })();
      const vSoft = hasVDeleted ? `v.deleted_at IS NULL` : null;

      const where = [];
      const params = [];

      if (mSoft) where.push(mSoft);

      if (filters.nome) {
        params.push(`%${filters.nome}%`);
        where.push(`(m.nome ILIKE $${params.length} OR m.sobrenome ILIKE $${params.length})`);
      }
      if (filters.cpf) {
        params.push(filters.cpf);
        where.push(`m.cpf = $${params.length}`);
      }
      if (filters.cidade) {
        params.push(`%${filters.cidade}%`);
        where.push(`m.cidade ILIKE $${params.length}`);
      }
      if (filters.estado) {
        params.push(filters.estado);
        where.push(`m.estado = $${params.length}`);
      }
      if (filters.legislacao_id) {
        params.push(filters.legislacao_id);
        where.push(`m.legislacao_id = $${params.length}`);
      }

      // Base FROM com joins
      let baseFrom = `
        FROM ${this.tableName} m
        LEFT JOIN legislacao l ON l.id = m.legislacao_id
        LEFT JOIN romaneios r
          ON r.motorista_id = m.id
          ${rSoft ? `AND ${rSoft}` : ''}
        LEFT JOIN veiculos v
          ON v.motorista_id = m.id
          ${vSoft ? `AND ${vSoft}` : ''}
      `;

      // Query de dados
      let dataSql = `
        SELECT 
          m.*,
          l.nome as legislacao_nome,
          COUNT(DISTINCT r.id) AS total_romaneios,
          COUNT(DISTINCT CASE WHEN r.created_at >= CURRENT_DATE - INTERVAL '30 days' THEN r.id END) AS romaneios_mes,
          COUNT(DISTINCT v.id) AS total_veiculos
        ${baseFrom}
        ${this._where(where)}
        GROUP BY m.id, l.id
        ORDER BY ${orderBy} ${orderDirection.toUpperCase()}
        LIMIT $${params.push(validLimit)}
        OFFSET $${params.push(offset)}
      `;

      // Query de contagem
      let countSql = `
        SELECT COUNT(DISTINCT m.id) AS total
        ${baseFrom}
        ${this._where(where)}
      `;

      const [countResult, result] = await Promise.all([
        this.executeQuery(countSql, params.slice(0, params.length - 2)),
        this.executeQuery(dataSql, params)
      ]);

      const total = parseInt(countResult.rows[0]?.total || 0, 10);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page, 10),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (error) {
      logger.error('Erro ao buscar motoristas com estat√≠sticas:', error);
      throw error;
    }
  }

  // Validar CPF √∫nico
  async validateUniqueCpf(cpf, excludeId = null) {
    try {
      const where = [];
      const params = [cpf];
      const soft = await this.softDeleteClause('m');
      if (soft) where.push(soft);
      where.push(`m.cpf = $1`);

      if (excludeId) {
        params.push(excludeId);
        where.push(`m.id != $${params.length}`);
      }

      const query = `
        SELECT m.id 
        FROM ${this.tableName} m
        ${this._where(where)}
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows.length === 0;
    } catch (error) {
      logger.error('Erro ao validar CPF √∫nico:', error);
      throw error;
    }
  }

  // Validar email √∫nico
  async validateUniqueEmail(email, excludeId = null) {
    try {
      if (!email) return true; // Email √© opcional

      const where = [];
      const params = [email];
      const soft = await this.softDeleteClause('m');
      if (soft) where.push(soft);
      where.push(`m.email = $1`);

      if (excludeId) {
        params.push(excludeId);
        where.push(`m.id != $${params.length}`);
      }

      const query = `
        SELECT m.id 
        FROM ${this.tableName} m
        ${this._where(where)}
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows.length === 0;
    } catch (error) {
      logger.error('Erro ao validar email √∫nico:', error);
      throw error;
    }
  }

  // Buscar motoristas ativos (que podem receber mensagens)
  async findActiveForMessages() {
    try {
      const where = [];
      const params = [];
      const soft = await this.softDeleteClause('m');
      if (soft) where.push(soft);
      where.push(`m.send_mensagem = true`);
      where.push(`m.contato IS NOT NULL`);

      const query = `
        SELECT m.id, m.nome, m.sobrenome, m.contato, m.email
        FROM ${this.tableName} m
        ${this._where(where)}
        ORDER BY m.nome, m.sobrenome
      `;
      const result = await this.executeQuery(query, params);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar motoristas ativos para mensagens:', error);
      throw error;
    }
  }

  // Buscar com jornada de trabalho
  async findWithJornada(id) {
    try {
      const where = [];
      const params = [id];
      const soft = await this.softDeleteClause('m');
      if (soft) where.push(soft);
      where.push(`m.id = $1`);

      const query = `
        SELECT 
          m.*,
          l.nome as legislacao_nome,
          json_agg(
            json_build_object(
              'id', jt.id,
              'inicio', jt.inicio,
              'fim', jt.fim
            ) ORDER BY jt.id
          ) FILTER (WHERE jt.id IS NOT NULL) as jornadas_trabalho
        FROM ${this.tableName} m
        LEFT JOIN legislacao l ON l.id = m.legislacao_id
        LEFT JOIN jornada_trabalho jt ON jt.motorista_id = m.id
        ${this._where(where)}
        GROUP BY m.id, l.id
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar motorista com jornada:', error);
      throw error;
    }
  }

  // Estat√≠sticas gerais
  async getStats() {
    try {
      const where = [];
      const params = [];
      const soft = await this.softDeleteClause('m');
      if (soft) where.push(soft);

      const query = `
        SELECT 
          COUNT(*) AS total,
          COUNT(CASE WHEN m.send_mensagem = true THEN 1 END) AS recebem_mensagem,
          COUNT(CASE WHEN m.legislacao_id IS NOT NULL THEN 1 END) AS com_legislacao,
          COUNT(CASE WHEN m.email IS NOT NULL AND m.email != '' THEN 1 END) AS com_email,
          COUNT(CASE WHEN m.contato IS NOT NULL AND m.contato != '' THEN 1 END) AS com_contato,
          COUNT(DISTINCT m.cidade) AS total_cidades
        FROM ${this.tableName} m
        ${this._where(where)}
      `;
      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas de motoristas:', error);
      throw error;
    }
  }
}

module.exports = MotoristasRepository;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\notas-fiscais.repository.js
================================================================================

const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class NotasFiscaisRepository extends BaseRepository {
  constructor() {
    super('notas_fiscais');
  }

  // Helper para aplicar soft-delete condicionalmente
  async softDeleteClause(alias) {
    const has = await this.hasColumn('deleted_at');
    return has ? `${alias}.deleted_at IS NULL` : null;
  }

  // Helper gen√©rico para WHERE din√¢mico seguro
  _where(parts) {
    const filtered = parts.filter(Boolean);
    return filtered.length ? `WHERE ${filtered.join(' AND ')}` : '';
  }

  // Buscar por n√∫mero da nota fiscal
  async findByNumero(numero) {
    try {
      const where = [];
      const params = [numero];
      const soft = await this.softDeleteClause('nf');
      if (soft) where.push(soft);
      where.push(`nf.nro = $1`);

      const query = `
        SELECT 
          nf.*,
          c.nome as cliente_nome,
          c.documento as cliente_documento,
          c.cidade as cliente_cidade,
          c.uf as cliente_uf,
          e.nome as embarcador_nome,
          e.documento as embarcador_documento,
          t.nome as transportadora_nome,
          t.cnpj as transportadora_cnpj,
          r.numero as romaneio_numero,
          ee.endereco as endereco_entrega_completo
        FROM ${this.tableName} nf
        LEFT JOIN clientes c ON c.id = nf.cliente_id
        LEFT JOIN embarcadores e ON e.id = nf.embarcador_id
        LEFT JOIN transportadoras t ON t.id = nf.transportadora_id
        LEFT JOIN romaneios r ON r.id = nf.romaneio_id
        LEFT JOIN endereco_entrega ee ON ee.id = nf.endereco_entrega_id
        ${this._where(where)}
        ORDER BY nf.created_at DESC
      `;
      const result = await this.executeQuery(query, params);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar nota fiscal por n√∫mero:', error);
      throw error;
    }
  }

  // Buscar por chave da nota fiscal
  async findByChaveNf(chaveNf) {
    try {
      const where = [];
      const params = [chaveNf];
      const soft = await this.softDeleteClause('nf');
      if (soft) where.push(soft);
      where.push(`nf.chave_nf = $1`);

      const query = `
        SELECT 
          nf.*,
          c.nome as cliente_nome,
          c.documento as cliente_documento,
          c.cidade as cliente_cidade,
          c.uf as cliente_uf,
          e.nome as embarcador_nome,
          e.documento as embarcador_documento,
          t.nome as transportadora_nome,
          t.cnpj as transportadora_cnpj,
          r.numero as romaneio_numero,
          ee.endereco as endereco_entrega_completo
        FROM ${this.tableName} nf
        LEFT JOIN clientes c ON c.id = nf.cliente_id
        LEFT JOIN embarcadores e ON e.id = nf.embarcador_id
        LEFT JOIN transportadoras t ON t.id = nf.transportadora_id
        LEFT JOIN romaneios r ON r.id = nf.romaneio_id
        LEFT JOIN endereco_entrega ee ON ee.id = nf.endereco_entrega_id
        ${this._where(where)}
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar nota fiscal por chave NF:', error);
      throw error;
    }
  }

  // Buscar por chave CTE
  async findByChaveCte(chaveCte) {
    try {
      const where = [];
      const params = [chaveCte];
      const soft = await this.softDeleteClause('nf');
      if (soft) where.push(soft);
      where.push(`nf.chave_cte = $1`);

      const query = `
        SELECT 
          nf.*,
          c.nome as cliente_nome,
          c.documento as cliente_documento,
          c.cidade as cliente_cidade,
          c.uf as cliente_uf,
          e.nome as embarcador_nome,
          e.documento as embarcador_documento,
          t.nome as transportadora_nome,
          t.cnpj as transportadora_cnpj,
          r.numero as romaneio_numero,
          ee.endereco as endereco_entrega_completo
        FROM ${this.tableName} nf
        LEFT JOIN clientes c ON c.id = nf.cliente_id
        LEFT JOIN embarcadores e ON e.id = nf.embarcador_id
        LEFT JOIN transportadoras t ON t.id = nf.transportadora_id
        LEFT JOIN romaneios r ON r.id = nf.romaneio_id
        LEFT JOIN endereco_entrega ee ON ee.id = nf.endereco_entrega_id
        ${this._where(where)}
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar nota fiscal por chave CTE:', error);
      throw error;
    }
  }

  // Buscar por n√∫mero e s√©rie
async findByNumeroSerie(numero, serie) {
  try {
    const sql = `SELECT * FROM notas_fiscais WHERE nro = $1 AND ser = $2 ORDER BY created_at DESC`;
    const result = await this.database.query(sql, [numero, serie]);
    return result.rows;
  } catch (error) {
    console.error('Erro ao buscar notas fiscais por n√∫mero e s√©rie:', error);
    throw error;
  }
}

  // Buscar notas fiscais por transportadora
  async findByTransportadora(transportadoraId, options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 'nf.created_at',
        orderDirection = 'DESC',
        filters = {}
      } = options;

      const validLimit = Math.min(limit, this.maxLimit);
      const offset = (page - 1) * validLimit;

      const where = [];
      const params = [transportadoraId];
      const soft = await this.softDeleteClause('nf');
      if (soft) where.push(soft);
      where.push(`nf.transportadora_id = $1`);

      // Filtros adicionais
      let paramCount = 1;
      if (filters.status_nf) {
        paramCount++;
        where.push(`nf.status_nf = $${paramCount}`);
        params.push(filters.status_nf);
      }
      if (filters.finalizada !== undefined) {
        paramCount++;
        where.push(`nf.finalizada = $${paramCount}`);
        params.push(filters.finalizada);
      }
      if (filters.data_inicio) {
        paramCount++;
        where.push(`nf.emi_nf >= $${paramCount}`);
        params.push(filters.data_inicio);
      }
      if (filters.data_fim) {
        paramCount++;
        where.push(`nf.emi_nf <= $${paramCount}`);
        params.push(filters.data_fim);
      }

      // Query de dados
      let dataSql = `
        SELECT 
          nf.*,
          c.nome as cliente_nome,
          c.documento as cliente_documento,
          c.cidade as cliente_cidade,
          c.uf as cliente_uf,
          e.nome as embarcador_nome,
          t.nome as transportadora_nome,
          t.cnpj as transportadora_cnpj,
          r.numero as romaneio_numero,
          ee.endereco as endereco_entrega_completo
        FROM ${this.tableName} nf
        LEFT JOIN clientes c ON c.id = nf.cliente_id
        LEFT JOIN embarcadores e ON e.id = nf.embarcador_id
        LEFT JOIN transportadoras t ON t.id = nf.transportadora_id
        LEFT JOIN romaneios r ON r.id = nf.romaneio_id
        LEFT JOIN endereco_entrega ee ON ee.id = nf.endereco_entrega_id
        ${this._where(where)}
        ORDER BY ${orderBy} ${orderDirection.toUpperCase()}
        LIMIT $${params.push(validLimit)}
        OFFSET $${params.push(offset)}
      `;

      // Query de contagem
      let countSql = `
        SELECT COUNT(*) AS total
        FROM ${this.tableName} nf
        ${this._where(where)}
      `;

      const [countResult, result] = await Promise.all([
        this.executeQuery(countSql, params.slice(0, params.length - 2)),
        this.executeQuery(dataSql, params)
      ]);

      const total = parseInt(countResult.rows[0]?.total || 0, 10);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page, 10),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (error) {
      logger.error('Erro ao buscar notas fiscais por transportadora:', error);
      throw error;
    }
  }

  // Buscar notas fiscais por cliente
  async findByCliente(clienteId, options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 'nf.created_at',
        orderDirection = 'DESC',
        filters = {}
      } = options;

      const validLimit = Math.min(limit, this.maxLimit);
      const offset = (page - 1) * validLimit;

      const where = [];
      const params = [clienteId];
      const soft = await this.softDeleteClause('nf');
      if (soft) where.push(soft);
      where.push(`nf.cliente_id = $1`);

      // Filtros adicionais
      let paramCount = 1;
      if (filters.status_nf) {
        paramCount++;
        where.push(`nf.status_nf = $${paramCount}`);
        params.push(filters.status_nf);
      }
      if (filters.finalizada !== undefined) {
        paramCount++;
        where.push(`nf.finalizada = $${paramCount}`);
        params.push(filters.finalizada);
      }
      if (filters.data_inicio) {
        paramCount++;
        where.push(`nf.emi_nf >= $${paramCount}`);
        params.push(filters.data_inicio);
      }
      if (filters.data_fim) {
        paramCount++;
        where.push(`nf.emi_nf <= $${paramCount}`);
        params.push(filters.data_fim);
      }

      // Query de dados
      let dataSql = `
        SELECT 
          nf.*,
          c.nome as cliente_nome,
          c.documento as cliente_documento,
          c.cidade as cliente_cidade,
          c.uf as cliente_uf,
          e.nome as embarcador_nome,
          t.nome as transportadora_nome,
          t.cnpj as transportadora_cnpj,
          r.numero as romaneio_numero,
          ee.endereco as endereco_entrega_completo
        FROM ${this.tableName} nf
        LEFT JOIN clientes c ON c.id = nf.cliente_id
        LEFT JOIN embarcadores e ON e.id = nf.embarcador_id
        LEFT JOIN transportadoras t ON t.id = nf.transportadora_id
        LEFT JOIN romaneios r ON r.id = nf.romaneio_id
        LEFT JOIN endereco_entrega ee ON ee.id = nf.endereco_entrega_id
        ${this._where(where)}
        ORDER BY ${orderBy} ${orderDirection.toUpperCase()}
        LIMIT $${params.push(validLimit)}
        OFFSET $${params.push(offset)}
      `;

      // Query de contagem
      let countSql = `
        SELECT COUNT(*) AS total
        FROM ${this.tableName} nf
        ${this._where(where)}
      `;

      const [countResult, result] = await Promise.all([
        this.executeQuery(countSql, params.slice(0, params.length - 2)),
        this.executeQuery(dataSql, params)
      ]);

      const total = parseInt(countResult.rows[0]?.total || 0, 10);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page, 10),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (error) {
      logger.error('Erro ao buscar notas fiscais por cliente:', error);
      throw error;
    }
  }

  // Buscar notas fiscais por romaneio
  async findByRomaneio(romaneioId, options = {}) {
    try {
      const where = [];
      const params = [romaneioId];
      const soft = await this.softDeleteClause('nf');
      if (soft) where.push(soft);
      where.push(`nf.romaneio_id = $1`);

      const query = `
        SELECT 
          nf.*,
          c.nome as cliente_nome,
          c.documento as cliente_documento,
          c.cidade as cliente_cidade,
          c.uf as cliente_uf,
          e.nome as embarcador_nome,
          t.nome as transportadora_nome,
          t.cnpj as transportadora_cnpj,
          r.numero as romaneio_numero,
          r.placa_cavalo,
          r.placa_carreta,
          m.nome as motorista_nome,
          ee.endereco as endereco_entrega_completo,
          ee.cidade as endereco_cidade,
          ee.uf as endereco_uf
        FROM ${this.tableName} nf
        LEFT JOIN clientes c ON c.id = nf.cliente_id
        LEFT JOIN embarcadores e ON e.id = nf.embarcador_id
        LEFT JOIN transportadoras t ON t.id = nf.transportadora_id
        LEFT JOIN romaneios r ON r.id = nf.romaneio_id
        LEFT JOIN motoristas m ON m.id = r.motorista_id
        LEFT JOIN endereco_entrega ee ON ee.id = nf.endereco_entrega_id
        ${this._where(where)}
        ORDER BY nf.ordem ASC, nf.created_at ASC
      `;

      const result = await this.executeQuery(query, params);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar notas fiscais por romaneio:', error);
      throw error;
    }
  }

  // Buscar com relacionamentos (ID espec√≠fico)
  async findWithRelations(id) {
    try {
      const where = [];
      const params = [id];
      const soft = await this.softDeleteClause('nf');
      if (soft) where.push(soft);
      where.push(`nf.id = $1`);

      const query = `
        SELECT 
          nf.*,
          c.nome as cliente_nome,
          c.documento as cliente_documento,
          c.cidade as cliente_cidade,
          c.uf as cliente_uf,
          c.endereco as cliente_endereco,
          e.nome as embarcador_nome,
          e.documento as embarcador_documento,
          t.nome as transportadora_nome,
          t.cnpj as transportadora_cnpj,
          r.numero as romaneio_numero,
          r.placa_cavalo,
          r.placa_carreta,
          m.nome as motorista_nome,
          m.cpf as motorista_cpf,
          m.contato as motorista_contato,
          ee.endereco as endereco_entrega_completo,
          ee.cidade as endereco_cidade,
          ee.uf as endereco_uf,
          ee.bairro as endereco_bairro,
          ee.cep as endereco_cep
        FROM ${this.tableName} nf
        LEFT JOIN clientes c ON c.id = nf.cliente_id
        LEFT JOIN embarcadores e ON e.id = nf.embarcador_id
        LEFT JOIN transportadoras t ON t.id = nf.transportadora_id
        LEFT JOIN romaneios r ON r.id = nf.romaneio_id
        LEFT JOIN motoristas m ON m.id = r.motorista_id
        LEFT JOIN endereco_entrega ee ON ee.id = nf.endereco_entrega_id
        ${this._where(where)}
        LIMIT 1
      `;

      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar nota fiscal com relacionamentos:', error);
      throw error;
    }
  }

  // Buscar com todos os dados relacionados (para listagem)
  async findAllWithStats(options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 'nf.created_at',
        orderDirection = 'DESC',
        filters = {}
      } = options;

      const validLimit = Math.min(limit, this.maxLimit);
      const offset = (page - 1) * validLimit;

      const where = [];
      const params = [];
      const soft = await this.softDeleteClause('nf');
      if (soft) where.push(soft);

      // Aplicar filtros
      let paramCount = 0;
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          paramCount++;
          if (key.includes('_id')) {
            where.push(`nf.${key} = $${paramCount}`);
          } else if (key === 'finalizada') {
            where.push(`nf.finalizada = $${paramCount}`);
          } else if (typeof value === 'string' && value.includes('%')) {
            where.push(`nf.${key} ILIKE $${paramCount}`);
          } else {
            where.push(`nf.${key} = $${paramCount}`);
          }
          params.push(value);
        }
      });

      // Query de dados
      let dataSql = `
        SELECT 
          nf.*,
          c.nome as cliente_nome,
          c.documento as cliente_documento,
          c.cidade as cliente_cidade,
          c.uf as cliente_uf,
          e.nome as embarcador_nome,
          t.nome as transportadora_nome,
          t.cnpj as transportadora_cnpj,
          r.numero as romaneio_numero
        FROM ${this.tableName} nf
        LEFT JOIN clientes c ON c.id = nf.cliente_id
        LEFT JOIN embarcadores e ON e.id = nf.embarcador_id
        LEFT JOIN transportadoras t ON t.id = nf.transportadora_id
        LEFT JOIN romaneios r ON r.id = nf.romaneio_id
        ${this._where(where)}
        ORDER BY ${orderBy} ${orderDirection.toUpperCase()}
        LIMIT $${params.push(validLimit)}
        OFFSET $${params.push(offset)}
      `;

      // Query de contagem
      let countSql = `
        SELECT COUNT(*) AS total
        FROM ${this.tableName} nf
        ${this._where(where)}
      `;

      const [countResult, result] = await Promise.all([
        this.executeQuery(countSql, params.slice(0, params.length - 2)),
        this.executeQuery(dataSql, params)
      ]);

      const total = parseInt(countResult.rows[0]?.total || 0, 10);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page, 10),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (error) {
      logger.error('Erro ao buscar notas fiscais com estat√≠sticas:', error);
      throw error;
    }
  }

  // Finalizar nota fiscal
  async finalizar(id, dataEntrega, horaEntrega, observacoes) {
    try {
      const updateData = {
        finalizada: true,
        data_entrega: dataEntrega,
        hora_entrega: horaEntrega,
        updated_at: new Date()
      };

      if (observacoes) {
        updateData.observacoes = observacoes;
      }

      const entries = Object.entries(updateData);
      const setClause = entries.map(([key], index) => `${key} = $${index + 1}`);
      const values = entries.map(([, value]) => value);
      values.push(id);

      const query = `
        UPDATE ${this.tableName}
        SET ${setClause.join(', ')}
        WHERE id = $${values.length} AND finalizada = false
        RETURNING *
      `;

      const result = await this.executeQuery(query, values);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao finalizar nota fiscal:', error);
      throw error;
    }
  }

  // Atualizar status
  async updateStatus(id, status, observacoes) {
    try {
      const updateData = {
        status_nf: status,
        updated_at: new Date()
      };

      if (observacoes) {
        updateData.observacoes = observacoes;
      }

      const entries = Object.entries(updateData);
      const setClause = entries.map(([key], index) => `${key} = $${index + 1}`);
      const values = entries.map(([, value]) => value);
      values.push(id);

      const query = `
        UPDATE ${this.tableName}
        SET ${setClause.join(', ')}
        WHERE id = $${values.length}
        RETURNING *
      `;

      const result = await this.executeQuery(query, values);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao atualizar status da nota fiscal:', error);
      throw error;
    }
  }

  // Estat√≠sticas gerais
  async getStats() {
    try {
      const where = [];
      const soft = await this.softDeleteClause('nf');
      if (soft) where.push(soft);

      const query = `
        SELECT 
          COUNT(*) AS total,
          COUNT(CASE WHEN nf.finalizada = true THEN 1 END) AS finalizadas,
          COUNT(CASE WHEN nf.finalizada = false THEN 1 END) AS pendentes,
          COUNT(CASE WHEN nf.romaneio_id IS NULL THEN 1 END) AS sem_romaneio,
          COUNT(CASE WHEN nf.romaneio_id IS NOT NULL THEN 1 END) AS com_romaneio,
          COUNT(CASE WHEN nf.nf_retida = true THEN 1 END) AS retidas,
          COUNT(CASE WHEN nf.previsao_entrega < CURRENT_DATE AND nf.finalizada = false THEN 1 END) AS atrasadas,
          COUNT(CASE WHEN nf.created_at >= CURRENT_DATE - INTERVAL '30 days' THEN 1 END) AS mes_atual,
          COALESCE(SUM(nf.valor), 0) AS valor_total,
          COALESCE(AVG(nf.valor), 0) AS valor_medio,
          COALESCE(SUM(nf.peso_calculo), 0) AS peso_total,
          COUNT(DISTINCT nf.cliente_id) AS clientes_unicos,
          COUNT(DISTINCT nf.transportadora_id) AS transportadoras_unicas
        FROM ${this.tableName} nf
        ${this._where(where)}
      `;
      const result = await this.executeQuery(query);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas de notas fiscais:', error);
      throw error;
    }
  }

  // Estat√≠sticas por per√≠odo
  async getStatsByPeriod(dataInicio, dataFim) {
    try {
      const where = [];
      const params = [dataInicio, dataFim];
      const soft = await this.softDeleteClause('nf');
      if (soft) where.push(soft);
      where.push(`nf.emi_nf >= $1 AND nf.emi_nf <= $2`);

      const query = `
        SELECT 
          COUNT(*) AS total,
          COUNT(CASE WHEN nf.finalizada = true THEN 1 END) AS finalizadas,
          COUNT(CASE WHEN nf.finalizada = false THEN 1 END) AS pendentes,
          COALESCE(SUM(nf.valor), 0) AS valor_total,
          COALESCE(AVG(nf.valor), 0) AS valor_medio,
          COALESCE(SUM(nf.peso_calculo), 0) AS peso_total,
          COUNT(DISTINCT nf.cliente_id) AS clientes_unicos,
          COUNT(DISTINCT nf.transportadora_id) AS transportadoras_unicas
        FROM ${this.tableName} nf
        ${this._where(where)}
      `;
      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas por per√≠odo:', error);
      throw error;
    }
  }

  // Valida√ß√µes
  async validateUniqueChaveNf(chaveNf, excludeId = null) {
    try {
      const where = [];
      const params = [chaveNf];
      const soft = await this.softDeleteClause('nf');
      if (soft) where.push(soft);
      where.push(`nf.chave_nf = $1`);

      if (excludeId) {
        params.push(excludeId);
        where.push(`nf.id != $${params.length}`);
      }

      const query = `
        SELECT nf.id 
        FROM ${this.tableName} nf
        ${this._where(where)}
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows.length === 0;
    } catch (error) {
      logger.error('Erro ao validar chave NF √∫nica:', error);
      throw error;
    }
  }

  async validateUniqueChaveCte(chaveCte, excludeId = null) {
    try {
      const where = [];
      const params = [chaveCte];
      const soft = await this.softDeleteClause('nf');
      if (soft) where.push(soft);
      where.push(`nf.chave_cte = $1`);

      if (excludeId) {
        params.push(excludeId);
        where.push(`nf.id != $${params.length}`);
      }

      const query = `
        SELECT nf.id 
        FROM ${this.tableName} nf
        ${this._where(where)}
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows.length === 0;
    } catch (error) {
      logger.error('Erro ao validar chave CTE √∫nica:', error);
      throw error;
    }
  }


 
}

module.exports = NotasFiscaisRepository;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\notas.repository.js
================================================================================

// ==========================================
// 1. USADO PELO JOB PARA VALIDAR NOTAS EM PROCESSO BUSCA
// ==========================================

// backend/src/repositories/notas.repository.js
const db = require('../database/connection');
const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class NotasRepository extends BaseRepository {
  constructor(database) {
    super(database, 'notas_fiscais');
  }

  // Buscar NFs pendentes por transportadora
  async findPendingByTransportadora(transportadoraId) {
    const query = `
      SELECT 
        nf.id,
        nf.nro_ctrc,
        nf.chave_nf,
        nf.chave_cte,
        nf.nro,
        nf.ser,
        nf.nome_rep,
        nf.cod_rep,
        nf.peso_calculo,
        nf.peso_real,
        nf.qtd_volumes,
        nf.status_nf,
        nf.status_api,
        nf.data_entrega,
        nf.previsao_entrega,
        nf.created_at,
        nf.updated_at,
        c.nome as cliente_nome,
        c.documento as cliente_documento,
        e.nome as embarcador_nome
      FROM notas_fiscais nf
      INNER JOIN clientes c ON nf.cliente_id = c.id
      INNER JOIN embarcadores e ON nf.embarcador_id = e.id
      WHERE nf.transportadora_id = $1
        AND nf.finalizada = false
        AND nf.status_nf NOT IN ('entregue', 'cancelada', 'devolvida')
      ORDER BY nf.previsao_entrega ASC, nf.created_at ASC
    `;
    
    const result = await this.database.query(query, [transportadoraId]);
    return result.rows;
  }

  // Outros m√©todos √∫teis para o sistema de jobs:
  async findByStatus(status) {
    const query = `
      SELECT * FROM notas_fiscais 
      WHERE status_nf = $1 
      ORDER BY created_at DESC
    `;
    
    const result = await this.database.query(query, [status]);
    return result.rows;
  }

  async updateStatus(nfId, status, dataEntrega = null) {
    const query = `
      UPDATE notas_fiscais 
      SET status_nf = $1, 
          data_entrega = COALESCE($2, data_entrega),
          updated_at = NOW()
      WHERE id = $3 
      RETURNING *
    `;
    
    const result = await this.database.query(query, [status, dataEntrega, nfId]);
    return result.rows[0];
  }

  async findByChaveNF(chaveNf) {
    const query = `
      SELECT * FROM notas_fiscais 
      WHERE chave_nf = $1 
      LIMIT 1
    `;
    
    const result = await this.database.query(query, [chaveNf]);
    return result.rows[0];
  }


  async updateAPIStatus(notaId, status, dataIntegracao = null, observacoes = null) {
    const updateFields = ['status_api = $2'];
    const values = [notaId, status];
    let i = 2;

    if (dataIntegracao) {
      updateFields.push(`data_integracao = $${++i}`);
      values.push(dataIntegracao);
    }
    if (observacoes) {
      updateFields.push(`observacoes = $${++i}`);
      values.push(observacoes);
    }

    const query = `
      UPDATE notas_fiscais 
      SET ${updateFields.join(', ')}, updated_at = NOW()
      WHERE id = $1
      RETURNING *
    `;
    const result = await this.database.query(query, values);
    return result.rows[0];
  }

  async finalizarNota(notaId, codigoFinalizador, observacoes = null) {
    const query = `
      UPDATE notas_fiscais 
      SET 
        finalizada = true,
        status_api = 'finalizada',
        data_integracao = NOW(),
        observacoes = COALESCE($3, observacoes),
        updated_at = NOW()
      WHERE id = $1
      RETURNING *
    `;
    const result = await this.database.query(query, [notaId, codigoFinalizador, observacoes]);
    return result.rows[0];
  }

  async getIntegrationStats(transportadoraId = null, dias = 7) {
    const params = [dias];
    let where = '';

    if (transportadoraId) {
      where = 'AND nf.transportadora_id = $2';
      params.push(transportadoraId);
    }

    const query = `
      SELECT 
        COUNT(*) as total_nfs,
        COUNT(CASE WHEN nf.finalizada = true THEN 1 END) as finalizadas,
        COUNT(CASE WHEN nf.finalizada = false THEN 1 END) as pendentes,
        COUNT(CASE WHEN nf.status_api = 'erro' THEN 1 END) as com_erro,
        AVG(CASE 
          WHEN nf.finalizada = true AND nf.data_integracao IS NOT NULL 
          THEN EXTRACT(EPOCH FROM (nf.data_integracao - nf.created_at)) / 3600 
        END) as tempo_medio_horas
      FROM notas_fiscais nf
      WHERE nf.created_at >= NOW() - make_interval(days => $1)
      ${where}
    `;
    const result = await this.database.query(query, params);
    return result.rows[0];
  }
}

module.exports = NotasRepository;



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\ocorrencias.repository.js
================================================================================

// repositories/ocorrencias.repository.js
const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class OcorrenciasRepository extends BaseRepository {
  constructor() {
    super('ocorrencias');
  }

  // Sobrescrever o m√©todo create para usar SQL manual com schema correto
  async create(data) {
    try {
      const sql = `
        INSERT INTO ${this.tableName} (
          nro_nf, 
          "dataHoraEnvio", 
          "dataHoraEvento", 
          codigo, 
          descricao,
          complemento,
          "nomeRecebedor",
          "docRecebedor", 
          latitude, 
          longitude, 
          "linkComprovante",
          "zaapId",
          "messageId",
          id_z_api,
          enviado_zap,
          enviado_date,
          status,
          created_at,
          updated_at,
          link_comprovante_sistema,
          status_download_comprovante,
          tipo_comprovante_download
        ) VALUES (
          $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
          $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22
        )
        RETURNING *
      `;

      const values = [
        data.nro_nf,                                                    // $1 - integer NOT NULL
        data.dataHoraEnvio,                                            // $2 - timestamp NOT NULL
        data.dataHoraEvento || null,                                   // $3 - timestamp nullable
        data.codigo,                                                   // $4 - integer NOT NULL
        data.descricao,                                               // $5 - text NOT NULL
        data.complemento || null,                                     // $6 - varchar(255) nullable
        data.nomeRecebedor || null,                                   // $7 - varchar(255) nullable
        data.docRecebedor || null,                                    // $8 - char(20) nullable
        data.latitude || null,                                        // $9 - numeric(8,2) nullable
        data.longitude || null,                                       // $10 - numeric(8,2) nullable
        data.linkComprovante || null,                                 // $11 - text nullable
        data.zaapId || null,                                          // $12 - varchar(255) nullable
        data.messageId || null,                                       // $13 - varchar(255) nullable
        data.id_z_api || null,                                        // $14 - varchar(255) nullable
        data.enviado_zap !== undefined ? data.enviado_zap : false,    // $15 - boolean DEFAULT false
        data.enviado_date || null,                                    // $16 - timestamp nullable
        data.status || 'waiting',                                     // $17 - varchar(255) com constraint
        data.created_at || new Date(),                                // $18 - timestamp
        data.updated_at || new Date(),                                // $19 - timestamp
        data.link_comprovante_sistema || null,                       // $20 - text nullable
        data.status_download_comprovante || null,                    // $21 - integer nullable
        data.tipo_comprovante_download || null                       // $22 - varchar(255) nullable
      ];

      const result = await this.executeQuery(sql, values);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao criar ocorr√™ncia:', error);
      throw error;
    }
  }

  // Helper para aplicar soft-delete condicionalmente
  async softDeleteClause(alias) {
    const has = await this.hasColumn('deleted_at');
    return has ? `${alias}.deleted_at IS NULL` : null;
  }

  // Helper gen√©rico para WHERE din√¢mico seguro
  _where(parts) {
    const filtered = parts.filter(Boolean);
    return filtered.length ? `WHERE ${filtered.join(' AND ')}` : '';
  }

  // Buscar todas ocorr√™ncias com relacionamentos
  async findAllWithRelations(options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 'o.id',
        orderDirection = 'DESC',
        filters = {}
      } = options;

      const validLimit = Math.min(limit, this.maxLimit);
      const offset = (page - 1) * validLimit;

      const where = [];
      const params = [];
      const soft = await this.softDeleteClause('o');
      if (soft) where.push(soft);

      // Aplicar filtros
      let paramCount = 0;
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          paramCount++;
          if (key === 'nro_nf' || key === 'codigo') {
            where.push(`o.${key} = $${paramCount}`);
          } else if (typeof value === 'string' && value.includes('%')) {
            where.push(`o.${key} ILIKE $${paramCount}`);
          } else {
            where.push(`o.${key} = $${paramCount}`);
          }
          params.push(value);
        }
      });

      // Query de dados
      const dataSql = `
        SELECT 
          o.*,
          co.descricao as codigo_descricao,
          co.tipo as codigo_tipo,
          co.finalizadora,
          nf.nro as nota_fiscal_numero
        FROM ${this.tableName} o
        LEFT JOIN codigo_ocorrencias co ON co.codigo = o.codigo
        LEFT JOIN notas_fiscais nf ON nf.nro = o.nro_nf
        ${this._where(where)}
        ORDER BY ${orderBy} ${orderDirection.toUpperCase()}
        LIMIT $${params.push(validLimit)}
        OFFSET $${params.push(offset)}
      `;

      // Query de contagem
      const countSql = `
        SELECT COUNT(o.id) AS total
        FROM ${this.tableName} o
        ${this._where(where)}
      `;

      const [countResult, result] = await Promise.all([
        this.executeQuery(countSql, params.slice(0, params.length - 2)),
        this.executeQuery(dataSql, params)
      ]);

      const total = parseInt(countResult.rows[0]?.total || 0, 10);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page, 10),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (error) {
      logger.error('Erro ao buscar ocorr√™ncias:', error);
      throw error;
    }
  }

  // Buscar por n√∫mero da NF
  async findByNumeroNF(numeroNF) {
    try {
      const where = [];
      const params = [numeroNF];
      const soft = await this.softDeleteClause('o');
      if (soft) where.push(soft);
      where.push(`o.nro_nf = $1`);

      const query = `
        SELECT 
          o.*,
          co.descricao as codigo_descricao,
          co.tipo as codigo_tipo,
          co.finalizadora
        FROM ${this.tableName} o
        LEFT JOIN codigo_ocorrencias co ON co.codigo = o.codigo
        ${this._where(where)}
        ORDER BY o."dataHoraEvento" DESC, o.created_at DESC
      `;

      const result = await this.executeQuery(query, params);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar ocorr√™ncias por n√∫mero NF:', error);
      throw error;
    }
  }

  // Buscar por c√≥digo de ocorr√™ncia
  async findByCodigo(codigo) {
    try {
      const where = [];
      const params = [codigo];
      const soft = await this.softDeleteClause('o');
      if (soft) where.push(soft);
      where.push(`o.codigo = $1`);

      const query = `
        SELECT 
          o.*,
          co.descricao as codigo_descricao,
          co.tipo as codigo_tipo,
          co.finalizadora
        FROM ${this.tableName} o
        LEFT JOIN codigo_ocorrencias co ON co.codigo = o.codigo
        ${this._where(where)}
        ORDER BY o."dataHoraEvento" DESC, o.created_at DESC
      `;

      const result = await this.executeQuery(query, params);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar ocorr√™ncias por c√≥digo:', error);
      throw error;
    }
  }

  // Verificar se c√≥digo √© finalizador
  async isCodigoFinalizador(codigo) {
    try {
      const query = `
        SELECT finalizadora FROM codigo_ocorrencias 
        WHERE codigo = $1 AND api = true
      `;
      
      const result = await this.executeQuery(query, [codigo]);
      return result.rows.length > 0 ? result.rows[0].finalizadora : false;
    } catch (error) {
      logger.error('Erro ao verificar c√≥digo finalizador:', error);
      return false;
    }
  }

  // Buscar √∫ltima ocorr√™ncia de uma NF
  async getLastOcorrencia(nroNF) {
    try {
      const query = `
        SELECT o.*, co.finalizadora, co.descricao as codigo_descricao
        FROM ${this.tableName} o
        LEFT JOIN codigo_ocorrencias co ON co.codigo = o.codigo
        WHERE o.nro_nf = $1
        ORDER BY o."dataHoraEvento" DESC, o.created_at DESC
        LIMIT 1
      `;
      
      const result = await this.executeQuery(query, [nroNF]);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar √∫ltima ocorr√™ncia:', error);
      throw error;
    }
  }

  // Buscar ocorr√™ncia existente para evitar duplica√ß√£o
  async findOcorrenciaExistente(nroNf, codigo, dataHoraEvento) {
    try {
      const sql = `
        SELECT id FROM ${this.tableName} 
        WHERE nro_nf = $1 
        AND codigo = $2 
        AND "dataHoraEvento" = $3 
        LIMIT 1
      `;
      
      const result = await this.executeQuery(sql, [
        nroNf, 
        codigo, 
        new Date(dataHoraEvento)
      ]);

      return result.rows[0] || null;
    } catch (error) {
      logger.warn('Erro ao buscar ocorr√™ncia existente:', error.message);
      return null;
    }
  }

  // Buscar ocorr√™ncia por nota fiscal, c√≥digo e data/hora do evento
  async findByNotaFiscalAndCodigo(nroNf, codigo, dataHoraEvento) {
    try {
      const sql = `
        SELECT * FROM ${this.tableName} 
        WHERE nro_nf = $1 
        AND codigo = $2 
        AND "dataHoraEvento" = $3
        LIMIT 1
      `;
      
      const result = await this.executeQuery(sql, [nroNf, codigo, dataHoraEvento]);
      return result.rows[0] || null;
    } catch (error) {
      logger.error('Erro ao buscar ocorr√™ncia por NF, c√≥digo e data:', error);
      throw error;
    }
  }

  // Estat√≠sticas de ocorr√™ncias por transportadora
  async getStatsbyTransportadora(transportadoraId, dias = 30) {
    try {
      const query = `
        SELECT 
          co.codigo,
          co.descricao,
          COUNT(*) as quantidade,
          co.finalizadora
        FROM ${this.tableName} o
        INNER JOIN notas_fiscais nf ON nf.nro = o.nro_nf
        INNER JOIN codigo_ocorrencias co ON co.codigo = o.codigo
        WHERE nf.transportadora_id = $1
          AND o.created_at >= NOW() - INTERVAL '${dias} days'
        GROUP BY co.codigo, co.descricao, co.finalizadora
        ORDER BY quantidade DESC
      `;
      
      const result = await this.executeQuery(query, [transportadoraId]);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas por transportadora:', error);
      throw error;
    }
  }
}

module.exports = OcorrenciasRepository;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\restricao-logistica.repository.js
================================================================================

// restricao-logistica.repository.js
const BaseRepository = require('./base.repository');

class RestricaoLogisticaRepository extends BaseRepository {
  constructor() {
    super('restricao_logistica');
  }
}

module.exports = RestricaoLogisticaRepository;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\romaneios.repository.js
================================================================================

const BaseRepository = require('./base.repository');
const db = require('../config/database');

class RomaneiosRepository extends BaseRepository {
  constructor() {
    super('romaneios');
  }

  // Buscar todos com relacionamentos - CORRIGIDO
  async findAllWithRelations(options = {}) {
    const {
      page = 1,
      limit = this.defaultLimit,
      orderBy = 'created_at',
      orderDirection = 'DESC',
      where = {}
    } = options;

    const validLimit = Math.min(limit, this.maxLimit);
    const offset = (page - 1) * validLimit;

    let whereClause = '1=1';
    const params = [];
    let paramCount = 0;

    // Filtros (mantidos iguais)
    if (where.numero) {
      paramCount++;
      whereClause += ` AND r.numero = $${paramCount}`;
      params.push(where.numero);
    }

    if (where.motorista_id) {
      paramCount++;
      whereClause += ` AND r.motorista_id = $${paramCount}`;
      params.push(where.motorista_id);
    }

    if (where.placa_cavalo) {
      paramCount++;
      whereClause += ` AND r.placa_cavalo ILIKE $${paramCount}`;
      params.push(`%${where.placa_cavalo}%`);
    }

    if (where.roteirizacao) {
      paramCount++;
      whereClause += ` AND r.roteirizacao = $${paramCount}`;
      params.push(where.roteirizacao);
    }

    if (where.roteirizar !== undefined) {
      paramCount++;
      whereClause += ` AND r.roteirizar = $${paramCount}`;
      params.push(where.roteirizar);
    }

    if (where.unidade) {
      paramCount++;
      whereClause += ` AND r.unidade ILIKE $${paramCount}`;
      params.push(`%${where.unidade}%`);
    }

    if (where.doca) {
      paramCount++;
      whereClause += ` AND r.doca ILIKE $${paramCount}`;
      params.push(`%${where.doca}%`);
    }

    // Data de emiss√£o
    if (where.data_inicio && where.data_fim) {
      paramCount++;
      whereClause += ` AND r.emissao BETWEEN $${paramCount} AND $${paramCount + 1}`;
      params.push(where.data_inicio, where.data_fim);
      paramCount++;
    } else if (where.data_inicio) {
      paramCount++;
      whereClause += ` AND r.emissao >= $${paramCount}`;
      params.push(where.data_inicio);
    } else if (where.data_fim) {
      paramCount++;
      whereClause += ` AND r.emissao <= $${paramCount}`;
      params.push(where.data_fim);
    }

    // QUERY CORRIGIDA - usando as colunas corretas da tabela notas_fiscais
    const query = `
      SELECT 
        r.*,
        m.nome as motorista_nome,
        m.cpf as motorista_cpf,
        m.contato as motorista_contato,
        COUNT(nf.id) as total_notas_fiscais,
        SUM(nf.peso_calculo) as peso_total_notas,  -- CORRIGIDO: nf.peso ‚Üí nf.peso_calculo
        SUM(nf.qtd_volumes) as volume_total_notas   -- CORRIGIDO: nf.volume ‚Üí nf.qtd_volumes
      FROM ${this.tableName} r
      LEFT JOIN motoristas m ON r.motorista_id = m.id
      LEFT JOIN notas_fiscais nf ON r.id = nf.romaneio_id
      WHERE ${whereClause}
      GROUP BY r.id, m.nome, m.cpf, m.contato
      ORDER BY r.${orderBy} ${orderDirection.toUpperCase()}
      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}
    `;

    params.push(validLimit, offset);

    const countQuery = `
      SELECT COUNT(DISTINCT r.id) as total
      FROM ${this.tableName} r
      LEFT JOIN motoristas m ON r.motorista_id = m.id
      WHERE ${whereClause}
    `;

    const [data, countResult] = await Promise.all([
      this.executeQuery(query, params),
      this.executeQuery(countQuery, params.slice(0, paramCount))
    ]);

    const total = parseInt(countResult.rows[0].total, 10);

    return {
      data: data.rows,
      pagination: {
        page: parseInt(page, 10),
        limit: validLimit,
        total,
        pages: Math.ceil(total / validLimit),
        hasNext: page < Math.ceil(total / validLimit),
        hasPrev: page > 1
      }
    };
  }

// Buscar por motorista - CORRIGIDO
async findByMotorista(motorista_id) {
  const query = `
    SELECT 
      r.*,
      m.nome as motorista_nome,
      m.cpf as motorista_cpf,
      m.contato as motorista_contato,
      COUNT(nf.id) as total_notas_fiscais,
      COALESCE(SUM(nf.peso_calculo), 0) as peso_total_notas,
      COALESCE(SUM(nf.qtd_volumes), 0) as volume_total_notas
    FROM ${this.tableName} r
    LEFT JOIN motoristas m ON r.motorista_id = m.id
    LEFT JOIN notas_fiscais nf ON r.id = nf.romaneio_id
    WHERE r.motorista_id = $1
    GROUP BY r.id, m.nome, m.cpf, m.contato
    ORDER BY r.created_at DESC
  `;

  const result = await this.executeQuery(query, [motorista_id]);
  return result.rows;
}



  // Buscar por ID com relacionamentos - CORRIGIDO
  async findWithRelations(id) {
    const query = `
      SELECT 
        r.*,
        m.nome as motorista_nome,
        m.cpf as motorista_cpf,
        m.contato as motorista_contato,
        m.email as motorista_email,
        COUNT(nf.id) as total_notas_fiscais,
        SUM(nf.peso_calculo) as peso_total_notas,  -- CORRIGIDO
        SUM(nf.qtd_volumes) as volume_total_notas,  -- CORRIGIDO
        SUM(nf.valor) as valor_total_notas
      FROM ${this.tableName} r
      LEFT JOIN motoristas m ON r.motorista_id = m.id
      LEFT JOIN notas_fiscais nf ON r.id = nf.romaneio_id
      WHERE r.id = $1
      GROUP BY r.id, m.nome, m.cpf, m.contato, m.email
    `;

    const result = await this.executeQuery(query, [id]);
    return result.rows[0] || null;
  }

  // Buscar por per√≠odo - CORRIGIDO
  async findByPeriodo(dataInicio, dataFim) {
    const query = `
      SELECT 
        r.*,
        m.nome as motorista_nome,
        COUNT(nf.id) as total_notas_fiscais,
        SUM(nf.peso_calculo) as peso_total,  -- CORRIGIDO
        SUM(nf.qtd_volumes) as volume_total   -- CORRIGIDO
      FROM ${this.tableName} r
      LEFT JOIN motoristas m ON r.motorista_id = m.id
      LEFT JOIN notas_fiscais nf ON r.id = nf.romaneio_id
      WHERE r.emissao BETWEEN $1 AND $2
      GROUP BY r.id, m.nome
      ORDER BY r.emissao DESC
    `;

    const result = await this.executeQuery(query, [dataInicio, dataFim]);
    return result.rows;
  }

  // Buscar romaneios pendentes de roteiriza√ß√£o - CORRIGIDO
  async findPendentesRoteirizacao() {
    const query = `
      SELECT 
        r.*,
        m.nome as motorista_nome,
        COUNT(nf.id) as total_notas_fiscais,
        SUM(nf.peso_calculo) as peso_total,  -- CORRIGIDO
        SUM(nf.qtd_volumes) as volume_total   -- CORRIGIDO
      FROM ${this.tableName} r
      LEFT JOIN motoristas m ON r.motorista_id = m.id
      LEFT JOIN notas_fiscais nf ON r.id = nf.romaneio_id
      WHERE r.roteirizar = true
      GROUP BY r.id, m.nome
      ORDER BY r.emissao ASC
    `;

    const result = await this.executeQuery(query);
    return result.rows;
  }

  // Buscar romaneios por unidade - CORRIGIDO
  async findByUnidade(unidade) {
    const query = `
      SELECT 
        r.*,
        m.nome as motorista_nome,
        COUNT(nf.id) as total_notas_fiscais,
        SUM(nf.peso_calculo) as peso_total,  -- CORRIGIDO
        SUM(nf.qtd_volumes) as volume_total   -- CORRIGIDO
      FROM ${this.tableName} r
      LEFT JOIN motoristas m ON r.motorista_id = m.id
      LEFT JOIN notas_fiscais nf ON r.id = nf.romaneio_id
      WHERE r.unidade = $1
      GROUP BY r.id, m.nome
      ORDER BY r.created_at DESC
    `;

    const result = await this.executeQuery(query, [unidade]);
    return result.rows;
  }





  // Buscar romaneios por doca - CORRIGIDO
  async findByDoca(doca) {
    const query = `
      SELECT 
        r.*,
        m.nome as motorista_nome,
        COUNT(nf.id) as total_notas_fiscais,
        SUM(nf.peso_calculo) as peso_total,  -- CORRIGIDO
        SUM(nf.qtd_volumes) as volume_total   -- CORRIGIDO
      FROM ${this.tableName} r
      LEFT JOIN motoristas m ON r.motorista_id = m.id
      LEFT JOIN notas_fiscais nf ON r.id = nf.romaneio_id
      WHERE r.doca = $1
      GROUP BY r.id, m.nome
      ORDER BY r.created_at DESC
    `;

    const result = await this.executeQuery(query, [doca]);
    return result.rows;
  }

  // Buscar romaneios por per√≠odo
  async findByPeriodo(dataInicio, dataFim) {
    const query = `
      SELECT 
        r.*,
        m.nome as motorista_nome,
        COUNT(nf.id) as total_notas_fiscais,
    SUM(nf.peso_calculo) as peso_total,
SUM(nf.qtd_volumes) as volume_total
      FROM ${this.tableName} r
      LEFT JOIN motoristas m ON r.motorista_id = m.id
      LEFT JOIN notas_fiscais nf ON r.id = nf.romaneio_id
      WHERE r.emissao BETWEEN $1 AND $2
      GROUP BY r.id, m.nome
      ORDER BY r.emissao DESC
    `;

    const result = await this.executeQuery(query, [dataInicio, dataFim]);
    return result.rows;
  }
}

module.exports = RomaneiosRepository;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\settings.repository.js
================================================================================

// ==========================================
// 6. EXTENS√ÉO DO SETTINGS REPOSITORY
// ==========================================
// backend/src/repositories/settings.repository.js

const db = require('../database/connection');
const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class SettingsRepository extends BaseRepository {
  constructor(database = db) {
     super(database, 'settings');
   }

  // Buscar configura√ß√£o por slug
  async findBySlug(slug, env = 'production') {
    const query = `
      SELECT * FROM settings 
      WHERE slug = $1 AND env = $2
      ORDER BY created_at DESC
      LIMIT 1
    `;
    
    const result = await this.database.query(query, [slug, env]);
    return result.rows[0];
  }

  // Buscar token ativo para integra√ß√£o
  async getActiveToken(integracao) {
    const query = `
      SELECT * FROM api_tokens 
      WHERE integracao = $1 
        AND active = true 
        AND (expires_at IS NULL OR expires_at > NOW())
      ORDER BY created_at DESC
      LIMIT 1
    `;
    
    const result = await this.database.query(query, [integracao]);
    return result.rows[0];
  }

  // Atualizar ou criar configura√ß√£o
  async upsertConfig(slug, settings, env = 'production') {
    const query = `
      INSERT INTO settings (slug, env, settings, created_at, updated_at)
      VALUES ($1, $2, $3, NOW(), NOW())
      ON CONFLICT (slug, env) 
      DO UPDATE SET 
        settings = $3,
        updated_at = NOW()
      RETURNING *
    `;
    
    const values = [slug, env, JSON.stringify(settings)];
    const result = await this.database.query(query, values);
    
    return result.rows[0];
  }

  // Listar todas as configura√ß√µes
  async getAllConfigs(env = 'production') {
    const query = `
      SELECT slug, settings, created_at, updated_at 
      FROM settings 
      WHERE env = $1
      ORDER BY slug ASC
    `;
    
    const result = await this.database.query(query, [env]);
    return result.rows;
  }
}

module.exports = SettingsRepository;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\transportadora-codigo-ocorrencia.repository.js
================================================================================

// repositories/transportadora-codigo-ocorrencia.repository.js
const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class TransportadoraCodigoOcorrenciaRepository extends BaseRepository {
  constructor() {
    super('transportadora_codigo_ocorrencia');
  }

  // Helper para aplicar soft-delete condicionalmente
  async softDeleteClause(alias) {
    const has = await this.hasColumn('deleted_at');
    return has ? `${alias}.deleted_at IS NULL` : null;
  }

  // Helper gen√©rico para WHERE din√¢mico seguro
  _where(parts) {
    const filtered = parts.filter(Boolean);
    return filtered.length ? `WHERE ${filtered.join(' AND ')}` : '';
  }

  // Buscar todos com relacionamentos
  async findAllWithRelations(options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 'tco.created_at',
        orderDirection = 'DESC',
        filters = {}
      } = options;

      const validLimit = Math.min(limit, this.maxLimit);
      const offset = (page - 1) * validLimit;

      const where = [];
      const params = [];
      const soft = await this.softDeleteClause('tco');
      if (soft) where.push(soft);

      // Aplicar filtros
      let paramCount = 0;
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          paramCount++;
          if (key === 'transportadora_id') {
            where.push(`tco.transportadora_id = $${paramCount}`);
          } else if (key === 'codigo_ocorrencia_codigo') {
            where.push(`tco.codigo_ocorrencia_codigo = $${paramCount}`);
          } else if (typeof value === 'string' && value.includes('%')) {
            where.push(`tco.${key} ILIKE $${paramCount}`);
          } else {
            where.push(`tco.${key} = $${paramCount}`);
          }
          params.push(value);
        }
      });

      // Query de dados
      const dataSql = `
        SELECT 
          tco.*,
          t.nome as transportadora_nome,
          t.cnpj as transportadora_cnpj,
          co.descricao as ocorrencia_descricao,
          co.tipo as ocorrencia_tipo,
          co.processo as ocorrencia_processo,
          co.finalizadora as ocorrencia_finalizadora
        FROM ${this.tableName} tco
        LEFT JOIN transportadoras t ON t.id = tco.transportadora_id
        LEFT JOIN codigo_ocorrencias co ON co.codigo = tco.codigo_ocorrencia_codigo
        ${this._where(where)}
        ORDER BY ${orderBy} ${orderDirection.toUpperCase()}
        LIMIT $${params.push(validLimit)}
        OFFSET $${params.push(offset)}
      `;

      // Query de contagem
      const countSql = `
        SELECT COUNT(*) AS total
        FROM ${this.tableName} tco
        ${this._where(where)}
      `;

      const [countResult, result] = await Promise.all([
        this.executeQuery(countSql, params.slice(0, params.length - 2)),
        this.executeQuery(dataSql, params)
      ]);

      const total = parseInt(countResult.rows[0]?.total || 0, 10);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page, 10),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (error) {
      logger.error('Erro ao buscar v√≠nculos transportadora-c√≥digo:', error);
      throw error;
    }
  }

  // Buscar por ID com relacionamentos
  async findWithRelations(id) {
    try {
      const where = [];
      const params = [id];
      const soft = await this.softDeleteClause('tco');
      if (soft) where.push(soft);
      where.push(`tco.id = $1`);

      const query = `
        SELECT 
          tco.*,
          t.nome as transportadora_nome,
          t.cnpj as transportadora_cnpj,
          t.uf as transportadora_uf,
          co.descricao as ocorrencia_descricao,
          co.tipo as ocorrencia_tipo,
          co.processo as ocorrencia_processo,
          co.finalizadora as ocorrencia_finalizadora,
          co.api as ocorrencia_api
        FROM ${this.tableName} tco
        LEFT JOIN transportadoras t ON t.id = tco.transportadora_id
        LEFT JOIN codigo_ocorrencias co ON co.codigo = tco.codigo_ocorrencia_codigo
        ${this._where(where)}
        LIMIT 1
      `;

      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar v√≠nculo com relacionamentos:', error);
      throw error;
    }
  }

  // Buscar por transportadora
  async findByTransportadora(transportadoraId, options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 'co.codigo',
        orderDirection = 'ASC'
      } = options;

      const validLimit = Math.min(limit, this.maxLimit);
      const offset = (page - 1) * validLimit;

      const where = [];
      const params = [transportadoraId];
      const soft = await this.softDeleteClause('tco');
      if (soft) where.push(soft);
      where.push(`tco.transportadora_id = $1`);

      // Query de dados
      const dataSql = `
        SELECT 
          tco.*,
          co.descricao as ocorrencia_descricao,
          co.tipo as ocorrencia_tipo,
          co.processo as ocorrencia_processo,
          co.finalizadora as ocorrencia_finalizadora,
          co.api as ocorrencia_api
        FROM ${this.tableName} tco
        LEFT JOIN codigo_ocorrencias co ON co.codigo = tco.codigo_ocorrencia_codigo
        ${this._where(where)}
        ORDER BY ${orderBy} ${orderDirection.toUpperCase()}
        LIMIT $${params.push(validLimit)}
        OFFSET $${params.push(offset)}
      `;

      // Query de contagem
      const countSql = `
        SELECT COUNT(*) AS total
        FROM ${this.tableName} tco
        ${this._where(where)}
      `;

      const [countResult, result] = await Promise.all([
        this.executeQuery(countSql, params.slice(0, params.length - 2)),
        this.executeQuery(dataSql, params)
      ]);

      const total = parseInt(countResult.rows[0]?.total || 0, 10);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page, 10),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (error) {
      logger.error('Erro ao buscar c√≥digos por transportadora:', error);
      throw error;
    }
  }

  // Buscar por c√≥digo de ocorr√™ncia
  async findByCodigoOcorrencia(codigoOcorrencia, options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 't.nome',
        orderDirection = 'ASC'
      } = options;

      const validLimit = Math.min(limit, this.maxLimit);
      const offset = (page - 1) * validLimit;

      const where = [];
      const params = [codigoOcorrencia];
      const soft = await this.softDeleteClause('tco');
      if (soft) where.push(soft);
      where.push(`tco.codigo_ocorrencia_codigo = $1`);

      // Query de dados
      const dataSql = `
        SELECT 
          tco.*,
          t.nome as transportadora_nome,
          t.cnpj as transportadora_cnpj,
          t.uf as transportadora_uf
        FROM ${this.tableName} tco
        LEFT JOIN transportadoras t ON t.id = tco.transportadora_id
        ${this._where(where)}
        ORDER BY ${orderBy} ${orderDirection.toUpperCase()}
        LIMIT $${params.push(validLimit)}
        OFFSET $${params.push(offset)}
      `;

      // Query de contagem
      const countSql = `
        SELECT COUNT(*) AS total
        FROM ${this.tableName} tco
        ${this._where(where)}
      `;

      const [countResult, result] = await Promise.all([
        this.executeQuery(countSql, params.slice(0, params.length - 2)),
        this.executeQuery(dataSql, params)
      ]);

      const total = parseInt(countResult.rows[0]?.total || 0, 10);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page, 10),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (error) {
      logger.error('Erro ao buscar transportadoras por c√≥digo:', error);
      throw error;
    }
  }

  // Verificar se v√≠nculo j√° existe
  async existsVinculo(transportadoraId, codigoOcorrencia) {
    try {
      const where = [];
      const params = [transportadoraId, codigoOcorrencia];
      const soft = await this.softDeleteClause('tco');
      if (soft) where.push(soft);
      where.push(`tco.transportadora_id = $1 AND tco.codigo_ocorrencia_codigo = $2`);

      const query = `
        SELECT id 
        FROM ${this.tableName} tco
        ${this._where(where)}
        LIMIT 1
      `;

      const result = await this.executeQuery(query, params);
      return result.rows.length > 0;
    } catch (error) {
      logger.error('Erro ao verificar v√≠nculo existente:', error);
      throw error;
    }
  }

  // Buscar v√≠nculo espec√≠fico
  async findVinculo(transportadoraId, codigoOcorrencia) {
    try {
      const where = [];
      const params = [transportadoraId, codigoOcorrencia];
      const soft = await this.softDeleteClause('tco');
      if (soft) where.push(soft);
      where.push(`tco.transportadora_id = $1 AND tco.codigo_ocorrencia_codigo = $2`);

      const query = `
        SELECT 
          tco.*,
          t.nome as transportadora_nome,
          co.descricao as ocorrencia_descricao
        FROM ${this.tableName} tco
        LEFT JOIN transportadoras t ON t.id = tco.transportadora_id
        LEFT JOIN codigo_ocorrencias co ON co.codigo = tco.codigo_ocorrencia_codigo
        ${this._where(where)}
        LIMIT 1
      `;

      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar v√≠nculo espec√≠fico:', error);
      throw error;
    }
  }

  // Criar m√∫ltiplos v√≠nculos
  async createMultiple(vinculos) {
    try {
      if (!Array.isArray(vinculos) || vinculos.length === 0) {
        throw new Error('Lista de v√≠nculos √© obrigat√≥ria');
      }

      const values = [];
      const placeholders = [];
      let paramCount = 1;

      vinculos.forEach((vinculo, index) => {
        const { transportadora_id, codigo_ocorrencia_codigo, codigo, descricao } = vinculo;
        values.push(transportadora_id, codigo_ocorrencia_codigo, codigo, descricao);
        
        const placeholder = `($${paramCount}, $${paramCount + 1}, $${paramCount + 2}, $${paramCount + 3})`;
        placeholders.push(placeholder);
        paramCount += 4;
      });

      const query = `
        INSERT INTO ${this.tableName} 
          (transportadora_id, codigo_ocorrencia_codigo, codigo, descricao, created_at, updated_at)
        VALUES ${placeholders.join(', ')}
        RETURNING *
      `;

      const result = await this.executeQuery(query, values);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao criar m√∫ltiplos v√≠nculos:', error);
      throw error;
    }
  }

  // Deletar v√≠nculos por transportadora
  async deleteByTransportadora(transportadoraId) {
    try {
      const query = `
        DELETE FROM ${this.tableName}
        WHERE transportadora_id = $1
        RETURNING *
      `;

      const result = await this.executeQuery(query, [transportadoraId]);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao deletar v√≠nculos por transportadora:', error);
      throw error;
    }
  }

  // Deletar v√≠nculos por c√≥digo de ocorr√™ncia
  async deleteByCodigoOcorrencia(codigoOcorrencia) {
    try {
      const query = `
        DELETE FROM ${this.tableName}
        WHERE codigo_ocorrencia_codigo = $1
        RETURNING *
      `;

      const result = await this.executeQuery(query, [codigoOcorrencia]);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao deletar v√≠nculos por c√≥digo:', error);
      throw error;
    }
  }

  // Estat√≠sticas
  async getStats() {
    try {
      const where = [];
      const soft = await this.softDeleteClause('tco');
      if (soft) where.push(soft);

      const query = `
        SELECT 
          COUNT(*) AS total,
          COUNT(DISTINCT transportadora_id) AS transportadoras_unicas,
          COUNT(DISTINCT codigo_ocorrencia_codigo) AS codigos_unicos,
          COUNT(CASE WHEN descricao IS NOT NULL THEN 1 END) AS com_descricao_personalizada
        FROM ${this.tableName} tco
        ${this._where(where)}
      `;

      const result = await this.executeQuery(query);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas:', error);
      throw error;
    }
  }
}

module.exports = TransportadoraCodigoOcorrenciaRepository;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\transportadoras.repository.js
================================================================================

// backend/src/repositories/transportadoras.repository.js
const db = require('../database/connection');
const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class TransportadorasRepository extends BaseRepository {
  constructor(database = db) {
    super(database, 'transportadoras');
  }

  // Helper para aplicar soft-delete condicionalmente (para a tabela principal desta inst√¢ncia)
  async softDeleteClause(alias) {
    const has = await this.hasColumn('deleted_at');
    return has ? `${alias}.deleted_at IS NULL` : null;
  }

  // Helper gen√©rico para WHERE din√¢mico seguro
  _where(parts) {
    const filtered = parts.filter(Boolean);
    return filtered.length ? `WHERE ${filtered.join(' AND ')}` : '';
  }

  // Buscar por CNPJ
async findByClienteAndCep(clienteId, cep) {
  try {
    const sql = `SELECT * FROM endereco_entrega WHERE cliente_id = $1 AND cep = $2 LIMIT 1`;
    const result = await this.database.query(sql, [clienteId, cep]);
    return result.rows[0] || null;
  } catch (error) {
    console.error('Erro ao buscar endere√ßo por cliente e CEP:', error);
    throw error;
  }
}
async findByCnpj(cnpj) {
  try {
    const sql = `SELECT * FROM transportadoras WHERE cnpj = $1 LIMIT 1`;
    const result = await this.database.query(sql, [cnpj]);
    return result.rows[0] || null;
  } catch (error) {
    console.error('Erro ao buscar transportadora por CNPJ:', error);
    throw error;
  }
}
  // Buscar por nome (busca parcial)
  async searchByName(searchTerm, limit = 10) {
    try {
      const where = [];
      const params = [];
      const soft = await this.softDeleteClause('t');
      if (soft) where.push(soft);

      params.push(`%${searchTerm}%`);
      where.push(`t.nome ILIKE $${params.length}`);

      params.push(limit);
      const query = `
        SELECT t.id, t.nome, t.cnpj, t.municipio, t.uf
        FROM ${this.tableName} t
        ${this._where(where)}
        ORDER BY t.nome
        LIMIT $${params.length}
      `;
      const result = await this.executeQuery(query, params);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar transportadoras por nome:', error);
      throw error;
    }
  }

  // Buscar por UF
  async findByUf(uf) {
    try {
      const where = [];
      const params = [];
      const soft = await this.softDeleteClause('t');
      if (soft) where.push(soft);

      params.push(uf);
      where.push(`t.uf = $${params.length}`);

      const query = `
        SELECT t.*
        FROM ${this.tableName} t
        ${this._where(where)}
        ORDER BY t.nome
      `;
      const result = await this.executeQuery(query, params);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar transportadoras por UF:', error);
      throw error;
    }
  }

  // Buscar com contagem de romaneios (via NF -> Romaneios)
  async findWithRomaneiosCount(id) {
    try {
      const tSoft = await this.softDeleteClause('t');

      const hasRDeleted = await (async () => {
        const sql = `
          SELECT 1
          FROM information_schema.columns
          WHERE table_schema='public' AND table_name='romaneios' AND column_name='deleted_at'
          LIMIT 1
        `;
        const { rows } = await this.executeQuery(sql);
        return rows.length > 0;
      })();
      const rSoft = hasRDeleted ? `r.deleted_at IS NULL` : null;

      const hasNfDeleted = await (async () => {
        const sql = `
          SELECT 1
          FROM information_schema.columns
          WHERE table_schema='public' AND table_name='notas_fiscais' AND column_name='deleted_at'
          LIMIT 1
        `;
        const { rows } = await this.executeQuery(sql);
        return rows.length > 0;
      })();
      const nfSoft = hasNfDeleted ? `nf.deleted_at IS NULL` : null;

      const where = [];
      const params = [id];
      where.push(`t.id = $1`);
      if (tSoft) where.push(tSoft);

      const query = `
        SELECT 
          t.*,
          COUNT(r.id) AS total_romaneios,
          COUNT(CASE WHEN r.created_at >= CURRENT_DATE - INTERVAL '30 days' THEN 1 END) AS romaneios_mes
        FROM ${this.tableName} t
        LEFT JOIN notas_fiscais nf
          ON nf.transportadora_id = t.id
          ${nfSoft ? `AND ${nfSoft}` : ''}
        LEFT JOIN romaneios r
          ON r.id = nf.romaneio_id
          ${rSoft ? `AND ${rSoft}` : ''}
        ${this._where(where)}
        GROUP BY t.id
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar transportadora com contagem de romaneios:', error);
      throw error;
    }
  }

  // Buscar transportadoras com estat√≠sticas (via NF -> Romaneios)
  async findAllWithStats(options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 't.created_at',
        orderDirection = 'DESC',
        filters = {}
      } = options;

      const validLimit = Math.min(limit, this.maxLimit);
      const offset = (page - 1) * validLimit;

      const tSoft = await this.softDeleteClause('t');

      const hasRDeleted = await (async () => {
        const sql = `
          SELECT 1
          FROM information_schema.columns
          WHERE table_schema='public' AND table_name='romaneios' AND column_name='deleted_at'
          LIMIT 1
        `;
        const { rows } = await this.executeQuery(sql);
        return rows.length > 0;
      })();
      const rSoft = hasRDeleted ? `r.deleted_at IS NULL` : null;

      const hasNfDeleted = await (async () => {
        const sql = `
          SELECT 1
          FROM information_schema.columns
          WHERE table_schema='public' AND table_name='notas_fiscais' AND column_name='deleted_at'
          LIMIT 1
        `;
        const { rows } = await this.executeQuery(sql);
        return rows.length > 0;
      })();
      const nfSoft = hasNfDeleted ? `nf.deleted_at IS NULL` : null;

      const where = [];
      const params = [];

      if (tSoft) where.push(tSoft);

      if (filters.nome) {
        params.push(`%${filters.nome}%`);
        where.push(`t.nome ILIKE $${params.length}`);
      }
      if (filters.uf) {
        params.push(filters.uf);
        where.push(`t.uf = $${params.length}`);
      }
      if (filters.municipio) {
        params.push(`%${filters.municipio}%`);
        where.push(`t.municipio ILIKE $${params.length}`);
      }

      const baseFrom = `
        FROM ${this.tableName} t
        LEFT JOIN notas_fiscais nf
          ON nf.transportadora_id = t.id
          ${nfSoft ? `AND ${nfSoft}` : ''}
        LEFT JOIN romaneios r
          ON r.id = nf.romaneio_id
          ${rSoft ? `AND ${rSoft}` : ''}
      `;

      const dataSql = `
        SELECT 
          t.*,
          COUNT(DISTINCT r.id) AS total_romaneios,
          COUNT(DISTINCT CASE WHEN r.created_at >= CURRENT_DATE - INTERVAL '30 days' THEN r.id END) AS romaneios_mes,
          COUNT(DISTINCT nf.id) AS total_notas_fiscais
        ${baseFrom}
        ${this._where(where)}
        GROUP BY t.id
        ORDER BY ${orderBy} ${orderDirection.toUpperCase()}
        LIMIT $${params.push(validLimit)}
        OFFSET $${params.push(offset)}
      `;

      const countParams = params.slice(0, params.length - 2); // remove limit/offset
      const countSql = `
        SELECT COUNT(DISTINCT t.id) AS total
        ${baseFrom}
        ${this._where(where)}
      `;

      const [countResult, result] = await Promise.all([
        this.executeQuery(countSql, countParams),
        this.executeQuery(dataSql, params)
      ]);

      const total = parseInt(countResult.rows[0]?.total || 0, 10);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page, 10),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (error) {
      logger.error('Erro ao buscar transportadoras com estat√≠sticas:', error);
      throw error;
    }
  }

  // Validar CNPJ √∫nico
  async validateUniqueCnpj(cnpj, excludeId = null) {
    try {
      const where = [];
      const params = [cnpj];
      const soft = await this.softDeleteClause('t');
      if (soft) where.push(soft);
      where.push(`t.cnpj = $1`);

      if (excludeId) {
        params.push(excludeId);
        where.push(`t.id != $${params.length}`);
      }

      const query = `
        SELECT t.id 
        FROM ${this.tableName} t
        ${this._where(where)}
        LIMIT 1
      `;
      const result = await this.executeQuery(query, params);
      return result.rows.length === 0;
    } catch (error) {
      logger.error('Erro ao validar CNPJ √∫nico:', error);
      throw error;
    }
  }

  // Buscar transportadoras ativas para integra√ß√£o
  async findActiveForIntegration() {
    try {
      const where = [];
      const params = [];
      const soft = await this.softDeleteClause('t');
      if (soft) where.push(soft);
      where.push(`t.integracao_ocorrencia IS NOT NULL`);

      const query = `
        SELECT t.id, t.nome, t.cnpj, t.integracao_ocorrencia
        FROM ${this.tableName} t
        ${this._where(where)}
        ORDER BY t.nome
      `;
      const result = await this.executeQuery(query, params);
      return result.rows;
    } catch (error) {
      logger.error('Erro ao buscar transportadoras para integra√ß√£o:', error);
      throw error;
    }
  }

  // ‚úÖ Alias esperado pelo JobSchedulerService
  async findForIntegration(options = {}) {
    return this.findActiveForIntegration(options);
  }

  // Estat√≠sticas gerais
  async getStats() {
    try {
      const where = [];
      const params = [];
      const soft = await this.softDeleteClause('t');
      if (soft) where.push(soft);

      const query = `
        SELECT 
          COUNT(*) AS total,
          COUNT(CASE WHEN t.integracao_ocorrencia IS NOT NULL THEN 1 END) AS com_integracao,
          COUNT(CASE WHEN t.romaneio_auto = true THEN 1 END) AS romaneio_automatico,
          COUNT(CASE WHEN t.roterizacao_automatica = true THEN 1 END) AS roterizacao_automatica,
          COUNT(DISTINCT t.uf) AS total_ufs
        FROM ${this.tableName} t
        ${this._where(where)}
      `;
      const result = await this.executeQuery(query, params);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas de transportadoras:', error);
      throw error;
    }
  }
}

module.exports = TransportadorasRepository;



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\repositories\users.repository.js
================================================================================

const BaseRepository = require('./base.repository');
const logger = require('../config/logger');

class UsersRepository extends BaseRepository {
  constructor() {
    super('users');
  }

  // Buscar por email
  async findByEmail(email) {
    try {
      const query = `
        SELECT id, name, email, password, email_verified_at, remember_token,
               created_at, updated_at, deleted_at, role
        FROM ${this.tableName} 
        WHERE email = $1 AND deleted_at IS NULL
      `;
      const result = await this.executeQuery(query, [email]);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar usu√°rio por email:', error);
      throw error;
    }
  }

  // Sobrescrever findById para incluir password quando necess√°rio
  async findById(id, includePassword = false) {
    try {
      const fields = includePassword 
        ? 'id, name, email, password, email_verified_at, remember_token, created_at, updated_at, deleted_at'
        : 'id, name, email, email_verified_at, remember_token, created_at, updated_at, deleted_at';
      
      const query = `
        SELECT ${fields}
        FROM ${this.tableName}
        WHERE id = $1 AND deleted_at IS NULL
      `;
      const result = await this.executeQuery(query, [id]);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar usu√°rio por ID:', error);
      throw error;
    }
  }

  // Criar usu√°rio
  async create(userData) {
    try {
      const {
        name,
        email,
        password,
        email_verified_at = null,
        remember_token = null
      } = userData;

      // Valida√ß√µes b√°sicas
      if (!name || !email || !password) {
        throw new Error('Nome, email e senha s√£o obrigat√≥rios');
      }

      const query = `
        INSERT INTO ${this.tableName} (name, email, password, email_verified_at, remember_token, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
        RETURNING id, name, email, email_verified_at, remember_token, created_at, updated_at
      `;

      const values = [name, email, password, email_verified_at, remember_token];
      
      const result = await this.executeQuery(query, values);
      return result.rows[0];
    } catch (error) {
      // Tratar erro de email duplicado
      if (error.code === '23505' && error.constraint === 'users_email_unique') {
        throw new Error('Email j√° est√° em uso');
      }
      logger.error('Erro ao criar usu√°rio:', error);
      throw error;
    }
  }

  // Atualizar usu√°rio
  async update(id, userData) {
    try {
      const updates = [];
      const values = [];
      let paramCount = 0;

      // Campos permitidos para atualiza√ß√£o
      const allowedFields = [
        'name', 'email', 'password', 'email_verified_at', 'remember_token'
      ];

      // Construir query din√¢mica
      Object.entries(userData).forEach(([key, value]) => {
        if (value !== undefined && allowedFields.includes(key)) {
          paramCount++;
          updates.push(`${key} = $${paramCount}`);
          values.push(value);
        }
      });

      if (updates.length === 0) {
        throw new Error('Nenhum campo v√°lido para atualizar');
      }

      // Adicionar updated_at
      paramCount++;
      updates.push(`updated_at = $${paramCount}`);
      values.push(new Date());

      // Adicionar ID
      paramCount++;
      values.push(id);

      const query = `
        UPDATE ${this.tableName} 
        SET ${updates.join(', ')}
        WHERE id = $${paramCount} AND deleted_at IS NULL
        RETURNING id, name, email, email_verified_at, remember_token, created_at, updated_at, role
      `;

      const result = await this.executeQuery(query, values);
      
      if (result.rows.length === 0) {
        throw new Error('Usu√°rio n√£o encontrado');
      }
      
      return result.rows[0];
    } catch (error) {
      // Tratar erro de email duplicado
      if (error.code === '23505' && error.constraint === 'users_email_unique') {
        throw new Error('Email j√° est√° em uso');
      }
      logger.error('Erro ao atualizar usu√°rio:', error);
      throw error;
    }
  }

  // Verificar email √∫nico
  async validateUniqueEmail(email, excludeId = null) {
    try {
      let query = `
        SELECT id FROM ${this.tableName}
        WHERE email = $1 AND deleted_at IS NULL
      `;
      const params = [email];

      if (excludeId) {
        query += ` AND id != $2`;
        params.push(excludeId);
      }

      const result = await this.executeQuery(query, params);
      return result.rows.length === 0;
    } catch (error) {
      logger.error('Erro ao validar email √∫nico:', error);
      throw error;
    }
  }

  // Verificar email
  async verifyEmail(id) {
    try {
      const query = `
        UPDATE ${this.tableName} 
        SET email_verified_at = NOW(), updated_at = NOW()
        WHERE id = $1 AND deleted_at IS NULL
        RETURNING id, name, email, email_verified_at
      `;
      
      const result = await this.executeQuery(query, [id]);
      
      if (result.rows.length === 0) {
        throw new Error('Usu√°rio n√£o encontrado');
      }
      
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao verificar email:', error);
      throw error;
    }
  }

  // Atualizar remember token
  async updateRememberToken(id, token) {
    try {
      const query = `
        UPDATE ${this.tableName} 
        SET remember_token = $1, updated_at = NOW()
        WHERE id = $2 AND deleted_at IS NULL
        RETURNING id
      `;
      
      const result = await this.executeQuery(query, [token, id]);
      
      if (result.rows.length === 0) {
        throw new Error('Usu√°rio n√£o encontrado');
      }
      
      return true;
    } catch (error) {
      logger.error('Erro ao atualizar remember token:', error);
      throw error;
    }
  }

  // Buscar por remember token
  async findByRememberToken(token) {
    try {
      const query = `
        SELECT id, name, email, email_verified_at, remember_token,
               created_at, updated_at, deleted_at, role
        FROM ${this.tableName} 
        WHERE remember_token = $1 AND deleted_at IS NULL
      `;
      
      const result = await this.executeQuery(query, [token]);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao buscar por remember token:', error);
      throw error;
    }
  }

  // Buscar usu√°rios com pagina√ß√£o
  async findAllWithStats(options = {}) {
    try {
      const {
        page = 1,
        limit = this.defaultLimit,
        orderBy = 'created_at',
        orderDirection = 'DESC',
        filters = {}
      } = options;

      const validLimit = Math.min(limit, this.maxLimit);
      const offset = (page - 1) * validLimit;

      let query = `
        SELECT 
          id, name, email, email_verified_at, remember_token, created_at, updated_at, role
        FROM ${this.tableName}
        WHERE deleted_at IS NULL
      `;

      const params = [];
      let paramCount = 0;

      // Aplicar filtros
      if (filters.name) {
        paramCount++;
        query += ` AND name ILIKE $${paramCount}`;
        params.push(`%${filters.name}%`);
      }

      if (filters.email) {
        paramCount++;
        query += ` AND email ILIKE $${paramCount}`;
        params.push(`%${filters.email}%`);
      }

      if (filters.verified !== undefined) {
        if (filters.verified === 'true' || filters.verified === true) {
          query += ` AND email_verified_at IS NOT NULL`;
        } else {
          query += ` AND email_verified_at IS NULL`;
        }
      }

      // Contar total
      const countQuery = query.replace(
        'SELECT id, name, email, email_verified_at, remember_token, created_at, updated_at',
        'SELECT COUNT(*) as total'
      );

      const countResult = await this.executeQuery(countQuery, params);
      const total = parseInt(countResult.rows[0].total);

      // ORDER BY
      const allowedOrderColumns = ['id', 'name', 'email', 'created_at', 'updated_at'];
      if (allowedOrderColumns.includes(orderBy)) {
        query += ` ORDER BY ${orderBy} ${orderDirection.toUpperCase()}`;
      } else {
        query += ` ORDER BY created_at DESC`;
      }

      // LIMIT e OFFSET
      paramCount++;
      query += ` LIMIT $${paramCount}`;
      params.push(validLimit);

      paramCount++;
      query += ` OFFSET $${paramCount}`;
      params.push(offset);

      const result = await this.executeQuery(query, params);

      return {
        data: result.rows,
        pagination: {
          page: parseInt(page),
          limit: validLimit,
          total,
          totalPages: Math.ceil(total / validLimit),
          hasNext: page * validLimit < total,
          hasPrev: page > 1
        }
      };
    } catch (error) {
      logger.error('Erro ao buscar usu√°rios com estat√≠sticas:', error);
      throw error;
    }
  }

  // Estat√≠sticas gerais
  async getStats() {
    try {
      const query = `
        SELECT 
          COUNT(*) as total,
          COUNT(CASE WHEN email_verified_at IS NOT NULL THEN 1 END) as verified,
          COUNT(CASE WHEN email_verified_at IS NULL THEN 1 END) as unverified,
          COUNT(CASE WHEN created_at >= CURRENT_DATE - INTERVAL '30 days' THEN 1 END) as recent
        FROM ${this.tableName}
        WHERE deleted_at IS NULL
      `;
      const result = await this.executeQuery(query);
      return result.rows[0];
    } catch (error) {
      logger.error('Erro ao obter estat√≠sticas de usu√°rios:', error);
      throw error;
    }
  }
}

module.exports = UsersRepository;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\api-tokens.routes.JS
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\auth.routes.js
================================================================================

const express = require('express');
const router = express.Router();

const AuthController = require('../controllers/auth.controller');
const { authenticate } = require('../middlewares/auth.middleware');
const { validate } = require('../middlewares/validate.middleware');
const {
  loginSchema,
  registerSchema,
  refreshSchema,
  changePasswordSchema,
  forgotPasswordSchema,
  resetPasswordSchema
} = require('../validations/auth.validation');

const controller = new AuthController();

/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: Login de usu√°rio
 *     tags: [Autentica√ß√£o]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *             properties:
 *               email:
 *                 type: string
 *                 format: email
 *                 example: admin@empresa.com
 *               password:
 *                 type: string
 *                 example: password123
 *     responses:
 *       200:
 *         description: Login realizado com sucesso
 *       401:
 *         description: Credenciais inv√°lidas
 */
router.post('/login',
  validate(loginSchema),
  controller.login.bind(controller)
);

/**
 * @swagger
 * /api/auth/register:
 *   post:
 *     summary: Registro de novo usu√°rio
 *     tags: [Autentica√ß√£o]
 */
router.post('/register',
  validate(registerSchema),
  controller.register.bind(controller)
);

/**
 * @swagger
 * /api/auth/refresh:
 *   post:
 *     summary: Renovar token JWT
 *     tags: [Autentica√ß√£o]
 */
router.post('/refresh',
  validate(refreshSchema),
  controller.refresh.bind(controller)
);

/**
 * @swagger
 * /api/auth/forgot-password:
 *   post:
 *     summary: Solicitar recupera√ß√£o de senha
 *     tags: [Autentica√ß√£o]
 */
router.post('/forgot-password',
  validate(forgotPasswordSchema),
  controller.forgotPassword.bind(controller)
);

/**
 * @swagger
 * /api/auth/reset-password:
 *   post:
 *     summary: Redefinir senha
 *     tags: [Autentica√ß√£o]
 */
router.post('/reset-password',
  validate(resetPasswordSchema),
  controller.resetPassword.bind(controller)
);

// Rotas protegidas (requerem autentica√ß√£o)
router.use(authenticate);

/**
 * @swagger
 * /api/auth/me:
 *   get:
 *     summary: Obter dados do usu√°rio logado
 *     tags: [Autentica√ß√£o]
 *     security:
 *       - bearerAuth: []
 */
router.get('/me',
  controller.getProfile.bind(controller)
);

/**
 * @swagger
 * /api/auth/change-password:
 *   post:
 *     summary: Alterar senha
 *     tags: [Autentica√ß√£o]
 *     security:
 *       - bearerAuth: []
 */
router.post('/change-password',
  validate(changePasswordSchema),
  controller.changePassword.bind(controller)
);

/**
 * @swagger
 * /api/auth/logout:
 *   post:
 *     summary: Logout
 *     tags: [Autentica√ß√£o]
 *     security:
 *       - bearerAuth: []
 */
router.post('/logout',
  controller.logout.bind(controller)
);

/**
 * @swagger
 * /api/auth/verify:
 *   get:
 *     summary: Verificar validade do token
 *     tags: [Autentica√ß√£o]
 *     security:
 *       - bearerAuth: []
 */
router.get('/verify',
  controller.verifyToken.bind(controller)
);

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\clientes.routes.js
================================================================================

const express = require('express');
const router = express.Router();

const ClientesController = require('../controllers/clientes.controller');
const { authenticate, authorize } = require('../middlewares/auth.middleware');
const { validate, validateQuery, validateParams } = require('../middlewares/validate.middleware');
const {
  createCliente,
  updateCliente,
  listClientes,
  searchClientes,
  clienteParams,
  documentoParams,
  codClienteParams,
  ufParams,
  cidadeParams
} = require('../validations/clientes.validation');

const controller = new ClientesController();

// Middleware de autentica√ß√£o para todas as rotas
router.use(authenticate);

/**
 * @swagger
 * /api/clientes:
 *   get:
 *     summary: Listar clientes
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *       - in: query
 *         name: nome
 *         schema:
 *           type: string
 *         description: Filtrar por nome
 *       - in: query
 *         name: documento
 *         schema:
 *           type: string
 *         description: Filtrar por CPF/CNPJ
 *       - in: query
 *         name: cidade
 *         schema:
 *           type: string
 *         description: Filtrar por cidade
 *       - in: query
 *         name: uf
 *         schema:
 *           type: string
 *         description: Filtrar por UF
 *     responses:
 *       200:
 *         description: Lista de clientes
 *       401:
 *         description: N√£o autorizado
 */
router.get('/',
  validateQuery(listClientes),
  controller.list.bind(controller)
);

/**
 * @swagger
 * /api/clientes/search:
 *   get:
 *     summary: Buscar clientes por nome
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: q
 *         required: true
 *         schema:
 *           type: string
 *           minLength: 2
 *         description: Termo de busca
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 50
 *         description: Limite de resultados
 *     responses:
 *       200:
 *         description: Lista de clientes encontrados
 */
router.get('/search',
  validateQuery(searchClientes),
  controller.search.bind(controller)
);

/**
 * @swagger
 * /api/clientes/stats:
 *   get:
 *     summary: Estat√≠sticas gerais de clientes
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Estat√≠sticas de clientes
 */
router.get('/stats',
  controller.getStats.bind(controller)
);

/**
 * @swagger
 * /api/clientes/documento/{documento}:
 *   get:
 *     summary: Buscar cliente por CPF/CNPJ
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: documento
 *         required: true
 *         schema:
 *           type: string
 *         description: CPF ou CNPJ do cliente
 *     responses:
 *       200:
 *         description: Cliente encontrado
 *       404:
 *         description: Cliente n√£o encontrado
 */
router.get('/documento/:documento',
  validateParams(documentoParams),
  controller.getByDocumento.bind(controller)
);

/**
 * @swagger
 * /api/clientes/codigo/{codCliente}:
 *   get:
 *     summary: Buscar cliente por c√≥digo
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: codCliente
 *         required: true
 *         schema:
 *           type: integer
 *         description: C√≥digo do cliente
 *     responses:
 *       200:
 *         description: Cliente encontrado
 *       404:
 *         description: Cliente n√£o encontrado
 */
router.get('/codigo/:codCliente',
  validateParams(codClienteParams),
  controller.getByCodCliente.bind(controller)
);

/**
 * @swagger
 * /api/clientes/uf/{uf}:
 *   get:
 *     summary: Buscar clientes por UF
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: uf
 *         required: true
 *         schema:
 *           type: string
 *           pattern: '^[A-Z]{2}$'
 *         description: UF (estado)
 *     responses:
 *       200:
 *         description: Lista de clientes da UF
 */
router.get('/uf/:uf',
  validateParams(ufParams),
  controller.getByUf.bind(controller)
);

/**
 * @swagger
 * /api/clientes/cidade/{cidade}:
 *   get:
 *     summary: Buscar clientes por cidade
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: cidade
 *         required: true
 *         schema:
 *           type: string
 *         description: Nome da cidade
 *     responses:
 *       200:
 *         description: Lista de clientes da cidade
 */
router.get('/cidade/:cidade',
  validateParams(cidadeParams),
  controller.getByCidade.bind(controller)
);

/**
 * @swagger
 * /api/clientes/{id}:
 *   get:
 *     summary: Buscar cliente por ID
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do cliente
 *     responses:
 *       200:
 *         description: Cliente encontrado
 *       404:
 *         description: Cliente n√£o encontrado
 */
router.get('/:id',
  validateParams(clienteParams),
  controller.get.bind(controller)
);

/**
 * @swagger
 * /api/clientes/{id}/stats:
 *   get:
 *     summary: Buscar cliente com estat√≠sticas detalhadas
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do cliente
 *     responses:
 *       200:
 *         description: Cliente com estat√≠sticas
 *       404:
 *         description: Cliente n√£o encontrado
 */
router.get('/:id/stats',
  validateParams(clienteParams),
  controller.getWithStats.bind(controller)
);

/**
 * @swagger
 * /api/clientes:
 *   post:
 *     summary: Criar novo cliente
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - documento
 *               - cod_cliente
 *               - nome
 *             properties:
 *               documento:
 *                 type: string
 *                 example: "123.456.789-01"
 *                 description: CPF ou CNPJ do cliente
 *               cod_cliente:
 *                 type: integer
 *                 example: 12345
 *                 description: C√≥digo √∫nico do cliente
 *               nome:
 *                 type: string
 *                 example: "Jo√£o Silva"
 *                 description: Nome do cliente
 *               endereco:
 *                 type: string
 *                 example: "Rua das Flores, 123"
 *               bairro:
 *                 type: string
 *                 example: "Centro"
 *               cep:
 *                 type: string
 *                 example: "01234-567"
 *               cidade:
 *                 type: string
 *                 example: "S√£o Paulo"
 *               uf:
 *                 type: string
 *                 example: "SP"
 *               contato:
 *                 type: string
 *                 example: "(11) 99999-9999"
 *     responses:
 *       201:
 *         description: Cliente criado com sucesso
 *       400:
 *         description: Dados inv√°lidos
 *       409:
 *         description: Cliente j√° existe
 */
router.post('/',
  authorize(['admin', 'gestor', 'operador']), // Admin, gestor e operador podem criar
  validate(createCliente),
  controller.create.bind(controller)
);

/**
 * @swagger
 * /api/clientes/{id}:
 *   put:
 *     summary: Atualizar cliente
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do cliente
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               documento:
 *                 type: string
 *                 example: "123.456.789-01"
 *               cod_cliente:
 *                 type: integer
 *                 example: 12345
 *               nome:
 *                 type: string
 *                 example: "Jo√£o Silva"
 *               endereco:
 *                 type: string
 *                 example: "Rua das Flores, 123"
 *               bairro:
 *                 type: string
 *                 example: "Centro"
 *               cep:
 *                 type: string
 *                 example: "01234-567"
 *               cidade:
 *                 type: string
 *                 example: "S√£o Paulo"
 *               uf:
 *                 type: string
 *                 example: "SP"
 *               contato:
 *                 type: string
 *                 example: "(11) 99999-9999"
 *     responses:
 *       200:
 *         description: Cliente atualizado com sucesso
 *       404:
 *         description: Cliente n√£o encontrado
 *       409:
 *         description: Conflito de dados
 */
router.put('/:id',
  authorize(['admin', 'gestor', 'operador']), // Admin, gestor e operador podem editar
  validateParams(clienteParams),
  validate(updateCliente),
  controller.update.bind(controller)
);

/**
 * @swagger
 * /api/clientes/{id}:
 *   delete:
 *     summary: Deletar cliente
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do cliente
 *     responses:
 *       200:
 *         description: Cliente deletado com sucesso
 *       404:
 *         description: Cliente n√£o encontrado
 *       409:
 *         description: Cliente possui dados associados
 */
router.delete('/:id',
  authorize(['admin', 'gestor']), // Apenas admin e gestor podem deletar
  validateParams(clienteParams),
  controller.delete.bind(controller)
);

/**
 * @swagger
 * /api/clientes/{id}/restore:
 *   post:
 *     summary: Restaurar cliente deletado
 *     tags: [Clientes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do cliente
 *     responses:
 *       200:
 *         description: Cliente restaurado com sucesso
 *       404:
 *         description: Cliente n√£o encontrado
 */
router.post('/:id/restore',
  authorize(['admin']), // Apenas admin pode restaurar
  validateParams(clienteParams),
  controller.restore.bind(controller)
);

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\codigo-ocorrencias.routes.js
================================================================================

const express = require('express');
const router = express.Router();
const Joi = require('joi');

const CodigoOcorrenciasController = require('../controllers/codigo-ocorrencias.controller');
const { authenticate, authorize } = require('../middlewares/auth.middleware');
const { validate, validateQuery, validateParams } = require('../middlewares/validate.middleware');
const {
  createCodigoOcorrencia,
  updateCodigoOcorrencia,
  listCodigoOcorrencias,
  codigoOcorrenciaParams
} = require('../validations/codigo-ocorrencias.validation');

const controller = new CodigoOcorrenciasController();

// Middleware de autentica√ß√£o para todas as rotas
router.use(authenticate);

/**
 * @swagger
 * /api/codigos-ocorrencia:
 *   get:
 *     summary: Listar c√≥digos de ocorr√™ncia
 *     tags: [C√≥digos de Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *       - in: query
 *         name: tipo
 *         schema:
 *           type: string
 *           enum: [entrega, coleta, incidente, informativo]
 *         description: Filtrar por tipo
 *       - in: query
 *         name: processo
 *         schema:
 *           type: string
 *           enum: [pre-entrega, em-entrega, pos-entrega, administrativo]
 *         description: Filtrar por processo
 *       - in: query
 *         name: finalizadora
 *         schema:
 *           type: string
 *           enum: [true, false]
 *         description: Filtrar por finalizadora
 *       - in: query
 *         name: api
 *         schema:
 *           type: string
 *           enum: [true, false]
 *         description: Filtrar por disponibilidade na API
 *     responses:
 *       200:
 *         description: Lista de c√≥digos de ocorr√™ncia
 *       401:
 *         description: N√£o autorizado
 */
router.get('/',
  validateQuery(listCodigoOcorrencias),
  controller.list.bind(controller)
);

/**
 * @swagger
 * /api/codigos-ocorrencia/{id}:
 *   get:
 *     summary: Buscar c√≥digo de ocorr√™ncia por ID
 *     tags: [C√≥digos de Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do c√≥digo de ocorr√™ncia
 *     responses:
 *       200:
 *         description: C√≥digo de ocorr√™ncia encontrado
 *       404:
 *         description: C√≥digo de ocorr√™ncia n√£o encontrado
 */
router.get('/:id',
  validateParams(codigoOcorrenciaParams),
  controller.get.bind(controller)
);

/**
 * @swagger
 * /api/codigos-ocorrencia/codigo/{codigo}:
 *   get:
 *     summary: Buscar c√≥digo de ocorr√™ncia por c√≥digo num√©rico
 *     tags: [C√≥digos de Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: codigo
 *         required: true
 *         schema:
 *           type: integer
 *         description: C√≥digo num√©rico da ocorr√™ncia
 *     responses:
 *       200:
 *         description: C√≥digo de ocorr√™ncia encontrado
 *       404:
 *         description: C√≥digo de ocorr√™ncia n√£o encontrado
 */
router.get('/codigo/:codigo',
  validateParams(Joi.object({ codigo: Joi.number().integer().positive().required() })),
  controller.getByCodigo.bind(controller)
);

/**
 * @swagger
 * /api/codigos-ocorrencia:
 *   post:
 *     summary: Criar novo c√≥digo de ocorr√™ncia
 *     tags: [C√≥digos de Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - codigo
 *               - descricao
 *               - tipo
 *               - processo
 *             properties:
 *               codigo:
 *                 type: integer
 *                 example: 1
 *               descricao:
 *                 type: string
 *                 example: "Mercadoria entregue com sucesso"
 *               tipo:
 *                 type: string
 *                 enum: [entrega, coleta, incidente, informativo]
 *                 example: "entrega"
 *               processo:
 *                 type: string
 *                 enum: [pre-entrega, em-entrega, pos-entrega, administrativo]
 *                 example: "em-entrega"
 *               finalizadora:
 *                 type: boolean
 *                 example: true
 *               api:
 *                 type: boolean
 *                 example: true
 *     responses:
 *       201:
 *         description: C√≥digo de ocorr√™ncia criado com sucesso
 *       400:
 *         description: Dados inv√°lidos
 *       409:
 *         description: C√≥digo j√° existe
 */
router.post('/',
  authorize(['admin', 'gestor']),
  validate(createCodigoOcorrencia),
  controller.create.bind(controller)
);

/**
 * @swagger
 * /api/codigos-ocorrencia/{id}:
 *   put:
 *     summary: Atualizar c√≥digo de ocorr√™ncia
 *     tags: [C√≥digos de Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do c√≥digo de ocorr√™ncia
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               codigo:
 *                 type: integer
 *                 example: 1
 *               descricao:
 *                 type: string
 *                 example: "Mercadoria entregue com sucesso"
 *               tipo:
 *                 type: string
 *                 enum: [entrega, coleta, incidente, informativo]
 *                 example: "entrega"
 *               processo:
 *                 type: string
 *                 enum: [pre-entrega, em-entrega, pos-entrega, administrativo]
 *                 example: "em-entrega"
 *               finalizadora:
 *                 type: boolean
 *                 example: true
 *               api:
 *                 type: boolean
 *                 example: true
 *     responses:
 *       200:
 *         description: C√≥digo de ocorr√™ncia atualizado com sucesso
 *       404:
 *         description: C√≥digo de ocorr√™ncia n√£o encontrado
 *       409:
 *         description: C√≥digo j√° existe
 */
router.put('/:id',
  authorize(['admin', 'gestor']),
  validateParams(codigoOcorrenciaParams),
  validate(updateCodigoOcorrencia),
  controller.update.bind(controller)
);

/**
 * @swagger
 * /api/codigos-ocorrencia/{id}:
 *   delete:
 *     summary: Deletar c√≥digo de ocorr√™ncia
 *     tags: [C√≥digos de Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do c√≥digo de ocorr√™ncia
 *     responses:
 *       200:
 *         description: C√≥digo de ocorr√™ncia deletado com sucesso
 *       404:
 *         description: C√≥digo de ocorr√™ncia n√£o encontrado
 *       409:
 *         description: C√≥digo est√° em uso e n√£o pode ser deletado
 */
router.delete('/:id',
  authorize(['admin']),
  validateParams(codigoOcorrenciaParams),
  controller.delete.bind(controller)
);

/**
 * @swagger
 * /api/codigos-ocorrencia/{id}/restore:
 *   post:
 *     summary: Restaurar c√≥digo de ocorr√™ncia deletado
 *     tags: [C√≥digos de Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do c√≥digo de ocorr√™ncia
 *     responses:
 *       200:
 *         description: C√≥digo de ocorr√™ncia restaurado com sucesso
 *       404:
 *         description: C√≥digo de ocorr√™ncia n√£o encontrado
 */
router.post('/:id/restore',
  authorize(['admin']),
  validateParams(codigoOcorrenciaParams),
  controller.restore.bind(controller)
);

/**
 * @swagger
 * /api/codigos-ocorrencia/tipos:
 *   get:
 *     summary: Listar tipos de ocorr√™ncia dispon√≠veis
 *     tags: [C√≥digos de Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Lista de tipos de ocorr√™ncia
 */
router.get('/tipos',
  controller.getTipos.bind(controller)
);

/**
 * @swagger
 * /api/codigos-ocorrencia/processos:
 *   get:
 *     summary: Listar processos dispon√≠veis
 *     tags: [C√≥digos de Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Lista de processos
 */
router.get('/processos',
  controller.getProcessos.bind(controller)
);

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\embarcadores.routes.js
================================================================================

const express = require('express');
const router = express.Router();

const EmbarcadoresController = require('../controllers/embarcadores.controller');
const { authenticate, authorize } = require('../middlewares/auth.middleware');
const { validate, validateQuery, validateParams } = require('../middlewares/validate.middleware');
const {
  createEmbarcador,
  updateEmbarcador,
  listEmbarcadores,
  searchEmbarcadores,
  embarcadorParams,
  documentoParams,
  ufParams,
  cidadeParams
} = require('../validations/embarcadores.validation');

const controller = new EmbarcadoresController();

// Middleware de autentica√ß√£o para todas as rotas
router.use(authenticate);

/**
 * @swagger
 * /api/embarcadores:
 *   get:
 *     summary: Listar embarcadores
 *     tags: [Embarcadores]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *       - in: query
 *         name: nome
 *         schema:
 *           type: string
 *         description: Filtrar por nome
 *       - in: query
 *         name: documento
 *         schema:
 *           type: string
 *         description: Filtrar por CNPJ
 *       - in: query
 *         name: cidade
 *         schema:
 *           type: string
 *         description: Filtrar por cidade
 *       - in: query
 *         name: uf
 *         schema:
 *           type: string
 *         description: Filtrar por UF
 *     responses:
 *       200:
 *         description: Lista de embarcadores
 *       401:
 *         description: N√£o autorizado
 */
router.get('/',
  validateQuery(listEmbarcadores),
  controller.list.bind(controller)
);

/**
 * @swagger
 * /api/embarcadores/search:
 *   get:
 *     summary: Buscar embarcadores por nome
 *     tags: [Embarcadores]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: q
 *         required: true
 *         schema:
 *           type: string
 *           minLength: 2
 *         description: Termo de busca
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 50
 *         description: Limite de resultados
 *     responses:
 *       200:
 *         description: Lista de embarcadores encontrados
 */
router.get('/search',
  validateQuery(searchEmbarcadores),
  controller.search.bind(controller)
);

/**
 * @swagger
 * /api/embarcadores/stats:
 *   get:
 *     summary: Estat√≠sticas gerais de embarcadores
 *     tags: [Embarcadores]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Estat√≠sticas de embarcadores
 */
router.get('/stats',
  controller.getStats.bind(controller)
);

/**
 * @swagger
 * /api/embarcadores/documento/{documento}:
 *   get:
 *     summary: Buscar embarcador por CNPJ
 *     tags: [Embarcadores]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: documento
 *         required: true
 *         schema:
 *           type: string
 *         description: CNPJ do embarcador
 *     responses:
 *       200:
 *         description: Embarcador encontrado
 *       404:
 *         description: Embarcador n√£o encontrado
 */
router.get('/documento/:documento',
  validateParams(documentoParams),
  controller.getByDocumento.bind(controller)
);

/**
 * @swagger
 * /api/embarcadores/uf/{uf}:
 *   get:
 *     summary: Buscar embarcadores por UF
 *     tags: [Embarcadores]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: uf
 *         required: true
 *         schema:
 *           type: string
 *           pattern: '^[A-Z]{2}$'
 *         description: UF (estado)
 *     responses:
 *       200:
 *         description: Lista de embarcadores da UF
 */
router.get('/uf/:uf',
  validateParams(ufParams),
  controller.getByUf.bind(controller)
);

/**
 * @swagger
 * /api/embarcadores/cidade/{cidade}:
 *   get:
 *     summary: Buscar embarcadores por cidade
 *     tags: [Embarcadores]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: cidade
 *         required: true
 *         schema:
 *           type: string
 *         description: Nome da cidade
 *     responses:
 *       200:
 *         description: Lista de embarcadores da cidade
 */
router.get('/cidade/:cidade',
  validateParams(cidadeParams),
  controller.getByCidade.bind(controller)
);

/**
 * @swagger
 * /api/embarcadores/{id}:
 *   get:
 *     summary: Buscar embarcador por ID
 *     tags: [Embarcadores]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do embarcador
 *     responses:
 *       200:
 *         description: Embarcador encontrado
 *       404:
 *         description: Embarcador n√£o encontrado
 */
router.get('/:id',
  validateParams(embarcadorParams),
  controller.get.bind(controller)
);

/**
 * @swagger
 * /api/embarcadores/{id}/depositos:
 *   get:
 *     summary: Buscar embarcador com dep√≥sitos
 *     tags: [Embarcadores]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do embarcador
 *     responses:
 *       200:
 *         description: Embarcador com dep√≥sitos
 *       404:
 *         description: Embarcador n√£o encontrado
 */
router.get('/:id/depositos',
  validateParams(embarcadorParams),
  controller.getWithDepositos.bind(controller)
);

/**
 * @swagger
 * /api/embarcadores:
 *   post:
 *     summary: Criar novo embarcador
 *     tags: [Embarcadores]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - documento
 *               - nome
 *             properties:
 *               documento:
 *                 type: string
 *                 example: "11.222.333/0001-81"
 *                 description: CNPJ do embarcador
 *               nome:
 *                 type: string
 *                 example: "Empresa ABC Ltda"
 *                 description: Nome do embarcador
 *               inscricao_estadual:
 *                 type: string
 *                 example: "123456789"
 *               cnpj:
 *                 type: string
 *                 example: "11.222.333/0001-81"
 *               endereco:
 *                 type: string
 *                 example: "Rua das Ind√∫strias, 456"
 *               bairro:
 *                 type: string
 *                 example: "Distrito Industrial"
 *               cidade:
 *                 type: string
 *                 example: "S√£o Paulo"
 *               cep:
 *                 type: string
 *                 example: "01234-567"
 *               uf:
 *                 type: string
 *                 example: "SP"
 *     responses:
 *       201:
 *         description: Embarcador criado com sucesso
 *       400:
 *         description: Dados inv√°lidos
 *       409:
 *         description: Embarcador j√° existe
 */
router.post('/',
  authorize(['admin', 'gestor', 'operador']), // Admin, gestor e operador podem criar
  validate(createEmbarcador),
  controller.create.bind(controller)
);

/**
 * @swagger
 * /api/embarcadores/{id}:
 *   put:
 *     summary: Atualizar embarcador
 *     tags: [Embarcadores]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do embarcador
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               documento:
 *                 type: string
 *                 example: "11.222.333/0001-81"
 *               nome:
 *                 type: string
 *                 example: "Empresa ABC Ltda"
 *               inscricao_estadual:
 *                 type: string
 *                 example: "123456789"
 *               cnpj:
 *                 type: string
 *                 example: "11.222.333/0001-81"
 *               endereco:
 *                 type: string
 *                 example: "Rua das Ind√∫strias, 456"
 *               bairro:
 *                 type: string
 *                 example: "Distrito Industrial"
 *               cidade:
 *                 type: string
 *                 example: "S√£o Paulo"
 *               cep:
 *                 type: string
 *                 example: "01234-567"
 *               uf:
 *                 type: string
 *                 example: "SP"
 *     responses:
 *       200:
 *         description: Embarcador atualizado com sucesso
 *       404:
 *         description: Embarcador n√£o encontrado
 *       409:
 *         description: Conflito de dados
 */
router.put('/:id',
  authorize(['admin', 'gestor', 'operador']), // Admin, gestor e operador podem editar
  validateParams(embarcadorParams),
  validate(updateEmbarcador),
  controller.update.bind(controller)
);

/**
 * @swagger
 * /api/embarcadores/{id}:
 *   delete:
 *     summary: Deletar embarcador
 *     tags: [Embarcadores]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do embarcador
 *     responses:
 *       200:
 *         description: Embarcador deletado com sucesso
 *       404:
 *         description: Embarcador n√£o encontrado
 *       409:
 *         description: Embarcador possui dados associados
 */
router.delete('/:id',
  authorize(['admin', 'gestor']), // Apenas admin e gestor podem deletar
  validateParams(embarcadorParams),
  controller.delete.bind(controller)
);

/**
 * @swagger
 * /api/embarcadores/{id}/restore:
 *   post:
 *     summary: Restaurar embarcador deletado
 *     tags: [Embarcadores]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do embarcador
 *     responses:
 *       200:
 *         description: Embarcador restaurado com sucesso
 *       404:
 *         description: Embarcador n√£o encontrado
 */
router.post('/:id/restore',
  authorize(['admin']), // Apenas admin pode restaurar
  validateParams(embarcadorParams),
  controller.restore.bind(controller)
);

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\endereco-entrega.routes.js
================================================================================

const express = require('express');
const router = express.Router();

const EnderecoEntregaController = require('../controllers/endereco-entrega.controller');
const { authenticate, authorize } = require('../middlewares/auth.middleware');
const { validate, validateQuery, validateParams } = require('../middlewares/validate.middleware');
const {
  createEnderecoEntrega,
  updateEnderecoEntrega,
  listEnderecosEntrega,
  enderecoEntregaParams,
  updateCoordenadasSchema
} = require('../validations/endereco-entrega.validation');

const controller = new EnderecoEntregaController();

// Middleware de autentica√ß√£o para todas as rotas
router.use(authenticate);

/**
 * @swagger
 * /api/enderecos-entrega:
 *   get:
 *     summary: Listar endere√ßos de entrega
 *     tags: [Endere√ßos de Entrega]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *       - in: query
 *         name: cliente_id
 *         schema:
 *           type: integer
 *         description: Filtrar por cliente
 *       - in: query
 *         name: cidade
 *         schema:
 *           type: string
 *         description: Filtrar por cidade
 *       - in: query
 *         name: uf
 *         schema:
 *           type: string
 *         description: Filtrar por UF
 *       - in: query
 *         name: restrito
 *         schema:
 *           type: boolean
 *         description: Filtrar por endere√ßos restritos
 *     responses:
 *       200:
 *         description: Lista de endere√ßos de entrega
 *       401:
 *         description: N√£o autorizado
 */
router.get('/',
  validateQuery(listEnderecosEntrega),
  controller.list.bind(controller)
);

/**
 * @swagger
 * /api/enderecos-entrega/cliente/{clienteId}:
 *   get:
 *     summary: Buscar endere√ßos de entrega por cliente
 *     tags: [Endere√ßos de Entrega]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: clienteId
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do cliente
 *     responses:
 *       200:
 *         description: Endere√ßos de entrega do cliente
 *       404:
 *         description: Cliente n√£o encontrado
 */
router.get('/cliente/:clienteId',
  // Remova ou corrija a valida√ß√£o de par√¢metros aqui
  // validateParams(enderecoEntregaParams.rename('id', 'clienteId')), ‚Üê Isso n√£o funciona bem com Joi
  controller.getByCliente.bind(controller)
);

/**
 * @swagger
 * /api/enderecos-entrega/localizacao:
 *   get:
 *     summary: Buscar endere√ßos de entrega por cidade e UF
 *     tags: [Endere√ßos de Entrega]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: cidade
 *         required: true
 *         schema:
 *           type: string
 *         description: Nome da cidade
 *       - in: query
 *         name: uf
 *         required: true
 *         schema:
 *           type: string
 *         description: UF (2 caracteres)
 *     responses:
 *       200:
 *         description: Endere√ßos de entrega encontrados
 *       400:
 *         description: Cidade e UF s√£o obrigat√≥rios
 */
router.get('/localizacao',
  controller.getByCidadeUf.bind(controller)
);

/**
 * @swagger
 * /api/enderecos-entrega/restritos:
 *   get:
 *     summary: Buscar endere√ßos de entrega com restri√ß√£o log√≠stica
 *     tags: [Endere√ßos de Entrega]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Endere√ßos com restri√ß√£o recuperados
 */
router.get('/restritos',
  controller.getComRestricao.bind(controller)
);

// ... outras rotas

/**
 * @swagger
 * /api/endereco-entrega/{id}:
 *   get:
 *     summary: Buscar endere√ßo de entrega por ID
 *
 *     tags: [Endere√ßos de Entrega]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do endere√ßo de entrega
 *     responses:
 *       200:
 *         description: Endere√ßo de entrega encontrado
 *       404:
 *         description: Endere√ßo de entrega n√£o encontrado
 */
router.get('/:id', 
  validateParams(enderecoEntregaParams),
  controller.get.bind(controller)
);

/**
 * @swagger
 * /api/enderecos-entrega:
 *   post:
 *     summary: Criar novo endere√ßo de entrega
 *     tags: [Endere√ßos de Entrega]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - cliente_id
 *               - endereco
 *               - bairro
 *               - cidade
 *               - uf
 *               - cep
 *             properties:
 *               cliente_id:
 *                 type: integer
 *                 example: 1
 *               endereco:
 *                 type: string
 *                 example: "Rua das Flores, 123"
 *               bairro:
 *                 type: string
 *                 example: "Centro"
 *               cidade:
 *                 type: string
 *                 example: "S√£o Paulo"
 *               uf:
 *                 type: string
 *                 example: "SP"
 *               cep:
 *                 type: string
 *                 example: "01001000"
 *               doca:
 *                 type: string
 *                 example: "Doca 5"
 *               lat:
 *                 type: number
 *                 example: -23.550520
 *               lon:
 *                 type: number
 *                 example: -46.633308
 *               restricao_logistica_id:
 *                 type: integer
 *                 example: 1
 *               restrito:
 *                 type: boolean
 *                 example: false
 *               rota:
 *                 type: string
 *                 example: "Rota A"
 *     responses:
 *       201:
 *         description: Endere√ßo de entrega criado com sucesso
 *       400:
 *         description: Dados inv√°lidos
 *       401:
 *         description: N√£o autorizado
 */
router.post('/',
  authorize(['admin', 'gestor', 'operador']),
  validate(createEnderecoEntrega),
  controller.create.bind(controller)
);

/**
 * @swagger
 * /api/enderecos-entrega/{id}/coordenadas:
 *   patch:
 *     summary: Atualizar coordenadas do endere√ßo de entrega
 *     tags: [Endere√ßos de Entrega]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do endere√ßo de entrega
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - lat
 *               - lon
 *             properties:
 *               lat:
 *                 type: number
 *                 example: -23.550520
 *               lon:
 *                 type: number
 *                 example: -46.633308
 *     responses:
 *       200:
 *         description: Coordenadas atualizadas com sucesso
 *       404:
 *         description: Endere√ßo de entrega n√£o encontrado
 */
router.patch('/:id/coordenadas',
  authorize(['admin', 'gestor', 'operador']),
  validateParams(enderecoEntregaParams),
  validate(updateCoordenadasSchema),
  controller.updateCoordenadas.bind(controller)
);

/**
 * @swagger
 * /api/enderecos-entrega/{id}:
 *   put:
 *     summary: Atualizar endere√ßo de entrega
 *     tags: [Endere√ßos de Entrega]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do endere√ßo de entrega
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               cliente_id:
 *                 type: integer
 *               endereco:
 *                 type: string
 *               bairro:
 *                 type: string
 *               cidade:
 *                 type: string
 *               uf:
 *                 type: string
 *               cep:
 *                 type: string
 *               doca:
 *                 type: string
 *               lat:
 *                 type: number
 *               lon:
 *                 type: number
 *               restricao_logistica_id:
 *                 type: integer
 *               restrito:
 *                 type: boolean
 *               rota:
 *                 type: string
 *     responses:
 *       200:
 *         description: Endere√ßo de entrega atualizado com sucesso
 *       404:
 *         description: Endere√ßo de entrega n√£o encontrado
 */
router.put('/:id',
  authorize(['admin', 'gestor', 'operador']),
  validateParams(enderecoEntregaParams),
  validate(updateEnderecoEntrega),
  controller.update.bind(controller)
);

/**
 * @swagger
 * /api/enderecos-entrega/{id}:
 *   delete:
 *     summary: Deletar endere√ßo de entrega
 *     tags: [Endere√ßos de Entrega]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do endere√ßo de entrega
 *     responses:
 *       200:
 *         description: Endere√ßo de entrega deletado com sucesso
 *       404:
 *         description: Endere√ßo de entrega n√£o encontrado
 *       409:
 *         description: N√£o √© poss√≠vel deletar endere√ßo associado a notas fiscais
 */
router.delete('/:id',
  authorize(['admin', 'gestor']),
  validateParams(enderecoEntregaParams),
  controller.delete.bind(controller)
);

/**
 * @swagger
 * /api/enderecos-entrega/{id}/restore:
 *   post:
 *     summary: Restaurar endere√ßo de entrega deletado
 *     tags: [Endere√ßos de Entrega]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do endere√ßo de entrega
 *     responses:
 *       200:
 *         description: Endere√ßo de entrega restaurado com sucesso
 *       404:
 *         description: Endere√ßo de entrega n√£o encontrado
 */
router.post('/:id/restore',
  authorize(['admin']),
  validateParams(enderecoEntregaParams),
  controller.restore.bind(controller)
);

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\external-apis.routes.js
================================================================================

// src/routes/external-apis.routes.js
const express = require('express');
const router = express.Router();
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * /api/external-apis/tokens:
 *   get:
 *     summary: Listar tokens de API
 *     tags: [External APIs]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Lista de tokens
 */
router.get('/tokens', auth, (req, res) => {
  res.json({
    success: true,
    data: [
      { integracao: 'jamef', active: true, created_at: new Date().toISOString() },
      { integracao: 'braspress', active: false, created_at: new Date().toISOString() },
      { integracao: 'tnt', active: true, created_at: new Date().toISOString() }
    ]
  });
});

/**
 * @swagger
 * /api/external-apis/settings:
 *   get:
 *     summary: Configura√ß√µes das APIs
 *     tags: [External APIs]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Configura√ß√µes
 */
router.get('/settings', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      enabled: true,
      pollInterval: 300,
      concurrentJobs: 3,
      rateLimits: {
        jamef: { requests: 100, per: 'minute' },
        braspress: { requests: 500, per: 'hour' },
        tnt: { requests: 200, per: 'minute' }
      }
    }
  });
});

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\index.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\integrations.routes.js
================================================================================

// src/routes/integrations.routes.js
const express = require('express');
const router = express.Router();
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * /api/integrations:
 *   get:
 *     summary: Listar integra√ß√µes dispon√≠veis
 *     tags: [Integrations]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Lista de integra√ß√µes
 */
router.get('/', auth, (req, res) => {
  res.json({
    success: true,
    data: [
      { name: 'jamef', status: 'active', description: 'Integra√ß√£o JAMEF' },
      { name: 'braspress', status: 'active', description: 'Integra√ß√£o Braspress' },
      { name: 'tnt', status: 'active', description: 'Integra√ß√£o TNT' }
    ]
  });
});

/**
 * @swagger
 * /api/integrations/{transportadora}/test:
 *   post:
 *     summary: Testar conex√£o com transportadora
 *     tags: [Integrations]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - name: transportadora
 *         in: path
 *         required: true
 *         schema: { type: string, example: "jamef" }
 *     responses:
 *       200:
 *         description: Teste realizado
 */
router.post('/:transportadora/test', auth, (req, res) => {
  res.json({
    success: true,
    message: `Teste ${req.params.transportadora} realizado com sucesso`,
    data: { status: 'success', response_time: '150ms' }
  });
});

/**
 * @swagger
 * /api/integrations/{transportadora}/status:
 *   get:
 *     summary: Status da integra√ß√£o
 *     tags: [Integrations]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - name: transportadora
 *         in: path
 *         required: true
 *         schema: { type: string }
 *     responses:
 *       200:
 *         description: Status da integra√ß√£o
 */
router.get('/:transportadora/status', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      transportadora: req.params.transportadora,
      status: 'active',
      lastSync: new Date().toISOString(),
      isConfigured: true
    }
  });
});

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\jobs.routes.js
================================================================================

// ==========================================
// backend/src/routes/jobs.routes.js
// ==========================================
const { Router } = require('express');

// Middlewares
const { authenticate: auth } = require('../middlewares/auth.middleware');
const { validateBody, validateParams, validateQuery } = require('../middlewares/validate.middleware');
const { injectJobControllers } = require('../middlewares/jobs.middleware');

// Valida√ß√µes
const {
  runJobValidation,
  apiTokenValidation,
  integrationLogsValidation,
  processTransportadoraValidation,
  queueValidation
} = require('../validations/jobs.validation');

/**
 * Exporta uma f√°brica de router para permitir inje√ß√£o do jobManager.
 * No server.js: app.use('/api/jobs', require('./src/routes/jobs.routes')(jobManager));
 */
module.exports = (jobManager) => {
  const router = Router();

  // Injeta controllers de jobs em req (depende do jobManager)
  router.use(injectJobControllers(jobManager));

  /**
   * @swagger
   * tags:
   *   name: Jobs
   *   description: Gerenciamento de jobs de integra√ß√£o
   */

  /**
   * @swagger
   * /api/jobs/status:
   *   get:
   *     summary: Obter status geral dos jobs
   *     tags: [Jobs]
   *     security: [{ bearerAuth: [] }]
   *     responses:
   *       200:
   *         description: Status recuperado com sucesso
   */
  router.get('/status', auth, (req, res) => req.jobsController.getStatus(req, res));

  /**
   * @swagger
   * /api/jobs/run:
   *   post:
   *     summary: Executar job manualmente
   *     tags: [Jobs]
   *     security: [{ bearerAuth: [] }]
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             type: object
   *             properties:
   *               transportadoraId: { type: integer, example: 1 }
   *               force: { type: boolean, example: false }
   *     responses:
   *       200:
   *         description: Job iniciado com sucesso
   */
  router.post('/run',
    auth,
    validateBody(runJobValidation),
    (req, res) => req.jobsController.runManual(req, res)
  );

  /**
   * @swagger
   * /api/jobs/stop:
   *   post:
   *     summary: Parar jobs
   *     tags: [Jobs]
   *     security: [{ bearerAuth: [] }]
   *     responses:
   *       200:
   *         description: Jobs parados com sucesso
   */
  router.post('/stop', auth, (req, res) => req.jobsController.stop(req, res));

  /**
   * @swagger
   * /api/jobs/restart:
   *   post:
   *     summary: Reiniciar jobs
   *     tags: [Jobs]
   *     security: [{ bearerAuth: [] }]
   *     responses:
   *       200:
   *         description: Jobs reiniciados com sucesso
   */
  router.post('/restart', auth, (req, res) => req.jobsController.restart(req, res));

  /**
   * @swagger
   * /api/jobs/reload-config:
   *   post:
   *     summary: Recarregar configura√ß√µes
   *     tags: [Jobs]
   *     security: [{ bearerAuth: [] }]
   *     responses:
   *       200:
   *         description: Configura√ß√µes recarregadas com sucesso
   */
  router.post('/reload-config', auth, (req, res) => req.jobsController.reloadConfig(req, res));

  /**
   * @swagger
   * /api/jobs/integrations:
   *   get:
   *     summary: Listar integra√ß√µes recentes
   *     tags: [Jobs]
   *     security: [{ bearerAuth: [] }]
   *     parameters:
   *       - in: query
   *         name: page
   *         schema: { type: integer, default: 1 }
   *       - in: query
   *         name: limit
   *         schema: { type: integer, default: 20 }
   *       - in: query
   *         name: dias
   *         schema: { type: integer, default: 7 }
   *     responses:
   *       200:
   *         description: Lista de integra√ß√µes recuperada com sucesso
   */
  router.get('/integrations',
    auth,
    validateQuery(integrationLogsValidation.query),
    (req, res) => req.jobsController.getIntegrations(req, res)
  );

  /**
   * @swagger
   * /api/jobs/integrations/{integracaoId}/logs:
   *   get:
   *     summary: Obter logs de uma integra√ß√£o
   *     tags: [Jobs]
   *     security: [{ bearerAuth: [] }]
   *     parameters:
   *       - in: path
   *         name: integracaoId
   *         required: true
   *         schema: { type: integer }
   *       - in: query
   *         name: page
   *         schema: { type: integer, default: 1 }
   *       - in: query
   *         name: limit
   *         schema: { type: integer, default: 20 }
   *     responses:
   *       200:
   *         description: Logs recuperados com sucesso
   */
  router.get('/integrations/:integracaoId/logs',
    auth,
    validateParams(integrationLogsValidation.params),
    validateQuery(integrationLogsValidation.query),
    (req, res) => req.jobsController.getIntegrationLogs(req, res)
  );

  /**
   * @swagger
   * /api/jobs/transportadora/{transportadoraId}/process:
   *   post:
   *     summary: Processar transportadora espec√≠fica
   *     tags: [Jobs]
   *     security: [{ bearerAuth: [] }]
   *     parameters:
   *       - in: path
   *         name: transportadoraId
   *         required: true
   *         schema: { type: integer }
   *     responses:
   *       200:
   *         description: Transportadora processada com sucesso
   */
  router.post('/transportadora/:transportadoraId/process',
    auth,
    validateParams(processTransportadoraValidation),
    (req, res) => req.jobsController.processTransportadora(req, res)
  );

  /**
   * @swagger
   * /api/jobs/transportadora/{transportadoraId}/queue/clear:
   *   delete:
   *     summary: Limpar fila de uma transportadora
   *     tags: [Jobs]
   *     security: [{ bearerAuth: [] }]
   *     parameters:
   *       - in: path
   *         name: transportadoraId
   *         required: true
   *         schema: { type: integer }
   *     responses:
   *       200:
   *         description: Fila limpa com sucesso
   */
  router.delete('/transportadora/:transportadoraId/queue/clear',
    auth,
    validateParams(queueValidation),
    (req, res) => req.jobsController.clearQueue(req, res)
  );

  /**
   * @swagger
   * /api/jobs/api-tokens:
   *   get:
   *     summary: Listar tokens de API
   *     tags: [Jobs]
   *     security: [{ bearerAuth: [] }]
   *     responses:
   *       200:
   *         description: Tokens listados com sucesso
   */
  router.get('/api-tokens', auth, (req, res) => req.jobsController.getApiTokens(req, res));

  /**
   * @swagger
   * /api/jobs/api-tokens:
   *   post:
   *     summary: Configurar token de API
   *     tags: [Jobs]
   *     security: [{ bearerAuth: [] }]
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             type: object
   *             required: [integracao, token]
   *             properties:
   *               integracao: { type: string, example: jamef }
   *               token: { type: string }
   *               expiresAt: { type: string, format: date-time }
   *     responses:
   *       200:
   *         description: Token configurado com sucesso
   */
  router.post('/api-tokens',
    auth,
    validateBody(apiTokenValidation),
    (req, res) => req.jobsController.setApiToken(req, res)
  );

  return router;
};



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\logs.routes.js
================================================================================

// src/routes/logs.routes.js
const express = require('express');
const router = express.Router();
const { authenticate: auth } = require('../middlewares/auth.middleware');

/**
 * @swagger
 * /api/logs:
 *   get:
 *     summary: Listar logs do sistema
 *     tags: [Logs]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - name: level
 *         in: query
 *         schema: { type: string, enum: ['error', 'warn', 'info', 'debug'] }
 *       - name: limit
 *         in: query
 *         schema: { type: integer, default: 50 }
 *     responses:
 *       200:
 *         description: Lista de logs
 */
router.get('/', auth, (req, res) => {
  const { level, limit = 50 } = req.query;
  
  const logs = [
    { id: 1, level: 'info', message: 'Sistema iniciado', timestamp: new Date().toISOString() },
    { id: 2, level: 'info', message: 'Jobs inicializados', timestamp: new Date().toISOString() },
    { id: 3, level: 'warn', message: 'Token expirando', timestamp: new Date().toISOString() },
    { id: 4, level: 'error', message: 'Falha na sincroniza√ß√£o', timestamp: new Date().toISOString() }
  ];

  const filteredLogs = level ? logs.filter(log => log.level === level) : logs;
  
  res.json({
    success: true,
    data: {
      logs: filteredLogs.slice(0, limit),
      total: filteredLogs.length
    }
  });
});

/**
 * @swagger
 * /api/logs/stats:
 *   get:
 *     summary: Estat√≠sticas dos logs
 *     tags: [Logs]
 *     security: [{ bearerAuth: [] }]
 *     responses:
 *       200:
 *         description: Estat√≠sticas
 */
router.get('/stats', auth, (req, res) => {
  res.json({
    success: true,
    data: {
      total: 1250,
      errors: 15,
      warnings: 45,
      info: 1190
    }
  });
});

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\monitoring.routes.js
================================================================================

// ==========================================
// 2. MONITORING ROUTES
// ==========================================
// backend/src/routes/monitoring.routes.js

const express = require('express');

// Middlewares
const { validateBody, validateParams, validateQuery } = require('../middlewares/validate.middleware');

// Middleware de inje√ß√£o de controllers
const injectMonitoringControllers = require('../middlewares/monitoring.middleware');

// Valida√ß√µes
const {
  dashboardValidation,
  transportadoraMetricsValidation,
  performanceStatsValidation,
  logsFilterValidation,
  exportReportValidation,
  monitoringConfigValidation
} = require('../validations/monitoring.validation');

/**
 * Exporta uma f√°brica de router para permitir inje√ß√£o do jobManager.
 */
module.exports = (jobManager) => {
  const router = express.Router();

  // ‚úÖ Importe a fun√ß√£o de autentica√ß√£o e use a fun√ß√£o (n√£o o objeto)
  const { authenticate: auth } = require('../middlewares/auth.middleware');

  // Aplicar autentica√ß√£o a todas as rotas
  router.use(auth);

  // ‚úÖ Injeta controllers de monitoring em req (depende do jobManager)
  router.use(injectMonitoringControllers(jobManager));

  /**
   * @swagger
   * tags:
   *   name: Monitoring
   *   description: Monitoramento e dashboards
   */

  router.get('/dashboard',
    validateQuery(dashboardValidation),
    (req, res) => req.monitoringController.getDashboard(req, res)
  );

  router.get('/transportadora/:transportadoraId/metrics',
    validateParams(transportadoraMetricsValidation.params),
    validateQuery(transportadoraMetricsValidation.query),
    (req, res) => req.monitoringController.getTransportadoraMetrics(req, res)
  );

  router.get('/performance',
    validateQuery(performanceStatsValidation),
    (req, res) => req.monitoringController.getPerformanceStats(req, res)
  );

  router.get('/health',
    (req, res) => req.monitoringController.getHealthReport(req, res)
  );

  router.get('/logs',
    validateQuery(logsFilterValidation),
    (req, res) => req.monitoringController.getLogs(req, res)
  );

  router.get('/alerts',
    (req, res) => req.monitoringController.getActiveAlerts(req, res)
  );

  router.get('/nf-status',
    (req, res) => req.monitoringController.getNFStatusSummary(req, res)
  );

  router.get('/export',
    validateQuery(exportReportValidation),
    (req, res) => req.monitoringController.exportReport(req, res)
  );

  router.get('/config',
    (req, res) => req.monitoringController.getMonitoringConfig(req, res)
  );

  router.put('/config',
    validateBody(monitoringConfigValidation),
    (req, res) => req.monitoringController.updateMonitoringConfig(req, res)
  );

  return router;
};



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\motoristas.routes.js
================================================================================

const express = require('express');
const router = express.Router();

const MotoristasController = require('../controllers/motoristas.controller');
const { authenticate, authorize } = require('../middlewares/auth.middleware');
const { validate, validateQuery, validateParams } = require('../middlewares/validate.middleware');
const {
  createMotorista,
  updateMotorista,
  listMotoristas,
  searchMotoristas,
  motoristaParams,
  cpfParams,
  cidadeParams
} = require('../validations/motoristas.validation');

const controller = new MotoristasController();

// Middleware de autentica√ß√£o para todas as rotas
router.use(authenticate);

/**
 * @swagger
 * /api/motoristas:
 *   get:
 *     summary: Listar motoristas
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *       - in: query
 *         name: nome
 *         schema:
 *           type: string
 *         description: Filtrar por nome
 *       - in: query
 *         name: cpf
 *         schema:
 *           type: string
 *         description: Filtrar por CPF
 *       - in: query
 *         name: cidade
 *         schema:
 *           type: string
 *         description: Filtrar por cidade
 *       - in: query
 *         name: estado
 *         schema:
 *           type: string
 *         description: Filtrar por estado
 *     responses:
 *       200:
 *         description: Lista de motoristas
 *       401:
 *         description: N√£o autorizado
 */
router.get('/',
  validateQuery(listMotoristas),
  controller.list.bind(controller)
);

/**
 * @swagger
 * /api/motoristas/search:
 *   get:
 *     summary: Buscar motoristas por nome
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: q
 *         required: true
 *         schema:
 *           type: string
 *         description: Termo de busca
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 50
 *         description: Limite de resultados
 *     responses:
 *       200:
 *         description: Motoristas encontrados
 */
router.get('/search',
  validateQuery(searchMotoristas),
  controller.search.bind(controller)
);

/**
 * @swagger
 * /api/motoristas/stats:
 *   get:
 *     summary: Estat√≠sticas gerais de motoristas
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Estat√≠sticas de motoristas
 */
router.get('/stats',
  controller.getStats.bind(controller)
);

/**
 * @swagger
 * /api/motoristas/active-messages:
 *   get:
 *     summary: Listar motoristas ativos para mensagens
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Motoristas ativos para mensagens
 */
router.get('/active-messages',
  controller.getActiveForMessages.bind(controller)
);

/**
 * @swagger
 * /api/motoristas/cpf/{cpf}:
 *   get:
 *     summary: Buscar motorista por CPF
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: cpf
 *         required: true
 *         schema:
 *           type: string
 *         description: CPF do motorista
 *     responses:
 *       200:
 *         description: Motorista encontrado
 *       404:
 *         description: Motorista n√£o encontrado
 */
router.get('/cpf/:cpf',
  validateParams(cpfParams),
  controller.getByCpf.bind(controller)
);

/**
 * @swagger
 * /api/motoristas/cidade/{cidade}:
 *   get:
 *     summary: Buscar motoristas por cidade
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: cidade
 *         required: true
 *         schema:
 *           type: string
 *         description: Nome da cidade
 *     responses:
 *       200:
 *         description: Motoristas encontrados
 */
router.get('/cidade/:cidade',
  validateParams(cidadeParams),
  controller.getByCidade.bind(controller)
);

/**
 * @swagger
 * /api/motoristas/{id}:
 *   get:
 *     summary: Buscar motorista por ID
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do motorista
 *     responses:
 *       200:
 *         description: Motorista encontrado
 *       404:
 *         description: Motorista n√£o encontrado
 */
router.get('/:id',
  validateParams(motoristaParams),
  controller.get.bind(controller)
);

/**
 * @swagger
 * /api/motoristas/{id}/jornada:
 *   get:
 *     summary: Buscar motorista com jornada de trabalho
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do motorista
 *     responses:
 *       200:
 *         description: Motorista com jornada encontrado
 */
router.get('/:id/jornada',
  validateParams(motoristaParams),
  controller.getWithJornada.bind(controller)
);

/**
 * @swagger
 * /api/motoristas/{id}/legislacao:
 *   get:
 *     summary: Buscar motorista com informa√ß√µes de legisla√ß√£o
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do motorista
 *     responses:
 *       200:
 *         description: Motorista com legisla√ß√£o encontrado
 */
router.get('/:id/legislacao',
  validateParams(motoristaParams),
  controller.getWithLegislacao.bind(controller)
);

/**
 * @swagger
 * /api/motoristas:
 *   post:
 *     summary: Criar novo motorista
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - nome
 *               - cpf
 *             properties:
 *               nome:
 *                 type: string
 *                 example: "Jo√£o"
 *               sobrenome:
 *                 type: string
 *                 example: "Silva"
 *               cpf:
 *                 type: string
 *                 example: "123.456.789-10"
 *               email:
 *                 type: string
 *                 example: "joao.silva@email.com"
 *               contato:
 *                 type: string
 *                 example: "(11) 99999-9999"
 *               send_mensagem:
 *                 type: boolean
 *                 example: true
 *               legislacao_id:
 *                 type: integer
 *                 example: 1
 *               cidade:
 *                 type: string
 *                 example: "S√£o Paulo"
 *               estado:
 *                 type: string
 *                 example: "SP"
 *               cep:
 *                 type: string
 *                 example: "01234-567"
 *     responses:
 *       201:
 *         description: Motorista criado com sucesso
 *       400:
 *         description: Dados inv√°lidos
 *       409:
 *         description: CPF j√° cadastrado
 */
router.post('/',
  authorize(['admin', 'gestor']), // Apenas admin e gestor podem criar
  validate(createMotorista),
  controller.create.bind(controller)
);

/**
 * @swagger
 * /api/motoristas/{id}:
 *   put:
 *     summary: Atualizar motorista
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do motorista
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               nome:
 *                 type: string
 *               sobrenome:
 *                 type: string
 *               cpf:
 *                 type: string
 *               email:
 *                 type: string
 *               contato:
 *                 type: string
 *               send_mensagem:
 *                 type: boolean
 *               legislacao_id:
 *                 type: integer
 *               cidade:
 *                 type: string
 *               estado:
 *                 type: string
 *               cep:
 *                 type: string
 *     responses:
 *       200:
 *         description: Motorista atualizado com sucesso
 *       404:
 *         description: Motorista n√£o encontrado
 *       409:
 *         description: CPF j√° cadastrado
 */
router.put('/:id',
  authorize(['admin', 'gestor']), // Apenas admin e gestor podem editar
  validateParams(motoristaParams),
  validate(updateMotorista),
  controller.update.bind(controller)
);

/**
 * @swagger
 * /api/motoristas/{id}:
 *   delete:
 *     summary: Deletar motorista
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do motorista
 *     responses:
 *       200:
 *         description: Motorista deletado com sucesso
 *       404:
 *         description: Motorista n√£o encontrado
 *       409:
 *         description: Motorista possui romaneios associados
 */
router.delete('/:id',
  authorize(['admin']), // Apenas admin pode deletar
  validateParams(motoristaParams),
  controller.delete.bind(controller)
);

/**
 * @swagger
 * /api/motoristas/{id}/restore:
 *   post:
 *     summary: Restaurar motorista deletado
 *     tags: [Motoristas]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do motorista
 *     responses:
 *       200:
 *         description: Motorista restaurado com sucesso
 *       404:
 *         description: Motorista n√£o encontrado
 */
router.post('/:id/restore',
  authorize(['admin']), // Apenas admin pode restaurar
  validateParams(motoristaParams),
  controller.restore.bind(controller)
);

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\nota-fiscal-ocorrencias.routes.js
================================================================================

// routes/nota-fiscal-ocorrencias.routes.js
const express = require('express');
const router = express.Router();

const NotaFiscalOcorrenciasController = require('../controllers/nota-fiscal-ocorrencias.controller');
const { authenticate, authorize } = require('../middlewares/auth.middleware');
const { validate, validateQuery, validateParams } = require('../middlewares/validate.middleware');
const {
  listOcorrenciasNotaFiscal,
  createOcorrenciaNotaFiscal,
  updateOcorrenciaNotaFiscal,
  notaFiscalParams,
  notaFiscalCodigoParams,
  notaFiscalOcorrenciaParams
} = require('../validations/nota-fiscal-ocorrencias.validation');

const controller = new NotaFiscalOcorrenciasController();

// Middleware de autentica√ß√£o para todas as rotas
router.use(authenticate);

/**
 * @swagger
 * /api/notas-fiscais/{nroNf}/ocorrencias:
 *   get:
 *     summary: Listar ocorr√™ncias de uma nota fiscal
 *     tags: [Ocorrencias por nota fiscal]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: nroNf
 *         required: true
 *         schema:
 *           type: integer
 *         description: N√∫mero da nota fiscal
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *       - in: query
 *         name: orderBy
 *         schema:
 *           type: string
 *           enum: [id, dataHoraEvento, dataHoraEnvio, codigo]
 *         description: Campo para ordena√ß√£o
 *       - in: query
 *         name: orderDirection
 *         schema:
 *           type: string
 *           enum: [ASC, DESC]
 *         description: Dire√ß√£o da ordena√ß√£o
 *     responses:
 *       200:
 *         description: Lista de ocorr√™ncias da nota fiscal
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   type: object
 *                   properties:
 *                     nota_fiscal:
 *                       type: object
 *                     ocorrencias:
 *                       type: array
 *                     total_ocorrencias:
 *                       type: integer
 *                 pagination:
 *                   type: object
 *       404:
 *         description: Nota fiscal n√£o encontrada
 */
router.get('/:nroNf/ocorrencias',
  validateParams(notaFiscalParams),
  validateQuery(listOcorrenciasNotaFiscal),
  controller.getOcorrenciasByNotaFiscal.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/{nroNf}/ocorrencias/ultima:
 *   get:
 *     summary: Buscar √∫ltima ocorr√™ncia de uma nota fiscal
 *     tags: [Ocorrencias por nota fiscal]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: nroNf
 *         required: true
 *         schema:
 *           type: integer
 *         description: N√∫mero da nota fiscal
 *     responses:
 *       200:
 *         description: √öltima ocorr√™ncia encontrada
 *       404:
 *         description: Nota fiscal ou ocorr√™ncia n√£o encontrada
 */
router.get('/:nroNf/ocorrencias/ultima',
  validateParams(notaFiscalParams),
  controller.getLastOcorrenciaByNotaFiscal.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/{nroNf}/ocorrencias/stats:
 *   get:
 *     summary: Estat√≠sticas de ocorr√™ncias de uma nota fiscal
 *     tags: [Ocorrencias por nota fiscal]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: nroNf
 *         required: true
 *         schema:
 *           type: integer
 *         description: N√∫mero da nota fiscal
 *     responses:
 *       200:
 *         description: Estat√≠sticas calculadas
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     nota_fiscal:
 *                       type: object
 *                     stats:
 *                       type: object
 *                       properties:
 *                         total_ocorrencias:
 *                           type: integer
 *                         primeira_ocorrencia:
 *                           type: object
 *                         ultima_ocorrencia:
 *                           type: object
 *                         status_atual:
 *                           type: string
 *                         finalizadora:
 *                           type: boolean
 *                         por_codigo:
 *                           type: array
 *                         timeline:
 *                           type: array
 *       404:
 *         description: Nota fiscal n√£o encontrada
 */
router.get('/:nroNf/ocorrencias/stats',
  validateParams(notaFiscalParams),
  controller.getOcorrenciasStats.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/{nroNf}/ocorrencias/codigo/{codigo}:
 *   get:
 *     summary: Buscar ocorr√™ncias de uma nota fiscal por c√≥digo
 *     tags: [Ocorrencias por nota fiscal]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: nroNf
 *         required: true
 *         schema:
 *           type: integer
 *         description: N√∫mero da nota fiscal
 *       - in: path
 *         name: codigo
 *         required: true
 *         schema:
 *           type: integer
 *         description: C√≥digo da ocorr√™ncia
 *     responses:
 *       200:
 *         description: Ocorr√™ncias encontradas
 *       404:
 *         description: Nota fiscal ou ocorr√™ncias n√£o encontradas
 */
router.get('/:nroNf/ocorrencias/codigo/:codigo',
  validateParams(notaFiscalCodigoParams),
  controller.getOcorrenciasByNotaFiscalAndCodigo.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/{nroNf}/ocorrencias:
 *   post:
 *     summary: Criar nova ocorr√™ncia para uma nota fiscal
 *     tags: [Ocorrencias por nota fiscal]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: nroNf
 *         required: true
 *         schema:
 *           type: integer
 *         description: N√∫mero da nota fiscal
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - codigo
 *               - descricao
 *               - dataHoraEnvio
 *             properties:
 *               codigo:
 *                 type: integer
 *                 example: 4
 *               descricao:
 *                 type: string
 *                 example: "Entregue ao destinat√°rio"
 *               dataHoraEnvio:
 *                 type: string
 *                 format: date-time
 *                 example: "2025-09-17T10:30:00.000Z"
 *               dataHoraEvento:
 *                 type: string
 *                 format: date-time
 *                 example: "2025-09-17T09:15:00.000Z"
 *               complemento:
 *                 type: string
 *                 example: "Entrega realizada com sucesso"
 *               nomeRecebedor:
 *                 type: string
 *                 example: "Jo√£o Silva"
 *               docRecebedor:
 *                 type: string
 *                 example: "12345678901"
 *               latitude:
 *                 type: number
 *                 example: -23.5505
 *               longitude:
 *                 type: number
 *                 example: -46.6333
 *               linkComprovante:
 *                 type: string
 *                 format: uri
 *                 example: "https://exemplo.com/comprovante/123456"
 *     responses:
 *       201:
 *         description: Ocorr√™ncia criada com sucesso
 *       404:
 *         description: Nota fiscal n√£o encontrada
 *       409:
 *         description: Ocorr√™ncia j√° existe
 */
router.post('/:nroNf/ocorrencias',
  authorize(['admin', 'gestor', 'operador']),
  validateParams(notaFiscalParams),
  validate(createOcorrenciaNotaFiscal),
  controller.createOcorrenciaForNotaFiscal.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/{nroNf}/ocorrencias/{ocorrenciaId}:
 *   put:
 *     summary: Atualizar ocorr√™ncia espec√≠fica
 *     tags: [Ocorrencias por nota fiscal]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: nroNf
 *         required: true
 *         schema:
 *           type: integer
 *         description: N√∫mero da nota fiscal
 *       - in: path
 *         name: ocorrenciaId
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID da ocorr√™ncia
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               descricao:
 *                 type: string
 *               complemento:
 *                 type: string
 *               nomeRecebedor:
 *                 type: string
 *               docRecebedor:
 *                 type: string
 *               latitude:
 *                 type: number
 *               longitude:
 *                 type: number
 *               linkComprovante:
 *                 type: string
 *               status:
 *                 type: string
 *                 enum: [waiting, running, finished]
 *     responses:
 *       200:
 *         description: Ocorr√™ncia atualizada com sucesso
 *       404:
 *         description: Nota fiscal ou ocorr√™ncia n√£o encontrada
 *       400:
 *         description: Ocorr√™ncia n√£o pertence √† nota fiscal
 */
router.put('/:nroNf/ocorrencias/:ocorrenciaId',
  authorize(['admin', 'gestor', 'operador']),
  validateParams(notaFiscalOcorrenciaParams),
  validate(updateOcorrenciaNotaFiscal),
  controller.updateOcorrencia.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/{nroNf}/ocorrencias/{ocorrenciaId}:
 *   delete:
 *     summary: Excluir ocorr√™ncia espec√≠fica
 *     tags: [Ocorrencias por nota fiscal]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: nroNf
 *         required: true
 *         schema:
 *           type: integer
 *         description: N√∫mero da nota fiscal
 *       - in: path
 *         name: ocorrenciaId
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID da ocorr√™ncia
 *     responses:
 *       200:
 *         description: Ocorr√™ncia exclu√≠da com sucesso
 *       404:
 *         description: Nota fiscal ou ocorr√™ncia n√£o encontrada
 *       400:
 *         description: Ocorr√™ncia n√£o pertence √† nota fiscal
 */
router.delete('/:nroNf/ocorrencias/:ocorrenciaId',
  authorize(['admin', 'gestor']), // Apenas admin e gestor podem excluir
  validateParams(notaFiscalOcorrenciaParams),
  controller.deleteOcorrencia.bind(controller)
);

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\notas-fiscais.routes.js
================================================================================

const express = require('express');
const router = express.Router();
const Joi = require('joi'); // ‚Üê faltava

const NotasFiscaisController = require('../controllers/notas-fiscais.controller');
const { authenticate, authorize } = require('../middlewares/auth.middleware');
const { validate, validateQuery, validateParams } = require('../middlewares/validate.middleware');
const {
  createNotaFiscal, updateNotaFiscal, listNotasFiscais,
  notaFiscalParams, chaveParams, numeroSerieParams,
  statsByPeriodQuery, finalizarSchema, updateStatusSchema,
  romaneioAssociationSchema // ‚Üê ADICIONE ESTA LINHA
} = require('../validations/notas-fiscais.validation');

const controller = new NotasFiscaisController();

// Middleware de autentica√ß√£o para todas as rotas
router.use(authenticate);

/**
 * @swagger
 * /api/notas-fiscais:
 *   get:
 *     summary: Listar notas fiscais
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *       - in: query
 *         name: chave_nf
 *         schema:
 *           type: string
 *         description: Filtrar por chave da nota fiscal
 *       - in: query
 *         name: cliente_id
 *         schema:
 *           type: integer
 *         description: Filtrar por cliente
 *       - in: query
 *         name: transportadora_id
 *         schema:
 *           type: integer
 *         description: Filtrar por transportadora
 *       - in: query
 *         name: status_nf
 *         schema:
 *           type: string
 *           enum: [pendente, em_transito, entregue, devolvida, cancelada]
 *         description: Filtrar por status
 *       - in: query
 *         name: finalizada
 *         schema:
 *           type: string
 *           enum: [true, false]
 *         description: Filtrar por finalizada
 *       - in: query
 *         name: data_inicio
 *         schema:
 *           type: string
 *           format: date
 *         description: Data de in√≠cio (emiss√£o)
 *       - in: query
 *         name: data_fim
 *         schema:
 *           type: string
 *           format: date
 *         description: Data de fim (emiss√£o)
 *     responses:
 *       200:
 *         description: Lista de notas fiscais
 *       401:
 *         description: N√£o autorizado
 */
router.get('/',
  validateQuery(listNotasFiscais),
  controller.list.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/stats:
 *   get:
 *     summary: Estat√≠sticas gerais de notas fiscais
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Estat√≠sticas de notas fiscais
 */
router.get('/stats',
  controller.getStats.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/stats/period:
 *   get:
 *     summary: Estat√≠sticas por per√≠odo
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: data_inicio
 *         required: true
 *         schema:
 *           type: string
 *           format: date
 *         description: Data de in√≠cio
 *       - in: query
 *         name: data_fim
 *         required: true
 *         schema:
 *           type: string
 *           format: date
 *         description: Data de fim
 *     responses:
 *       200:
 *         description: Estat√≠sticas por per√≠odo
 */
router.get('/stats/period',
  validateQuery(statsByPeriodQuery),
  controller.getStatsByPeriod.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/pendentes-romaneio:
 *   get:
 *     summary: Buscar notas fiscais pendentes de romaneio
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: transportadoraId
 *         schema:
 *           type: integer
 *         description: Filtrar por transportadora
 *     responses:
 *       200:
 *         description: Notas fiscais pendentes de romaneio
 */
router.get('/pendentes-romaneio',
  controller.getPendentesRomaneio.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/com-atraso:
 *   get:
 *     summary: Buscar notas fiscais com atraso na entrega
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Notas fiscais com atraso
 */
router.get('/com-atraso',
  controller.getComAtraso.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/chave-nf/{chave}:
 *   get:
 *     summary: Buscar nota fiscal por chave da NF
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: chave
 *         required: true
 *         schema:
 *           type: string
 *         description: Chave da nota fiscal (44 d√≠gitos)
 *     responses:
 *       200:
 *         description: Nota fiscal encontrada
 *       404:
 *         description: Nota fiscal n√£o encontrada
 */
router.get('/chave-nf/:chave',
  validateParams(chaveParams),
  controller.getByChaveNf.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/chave-cte/{chave}:
 *   get:
 *     summary: Buscar nota fiscal por chave do CTE
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: chave
 *         required: true
 *         schema:
 *           type: string
 *         description: Chave do CTE (44 d√≠gitos)
 *     responses:
 *       200:
 *         description: Nota fiscal encontrada
 *       404:
 *         description: Nota fiscal n√£o encontrada
 */
router.get('/chave-cte/:chave',
  validateParams(chaveParams),
  controller.getByChaveCte.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/numero/{numero}/serie/{serie}:
 *   get:
 *     summary: Buscar notas fiscais por n√∫mero e s√©rie
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: numero
 *         required: true
 *         schema:
 *           type: integer
 *         description: N√∫mero da nota fiscal
 *       - in: path
 *         name: serie
 *         required: true
 *         schema:
 *           type: integer
 *         description: S√©rie da nota fiscal
 *     responses:
 *       200:
 *         description: Notas fiscais encontradas
 */
router.get('/numero/:numero/serie/:serie',
  validateParams(numeroSerieParams),
  controller.getByNumeroSerie.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/cliente/{clienteId}:
 *   get:
 *     summary: Buscar notas fiscais por cliente
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: clienteId
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do cliente
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *         description: Filtrar por status
 *       - in: query
 *         name: dataInicio
 *         schema:
 *           type: string
 *           format: date
 *         description: Data de in√≠cio
 *       - in: query
 *         name: dataFim
 *         schema:
 *           type: string
 *           format: date
 *         description: Data de fim
 *     responses:
 *       200:
 *         description: Notas fiscais do cliente
 */
router.get('/cliente/:clienteId',
  validateParams(notaFiscalParams.rename('id', 'clienteId')),
  controller.getByCliente.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/romaneio/{romaneioId}:
 *   get:
 *     summary: Buscar notas fiscais por romaneio
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: romaneioId
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do romaneio
 *     responses:
 *       200:
 *         description: Notas fiscais do romaneio
 */
router.get('/romaneio/:romaneioId',
  validateParams(notaFiscalParams.rename('id', 'romaneioId')),
  controller.getByRomaneio.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/{id}:
 *   get:
 *     summary: Buscar nota fiscal por ID
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID da nota fiscal
 *     responses:
 *       200:
 *         description: Nota fiscal encontrada
 *       404:
 *         description: Nota fiscal n√£o encontrada
 */
router.get('/:id',
  validateParams(notaFiscalParams),
  controller.get.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais:
 *   post:
 *     summary: Criar nova nota fiscal
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - cliente_id
 *               - embarcador_id
 *               - transportadora_id
 *               - cod_rep
 *               - nome_rep
 *               - emi_nf
 *               - peso_calculo
 *             properties:
 *               cliente_id:
 *                 type: integer
 *                 example: 1
 *               embarcador_id:
 *                 type: integer
 *                 example: 1
 *               transportadora_id:
 *                 type: integer
 *                 example: 1
 *               cod_rep:
 *                 type: integer
 *                 example: 123
 *               nome_rep:
 *                 type: string
 *                 example: "Jo√£o Silva"
 *               emi_nf:
 *                 type: string
 *                 format: date
 *                 example: "2024-01-15"
 *               peso_calculo:
 *                 type: number
 *                 example: 1500.50
 *               chave_nf:
 *                 type: string
 *                 example: "35200114200166000187550010000000015180044003"
 *               nro:
 *                 type: integer
 *                 example: 1234
 *               ser:
 *                 type: integer
 *                 example: 1
 *               valor:
 *                 type: number
 *                 example: 5000.00
 *               qtd_volumes:
 *                 type: integer
 *                 example: 10
 *               previsao_entrega:
 *                 type: string
 *                 format: date
 *                 example: "2024-01-20"
 *     responses:
 *       201:
 *         description: Nota fiscal criada com sucesso
 *       400:
 *         description: Dados inv√°lidos
 *       401:
 *         description: N√£o autorizado
 */
router.post('/',
  authorize(['admin', 'gestor', 'operador']),
  validate(createNotaFiscal),
  controller.create.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/{id}/status:
 *   patch:
 *     summary: Atualizar status da nota fiscal
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID da nota fiscal
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - status
 *             properties:
 *               status:
 *                 type: string
 *                 enum: [pendente, em_transito, entregue, devolvida, cancelada]
 *                 example: "em_transito"
 *               observacoes:
 *                 type: string
 *                 example: "Saiu para entrega"
 *     responses:
 *       200:
 *         description: Status atualizado com sucesso
 *       404:
 *         description: Nota fiscal n√£o encontrada
 */
router.patch('/:id/status',
  authorize(['admin', 'gestor', 'operador']),
  validateParams(notaFiscalParams),
  validate(updateStatusSchema),
  controller.updateStatus.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/{id}/finalizar:
 *   patch:
 *     summary: Finalizar nota fiscal
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID da nota fiscal
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - data_entrega
 *             properties:
 *               data_entrega:
 *                 type: string
 *                 format: date
 *                 example: "2024-01-20"
 *               hora_entrega:
 *                 type: string
 *                 pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$'
 *                 example: "14:30:00"
 *               observacoes:
 *                 type: string
 *                 example: "Entrega realizada com sucesso"
 *     responses:
 *       200:
 *         description: Nota fiscal finalizada com sucesso
 *       404:
 *         description: Nota fiscal n√£o encontrada
 *       409:
 *         description: Nota fiscal j√° foi finalizada
 */
router.patch('/:id/finalizar',
  authorize(['admin', 'gestor', 'operador']),
  validateParams(notaFiscalParams),
  validate(finalizarSchema),
  controller.finalizar.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/romaneio/{romaneioId}/associar:
 *   post:
 *     summary: Associar notas fiscais a um romaneio
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: romaneioId
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do romaneio
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - notaIds
 *             properties:
 *               notaIds:
 *                 type: array
 *                 items:
 *                   type: integer
 *                 example: [1, 2, 3, 4]
 *     responses:
 *       200:
 *         description: Notas fiscais associadas com sucesso
 *       400:
 *         description: Dados inv√°lidos
 */
router.post('/romaneio/:romaneioId/associar',
  authorize(['admin', 'gestor', 'operador']),
  validateParams(notaFiscalParams.rename('id', 'romaneioId')),
  validate(romaneioAssociationSchema),
  controller.associarRomaneio.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/romaneio/desassociar:
 *   post:
 *     summary: Desassociar notas fiscais de romaneio
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - notaIds
 *             properties:
 *               notaIds:
 *                 type: array
 *                 items:
 *                   type: integer
 *                 example: [1, 2, 3, 4]
 *     responses:
 *       200:
 *         description: Notas fiscais desassociadas com sucesso
 *       400:
 *         description: Dados inv√°lidos
 */
router.post('/romaneio/desassociar',
  authorize(['admin', 'gestor', 'operador']),
  validate(romaneioAssociationSchema),
  controller.desassociarRomaneio.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/{id}:
 *   put:
 *     summary: Atualizar nota fiscal
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID da nota fiscal
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               cliente_id:
 *                 type: integer
 *               embarcador_id:
 *                 type: integer
 *               transportadora_id:
 *                 type: integer
 *               cod_rep:
 *                 type: integer
 *               nome_rep:
 *                 type: string
 *               peso_calculo:
 *                 type: number
 *               peso_real:
 *                 type: number
 *               qtd_volumes:
 *                 type: integer
 *               valor:
 *                 type: number
 *               previsao_entrega:
 *                 type: string
 *                 format: date
 *               observacoes:
 *                 type: string
 *               status_nf:
 *                 type: string
 *                 enum: [pendente, em_transito, entregue, devolvida, cancelada]
 *     responses:
 *       200:
 *         description: Nota fiscal atualizada com sucesso
 *       404:
 *         description: Nota fiscal n√£o encontrada
 */
router.put('/:id',
  authorize(['admin', 'gestor', 'operador']),
  validateParams(notaFiscalParams),
  validate(updateNotaFiscal),
  controller.update.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/{id}:
 *   delete:
 *     summary: Deletar nota fiscal
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID da nota fiscal
 *     responses:
 *       200:
 *         description: Nota fiscal deletada com sucesso
 *       404:
 *         description: Nota fiscal n√£o encontrada
 *       409:
 *         description: N√£o √© poss√≠vel deletar nota fiscal finalizada ou associada a romaneio
 */
router.delete('/:id',
  authorize(['admin', 'gestor']), // Apenas admin e gestor podem deletar
  validateParams(notaFiscalParams),
  controller.delete.bind(controller)
);

/**
 * @swagger
 * /api/notas-fiscais/{id}/restore:
 *   post:
 *     summary: Restaurar nota fiscal deletada
 *     tags: [Notas Fiscais]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID da nota fiscal
 *     responses:
 *       200:
 *         description: Nota fiscal restaurada com sucesso
 *       404:
 *         description: Nota fiscal n√£o encontrada
 */
router.post('/:id/restore',
  authorize(['admin']), // Apenas admin pode restaurar
  validateParams(notaFiscalParams),
  controller.restore.bind(controller)
);

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\ocorrencias.routes.js
================================================================================

// routes/ocorrencias.routes.js
const express = require('express');
const router = express.Router();

const OcorrenciasController = require('../controllers/ocorrencias.controller');
const { authenticate, authorize } = require('../middlewares/auth.middleware');
const { validate, validateQuery, validateParams } = require('../middlewares/validate.middleware');
const {
  createOcorrencia, updateOcorrencia, listOcorrencias,
  ocorrenciaParams, codigoParams, tipoParams, processoParams
} = require('../validations/ocorrencias.validation');

const controller = new OcorrenciasController();

// Middleware de autentica√ß√£o para todas as rotas
router.use(authenticate);

/**
 * @swagger
 * /api/ocorrencias:
 *   get:
 *     summary: Listar c√≥digos de ocorr√™ncia
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *       - in: query
 *         name: tipo
 *         schema:
 *           type: string
 *           enum: [entrega, coleta, ocorrencia, status, informativo]
 *         description: Filtrar por tipo
 *       - in: query
 *         name: processo
 *         schema:
 *           type: string
 *           enum: [transporte, entrega, coleta, finalizacao, cancelamento, informativo]
 *         description: Filtrar por processo
 *       - in: query
 *         name: finalizadora
 *         schema:
 *           type: string
 *           enum: [true, false]
 *         description: Filtrar por finalizadora
 *       - in: query
 *         name: api
 *         schema:
 *           type: string
 *           enum: [true, false]
 *         description: Filtrar por status API
 *     responses:
 *       200:
 *         description: Lista de c√≥digos de ocorr√™ncia
 */
router.get('/',
  validateQuery(listOcorrencias),
  controller.list.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias/stats:
 *   get:
 *     summary: Estat√≠sticas dos c√≥digos de ocorr√™ncia
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Estat√≠sticas dos c√≥digos
 */
router.get('/stats',
  controller.getStats.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias/search:
 *   get:
 *     summary: Buscar c√≥digos por descri√ß√£o
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: q
 *         required: true
 *         schema:
 *           type: string
 *         description: Termo de busca
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 50
 *         description: Limite de resultados
 *     responses:
 *       200:
 *         description: Resultados da busca
 */
router.get('/search',
  controller.search.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias/finalizadoras:
 *   get:
 *     summary: Buscar c√≥digos finalizadores
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: C√≥digos finalizadores
 */
router.get('/finalizadoras',
  controller.getFinalizadoras.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias/ativas-api:
 *   get:
 *     summary: Buscar c√≥digos ativos para API
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: C√≥digos ativos para API
 */
router.get('/ativas-api',
  controller.getAtivasApi.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias/codigo/{codigo}:
 *   get:
 *     summary: Buscar c√≥digo de ocorr√™ncia por c√≥digo
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: codigo
 *         required: true
 *         schema:
 *           type: integer
 *         description: C√≥digo da ocorr√™ncia
 *     responses:
 *       200:
 *         description: C√≥digo de ocorr√™ncia encontrado
 *       404:
 *         description: C√≥digo n√£o encontrado
 */
router.get('/codigo/:codigo',
  validateParams(codigoParams),
  controller.getByCodigo.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias/tipo/{tipo}:
 *   get:
 *     summary: Buscar c√≥digos por tipo
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: tipo
 *         required: true
 *         schema:
 *           type: string
 *           enum: [entrega, coleta, ocorrencia, status, informativo]
 *         description: Tipo de ocorr√™ncia
 *     responses:
 *       200:
 *         description: C√≥digos do tipo especificado
 */
router.get('/tipo/:tipo',
  validateParams(tipoParams),
  controller.getByTipo.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias/processo/{processo}:
 *   get:
 *     summary: Buscar c√≥digos por processo
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: processo
 *         required: true
 *         schema:
 *           type: string
 *           enum: [transporte, entrega, coleta, finalizacao, cancelamento, informativo]
 *         description: Processo da ocorr√™ncia
 *     responses:
 *       200:
 *         description: C√≥digos do processo especificado
 */
router.get('/processo/:processo',
  validateParams(processoParams),
  controller.getByProcesso.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias/{id}:
 *   get:
 *     summary: Buscar c√≥digo de ocorr√™ncia por ID
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do c√≥digo de ocorr√™ncia
 *     responses:
 *       200:
 *         description: C√≥digo de ocorr√™ncia encontrado
 *       404:
 *         description: C√≥digo n√£o encontrado
 */
router.get('/:id',
  validateParams(ocorrenciaParams),
  controller.get.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias:
 *   post:
 *     summary: Criar novo c√≥digo de ocorr√™ncia
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - codigo
 *               - descricao
 *               - tipo
 *               - processo
 *             properties:
 *               codigo:
 *                 type: integer
 *                 example: 123
 *               descricao:
 *                 type: string
 *                 example: "Entrega realizada com sucesso"
 *               tipo:
 *                 type: string
 *                 enum: [entrega, coleta, ocorrencia, status, informativo]
 *                 example: "entrega"
 *               processo:
 *                 type: string
 *                 enum: [transporte, entrega, coleta, finalizacao, cancelamento, informativo]
 *                 example: "entrega"
 *               finalizadora:
 *                 type: boolean
 *                 example: true
 *               api:
 *                 type: boolean
 *                 example: true
 *     responses:
 *       201:
 *         description: C√≥digo de ocorr√™ncia criado
 */
router.post('/',
  authorize(['admin', 'gestor']),
  validate(createOcorrencia),
  controller.create.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias/{id}/toggle-api:
 *   patch:
 *     summary: Ativar/desativar para API
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do c√≥digo de ocorr√™ncia
 *     responses:
 *       200:
 *         description: Status da API atualizado
 */
router.patch('/:id/toggle-api',
  authorize(['admin', 'gestor']),
  validateParams(ocorrenciaParams),
  controller.toggleApi.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias/{id}/toggle-finalizadora:
 *   patch:
 *     summary: Marcar/desmarcar como finalizadora
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do c√≥digo de ocorr√™ncia
 *     responses:
 *       200:
 *         description: Status finalizadora atualizado
 */
router.patch('/:id/toggle-finalizadora',
  authorize(['admin', 'gestor']),
  validateParams(ocorrenciaParams),
  controller.toggleFinalizadora.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias/{id}:
 *   put:
 *     summary: Atualizar c√≥digo de ocorr√™ncia
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do c√≥digo de ocorr√™ncia
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               codigo:
 *                 type: integer
 *               descricao:
 *                 type: string
 *               tipo:
 *                 type: string
 *                 enum: [entrega, coleta, ocorrencia, status, informativo]
 *               processo:
 *                 type: string
 *                 enum: [transporte, entrega, coleta, finalizacao, cancelamento, informativo]
 *               finalizadora:
 *                 type: boolean
 *               api:
 *                 type: boolean
 *     responses:
 *       200:
 *         description: C√≥digo de ocorr√™ncia atualizado
 */
router.put('/:id',
  authorize(['admin', 'gestor']),
  validateParams(ocorrenciaParams),
  validate(updateOcorrencia),
  controller.update.bind(controller)
);

/**
 * @swagger
 * /api/ocorrencias/{id}:
 *   delete:
 *     summary: Deletar c√≥digo de ocorr√™ncia
 *     tags: [Ocorr√™ncias]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do c√≥digo de ocorr√™ncia
 *     responses:
 *       200:
 *         description: C√≥digo de ocorr√™ncia deletado
 *       409:
 *         description: N√£o √© poss√≠vel deletar c√≥digo vinculado a transportadoras
 */
router.delete('/:id',
  authorize(['admin']),
  validateParams(ocorrenciaParams),
  controller.delete.bind(controller)
);

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\reports.routes.js
================================================================================

const express = require('express');
const router = express.Router();
const { authenticate: auth } = require('../middlewares/auth.middleware');
const { validateQuery } = require('../middlewares/validate.middleware');

/**
 * @swagger
 * tags:
 *   name: Reports
 *   description: Gera√ß√£o de relat√≥rios
 */

// Import monitoring controller for report functionality
const MonitoringController = require('../controllers/monitoring.controller');
const MonitoringRepository = require('../repositories/monitoring.repository');

// Initialize controller with repository
const monitoringRepository = new MonitoringRepository();
const monitoringController = new MonitoringController(monitoringRepository);

/**
 * @swagger
 * /api/reports/export:
 *   get:
 *     summary: Exportar relat√≥rio
 *     tags: [Reports]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - in: query
 *         name: tipo
 *         schema: { type: string, default: 'performance' }
 *       - in: query
 *         name: formato
 *         schema: { type: string, default: 'json' }
 *       - in: query
 *         name: periodo
 *         schema: { type: integer, default: 30 }
 *       - in: query
 *         name: transportadoraId
 *         schema: { type: integer }
 *     responses:
 *       200:
 *         description: Relat√≥rio exportado com sucesso
 */
router.get('/export', auth, (req, res) => {
  monitoringController.exportReport(req, res);
});

/**
 * @swagger
 * /api/reports/dashboard:
 *   get:
 *     summary: Dashboard de relat√≥rios
 *     tags: [Reports]
 *     security: [{ bearerAuth: [] }]
 *     parameters:
 *       - in: query
 *         name: periodo
 *         schema: { type: integer, default: 7 }
 *     responses:
 *       200:
 *         description: Dashboard recuperado com sucesso
 */
router.get('/dashboard', auth, (req, res) => {
  monitoringController.getDashboard(req, res);
});

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\romaneios.routes.js
================================================================================

const express = require('express');
const router = express.Router();

const RomaneiosController = require('../controllers/romaneios.controller');
const { authenticate, authorize } = require('../middlewares/auth.middleware');
const { validate, validateQuery, validateParams } = require('../middlewares/validate.middleware');
const {
  createRomaneioSchema,
  updateRomaneioSchema,
  updateRotasSchema,
  queryRomaneiosSchema,
  paramsRomaneioSchema,
  numeroParamSchema,
  placaParamSchema,
  motoristaParamSchema,
  roteirizacaoParamSchema
} = require('../validations/romaneios.validation');

const controller = new RomaneiosController();

// Middleware de autentica√ß√£o para todas as rotas
router.use(authenticate);

/**
 * @swagger
 * /api/romaneios:
 *   get:
 *     summary: Listar romaneios
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *       - in: query
 *         name: numero
 *         schema:
 *           type: integer
 *         description: Filtrar por n√∫mero do romaneio
 *       - in: query
 *         name: motorista_id
 *         schema:
 *           type: integer
 *         description: Filtrar por motorista
 *       - in: query
 *         name: placa_cavalo
 *         schema:
 *           type: string
 *         description: Filtrar por placa do cavalo
 *       - in: query
 *         name: roteirizacao
 *         schema:
 *           type: string
 *           enum: [manual, automatica, otimizada]
 *         description: Filtrar por tipo de roteiriza√ß√£o
 *       - in: query
 *         name: roteirizar
 *         schema:
 *           type: boolean
 *         description: Filtrar por romaneios para roteirizar
 *       - in: query
 *         name: unidade
 *         schema:
 *           type: string
 *         description: Filtrar por unidade
 *       - in: query
 *         name: doca
 *         schema:
 *           type: string
 *         description: Filtrar por doca
 *       - in: query
 *         name: data_inicio
 *         schema:
 *           type: string
 *           format: date
 *         description: Data de in√≠cio (emiss√£o)
 *       - in: query
 *         name: data_fim
 *         schema:
 *           type: string
 *           format: date
 *         description: Data de fim (emiss√£o)
 *     responses:
 *       200:
 *         description: Lista de romaneios
 *       401:
 *         description: N√£o autorizado
 */
router.get('/',
  validateQuery(queryRomaneiosSchema),
  controller.list.bind(controller)
);

/**
 * @swagger
 * /api/romaneios/stats:
 *   get:
 *     summary: Estat√≠sticas gerais de romaneios
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Estat√≠sticas de romaneios
 */
router.get('/stats',
  controller.getStats.bind(controller)
);

/**
 * @swagger
 * /api/romaneios/numero/{numero}:
 *   get:
 *     summary: Buscar romaneio por n√∫mero
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: numero
 *         required: true
 *         schema:
 *           type: integer
 *         description: N√∫mero do romaneio
 *     responses:
 *       200:
 *         description: Romaneio encontrado
 *       404:
 *         description: Romaneio n√£o encontrado
 */
router.get('/numero/:numero',
  validateParams(numeroParamSchema),
  controller.getByNumero.bind(controller)
);

/**
 * @swagger
 * /api/romaneios/placa/{placa}:
 *   get:
 *     summary: Buscar romaneios por placa do cavalo
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: placa
 *         required: true
 *         schema:
 *           type: string
 *         description: Placa do cavalo
 *     responses:
 *       200:
 *         description: Romaneios encontrados
 */
router.get('/placa/:placa',
  validateParams(placaParamSchema),
  controller.getByPlacaCavalo.bind(controller)
);

/**
 * @swagger
 * /api/romaneios/motorista/{motorista_id}:
 *   get:
 *     summary: Buscar romaneios por motorista
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: motorista_id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do motorista
 *     responses:
 *       200:
 *         description: Romaneios do motorista encontrados
 */
router.get('/motorista/:motorista_id',
  validateParams(motoristaParamSchema),
  controller.getByMotorista.bind(controller)
);

/**
 * @swagger
 * /api/romaneios/roteirizacao/{status}:
 *   get:
 *     summary: Buscar romaneios por status de roteiriza√ß√£o
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: status
 *         required: true
 *         schema:
 *           type: string
 *           enum: [manual, automatica, otimizada]
 *         description: Status de roteiriza√ß√£o
 *     responses:
 *       200:
 *         description: Romaneios encontrados
 */
router.get('/roteirizacao/:status',
  validateParams(roteirizacaoParamSchema),
  controller.getByRoteirizacao.bind(controller)
);

/**
 * @swagger
 * /api/romaneios/{id}/notas-fiscais:
 *   get:
 *     summary: Buscar notas fiscais do romaneio
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do romaneio
 *     responses:
 *       200:
 *         description: Notas fiscais do romaneio
 */
router.get('/:id/notas-fiscais',
  validateParams(paramsRomaneioSchema),
  controller.getNotasFiscais.bind(controller)
);

/**
 * @swagger
 * /api/romaneios/{id}:
 *   get:
 *     summary: Buscar romaneio por ID
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do romaneio
 *     responses:
 *       200:
 *         description: Romaneio encontrado
 *       404:
 *         description: Romaneio n√£o encontrado
 */
router.get('/:id',
  validateParams(paramsRomaneioSchema),
  controller.get.bind(controller)
);

/**
 * @swagger
 * /api/romaneios:
 *   post:
 *     summary: Criar novo romaneio
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - placa_cavalo
 *               - emissao
 *               - motorista_id
 *             properties:
 *               numero:
 *                 type: integer
 *                 example: 12345
 *               unidade:
 *                 type: string
 *                 example: "Centro de Distribui√ß√£o"
 *               placa_cavalo:
 *                 type: string
 *                 example: "ABC1234"
 *               placa_carreta:
 *                 type: string
 *                 example: "XYZ5678"
 *               emissao:
 *                 type: string
 *                 format: date
 *                 example: "2024-01-15"
 *               motorista_id:
 *                 type: integer
 *                 example: 1
 *               capacidade_veiculo:
 *                 type: number
 *                 example: 5000.00
 *               roteirizacao:
 *                 type: string
 *                 enum: [manual, automatica, otimizada]
 *                 example: "manual"
 *               peso:
 *                 type: number
 *                 example: 2500.50
 *               cubagem:
 *                 type: number
 *                 example: 15.75
 *               doca:
 *                 type: string
 *                 example: "Doca 1"
 *               roteirizar:
 *                 type: boolean
 *                 example: false
 *     responses:
 *       201:
 *         description: Romaneio criado com sucesso
 *       400:
 *         description: Dados inv√°lidos
 *       401:
 *         description: N√£o autorizado
 */
router.post('/',
  authorize(['admin', 'gestor', 'operador']),
  validate(createRomaneioSchema),
  controller.create.bind(controller)
);

/**
 * @swagger
 * /api/romaneios/{id}/rotas:
 *   patch:
 *     summary: Atualizar rotas do romaneio
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do romaneio
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               rotas:
 *                 type: object
 *                 description: Dados das rotas
 *               markers:
 *                 type: object
 *                 description: Marcadores do mapa
 *               maplink_info:
 *                 type: object
 *                 description: Informa√ß√µes do Maplink
 *     responses:
 *       200:
 *         description: Rotas atualizadas com sucesso
 *       404:
 *         description: Romaneio n√£o encontrado
 */
router.patch('/:id/rotas',
  authorize(['admin', 'gestor', 'operador']),
  validateParams(paramsRomaneioSchema),
  validate(updateRotasSchema),
  controller.updateRotas.bind(controller)
);

/**
 * @swagger
 * /api/romaneios/{id}/roteirizar:
 *   patch:
 *     summary: Marcar/desmarcar romaneio para roteiriza√ß√£o
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do romaneio
 *     responses:
 *       200:
 *         description: Status de roteiriza√ß√£o atualizado
 *       404:
 *         description: Romaneio n√£o encontrado
 */
router.patch('/:id/roteirizar',
  authorize(['admin', 'gestor', 'operador']),
  validateParams(paramsRomaneioSchema),
  controller.toggleRoteirizar.bind(controller)
);

/**
 * @swagger
 * /api/romaneios/{id}:
 *   put:
 *     summary: Atualizar romaneio
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do romaneio
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               numero:
 *                 type: integer
 *               unidade:
 *                 type: string
 *               placa_cavalo:
 *                 type: string
 *               placa_carreta:
 *                 type: string
 *               emissao:
 *                 type: string
 *                 format: date
 *               motorista_id:
 *                 type: integer
 *               capacidade_veiculo:
 *                 type: number
 *               roteirizacao:
 *                 type: string
 *                 enum: [manual, automatica, otimizada]
 *               peso:
 *                 type: number
 *               cubagem:
 *                 type: number
 *               doca:
 *                 type: string
 *               roteirizar:
 *                 type: boolean
 *     responses:
 *       200:
 *         description: Romaneio atualizado com sucesso
 *       404:
 *         description: Romaneio n√£o encontrado
 */
router.put('/:id',
  authorize(['admin', 'gestor', 'operador']),
  validateParams(paramsRomaneioSchema),
  validate(updateRomaneioSchema),
  controller.update.bind(controller)
);

/**
 * @swagger
 * /api/romaneios/{id}:
 *   delete:
 *     summary: Deletar romaneio
 *     tags: [Romaneios]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do romaneio
 *     responses:
 *       200:
 *         description: Romaneio deletado com sucesso
 *       404:
 *         description: Romaneio n√£o encontrado
 *       409:
 *         description: N√£o √© poss√≠vel deletar romaneio com notas fiscais associadas
 */
router.delete('/:id',
  authorize(['admin', 'gestor']),
  validateParams(paramsRomaneioSchema),
  controller.delete.bind(controller)
);

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\transportadora-codigo-ocorrencia.routes.js
================================================================================

// routes/transportadora-codigo-ocorrencia.routes.js
const express = require('express');
const router = express.Router();

const TransportadoraCodigoOcorrenciaController = require('../controllers/transportadora-codigo-ocorrencia.controller');
const { authenticate, authorize } = require('../middlewares/auth.middleware');
const { validate, validateQuery, validateParams } = require('../middlewares/validate.middleware');
const {
  createVinculo, createMultipleVinculos, listVinculos,
  vinculoParams, transportadoraParams, codigoOcorrenciaParams
} = require('../validations/transportadora-codigo-ocorrencia.validation');

const controller = new TransportadoraCodigoOcorrenciaController();

// Middleware de autentica√ß√£o para todas as rotas
router.use(authenticate);

/**
 * @swagger
 * /api/transportadora-codigo-ocorrencia:
 *   get:
 *     summary: Listar v√≠nculos transportadora-c√≥digo
 *     tags: [Transportadora-C√≥digo Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *       - in: query
 *         name: transportadora_id
 *         schema:
 *           type: integer
 *         description: Filtrar por transportadora
 *       - in: query
 *         name: codigo_ocorrencia_codigo
 *         schema:
 *           type: integer
 *         description: Filtrar por c√≥digo de ocorr√™ncia
 *     responses:
 *       200:
 *         description: Lista de v√≠nculos
 */
router.get('/',
  validateQuery(listVinculos),
  controller.list.bind(controller)
);

/**
 * @swagger
 * /api/transportadora-codigo-ocorrencia/stats:
 *   get:
 *     summary: Estat√≠sticas dos v√≠nculos
 *     tags: [Transportadora-C√≥digo Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Estat√≠sticas dos v√≠nculos
 */
router.get('/stats',
  controller.getStats.bind(controller)
);

/**
 * @swagger
 * /api/transportadora-codigo-ocorrencia/transportadora/{transportadoraId}:
 *   get:
 *     summary: Buscar c√≥digos por transportadora
 *     tags: [Transportadora-C√≥digo Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: transportadoraId
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID da transportadora
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *     responses:
 *       200:
 *         description: C√≥digos da transportadora
 */
router.get('/transportadora/:transportadoraId',
  validateParams(transportadoraParams),
  controller.getByTransportadora.bind(controller)
);

/**
 * @swagger
 * /api/transportadora-codigo-ocorrencia/codigo-ocorrencia/{codigoOcorrencia}:
 *   get:
 *     summary: Buscar transportadoras por c√≥digo de ocorr√™ncia
 *     tags: [Transportadora-C√≥digo Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: codigoOcorrencia
 *         required: true
 *         schema:
 *           type: integer
 *         description: C√≥digo da ocorr√™ncia
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *     responses:
 *       200:
 *         description: Transportadoras do c√≥digo
 */
router.get('/codigo-ocorrencia/:codigoOcorrencia',
  validateParams(codigoOcorrenciaParams),
  controller.getByCodigoOcorrencia.bind(controller)
);

/**
 * @swagger
 * /api/transportadora-codigo-ocorrencia/transportadora/{transportadoraId}/codigo-ocorrencia/{codigoOcorrencia}:
 *   get:
 *     summary: Buscar v√≠nculo espec√≠fico
 *     tags: [Transportadora-C√≥digo Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: transportadoraId
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID da transportadora
 *       - in: path
 *         name: codigoOcorrencia
 *         required: true
 *         schema:
 *           type: integer
 *         description: C√≥digo da ocorr√™ncia
 *     responses:
 *       200:
 *         description: V√≠nculo encontrado
 *       404:
 *         description: V√≠nculo n√£o encontrado
 */
router.get('/transportadora/:transportadoraId/codigo-ocorrencia/:codigoOcorrencia',
  validateParams(transportadoraParams.rename('id', 'transportadoraId')),
  validateParams(codigoOcorrenciaParams),
  controller.getVinculo.bind(controller)
);

/**
 * @swagger
 * /api/transportadora-codigo-ocorrencia/multiple:
 *   post:
 *     summary: Criar m√∫ltiplos v√≠nculos
 *     tags: [Transportadora-C√≥digo Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - vinculos
 *             properties:
 *               vinculos:
 *                 type: array
 *                 items:
 *                   type: object
 *                   required:
 *                     - transportadora_id
 *                     - codigo_ocorrencia_codigo
 *                     - codigo
 *                   properties:
 *                     transportadora_id:
 *                       type: integer
 *                       example: 1
 *                     codigo_ocorrencia_codigo:
 *                       type: integer
 *                       example: 123
 *                     codigo:
 *                       type: integer
 *                       example: 123
 *                     descricao:
 *                       type: string
 *                       example: "Descri√ß√£o personalizada"
 *     responses:
 *       201:
 *         description: V√≠nculos criados
 */
router.post('/multiple',
  authorize(['admin', 'gestor']),
  validate(createMultipleVinculos),
  controller.createMultiple.bind(controller)
);

/**
 * @swagger
 * /api/transportadora-codigo-ocorrencia:
 *   post:
 *     summary: Criar v√≠nculo
 *     tags: [Transportadora-C√≥digo Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - transportadora_id
 *               - codigo_ocorrencia_codigo
 *               - codigo
 *             properties:
 *               transportadora_id:
 *                 type: integer
 *                 example: 1
 *               codigo_ocorrencia_codigo:
 *                 type: integer
 *                 example: 123
 *               codigo:
 *                 type: integer
 *                 example: 123
 *               descricao:
 *                 type: string
 *                 example: "Descri√ß√£o personalizada"
 *     responses:
 *       201:
 *         description: V√≠nculo criado
 */
router.post('/',
  authorize(['admin', 'gestor']),
  validate(createVinculo),
  controller.create.bind(controller)
);

/**
 * @swagger
 * /api/transportadora-codigo-ocorrencia/{id}:
 *   put:
 *     summary: Atualizar v√≠nculo
 *     tags: [Transportadora-C√≥digo Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do v√≠nculo
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               transportadora_id:
 *                 type: integer
 *               codigo_ocorrencia_codigo:
 *                 type: integer
 *               codigo:
 *                 type: integer
 *               descricao:
 *                 type: string
 *     responses:
 *       200:
 *         description: V√≠nculo atualizado
 */
router.put('/:id',
  authorize(['admin', 'gestor']),
  validateParams(vinculoParams),
  validate(createVinculo),
  controller.update.bind(controller)
);

/**
 * @swagger
 * /api/transportadora-codigo-ocorrencia/{id}:
 *   delete:
 *     summary: Deletar v√≠nculo
 *     tags: [Transportadora-C√≥digo Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do v√≠nculo
 *     responses:
 *       200:
 *         description: V√≠nculo deletado
 */
router.delete('/:id',
  authorize(['admin', 'gestor']),
  validateParams(vinculoParams),
  controller.delete.bind(controller)
);

/**
 * @swagger
 * /api/transportadora-codigo-ocorrencia/transportadora/{transportadoraId}:
 *   delete:
 *     summary: Deletar v√≠nculos por transportadora
 *     tags: [Transportadora-C√≥digo Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: transportadoraId
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID da transportadora
 *     responses:
 *       200:
 *         description: V√≠nculos deletados
 */
router.delete('/transportadora/:transportadoraId',
  authorize(['admin', 'gestor']),
  validateParams(transportadoraParams),
  controller.deleteByTransportadora.bind(controller)
);

/**
 * @swagger
 * /api/transportadora-codigo-ocorrencia/codigo-ocorrencia/{codigoOcorrencia}:
 *   delete:
 *     summary: Deletar v√≠nculos por c√≥digo de ocorr√™ncia
 *     tags: [Transportadora-C√≥digo Ocorr√™ncia]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: codigoOcorrencia
 *         required: true
 *         schema:
 *           type: integer
 *         description: C√≥digo da ocorr√™ncia
 *     responses:
 *       200:
 *         description: V√≠nculos deletados
 */
router.delete('/codigo-ocorrencia/:codigoOcorrencia',
  authorize(['admin', 'gestor']),
  validateParams(codigoOcorrenciaParams),
  controller.deleteByCodigoOcorrencia.bind(controller)
);

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\transportadoras.routes.js
================================================================================

const express = require('express');
const router = express.Router();

const TransportadorasController = require('../controllers/transportadoras.controller');
const { authenticate, authorize } = require('../middlewares/auth.middleware');
const { validate, validateQuery, validateParams } = require('../middlewares/validate.middleware');
const {
  createTransportadora,
  updateTransportadora,
  listTransportadoras,
  searchTransportadoras,
  transportadoraParams,
  cnpjParams,
  ufParams
} = require('../validations/transportadoras.validation');

const controller = new TransportadorasController();

// Middleware de autentica√ß√£o para todas as rotas
router.use(authenticate);

/**
 * @swagger
 * /api/transportadoras:
 *   get:
 *     summary: Listar transportadoras
 *     tags: [Transportadoras]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: N√∫mero da p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Limite de registros por p√°gina
 *       - in: query
 *         name: nome
 *         schema:
 *           type: string
 *         description: Filtrar por nome
 *       - in: query
 *         name: uf
 *         schema:
 *           type: string
 *         description: Filtrar por UF
 *     responses:
 *       200:
 *         description: Lista de transportadoras
 *       401:
 *         description: N√£o autorizado
 */
router.get('/',
  validateQuery(listTransportadoras),
  controller.list.bind(controller)
);

/**
 * @swagger
 * /api/transportadoras/search:
 *   get:
 *     summary: Buscar transportadoras por nome
 *     tags: [Transportadoras]
 *     security:
 *       - bearerAuth: []
 */
router.get('/search',
  validateQuery(searchTransportadoras),
  controller.search.bind(controller)
);

/**
 * @swagger
 * /api/transportadoras/stats:
 *   get:
 *     summary: Estat√≠sticas gerais de transportadoras
 *     tags: [Transportadoras]
 *     security:
 *       - bearerAuth: []
 */
router.get('/stats',
  controller.getStats.bind(controller)
);

/**
 * @swagger
 * /api/transportadoras/integration:
 *   get:
 *     summary: Listar transportadoras com integra√ß√£o ativa
 *     tags: [Transportadoras]
 *     security:
 *       - bearerAuth: []
 */
router.get('/integration',
  controller.getForIntegration.bind(controller)
);

/**
 * @swagger
 * /api/transportadoras/cnpj/{cnpj}:
 *   get:
 *     summary: Buscar transportadora por CNPJ
 *     tags: [Transportadoras]
 *     security:
 *       - bearerAuth: []
 */
router.get('/cnpj/:cnpj',
  validateParams(cnpjParams),
  controller.getByCnpj.bind(controller)
);

/**
 * @swagger
 * /api/transportadoras/uf/{uf}:
 *   get:
 *     summary: Buscar transportadoras por UF
 *     tags: [Transportadoras]
 *     security:
 *       - bearerAuth: []
 */
router.get('/uf/:uf',
  validateParams(ufParams),
  controller.getByUf.bind(controller)
);

/**
 * @swagger
 * /api/transportadoras/{id}:
 *   get:
 *     summary: Buscar transportadora por ID
 *     tags: [Transportadoras]
 *     security:
 *       - bearerAuth: []
 */
router.get('/:id',
  validateParams(transportadoraParams),
  controller.get.bind(controller)
);

/**
 * @swagger
 * /api/transportadoras:
 *   post:
 *     summary: Criar nova transportadora
 *     tags: [Transportadoras]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - cnpj
 *               - nome
 *               - endereco
 *               - municipio
 *               - uf
 *             properties:
 *               cnpj:
 *                 type: string
 *                 example: "11.222.333/0001-81"
 *               nome:
 *                 type: string
 *                 example: "Transportadora ABC Ltda"
 *               endereco:
 *                 type: string
 *                 example: "Rua das Flores, 123"
 *               municipio:
 *                 type: string
 *                 example: "S√£o Paulo"
 *               uf:
 *                 type: string
 *                 example: "SP"
 */
router.post('/',
  authorize(['admin', 'gestor']), // Apenas admin e gestor podem criar
  validate(createTransportadora),
  controller.create.bind(controller)
);

/**
 * @swagger
 * /api/transportadoras/{id}:
 *   put:
 *     summary: Atualizar transportadora
 *     tags: [Transportadoras]
 *     security:
 *       - bearerAuth: []
 */
router.put('/:id',
  authorize(['admin', 'gestor']), // Apenas admin e gestor podem editar
  validateParams(transportadoraParams),
  validate(updateTransportadora),
  controller.update.bind(controller)
);

/**
 * @swagger
 * /api/transportadoras/{id}:
 *   delete:
 *     summary: Deletar transportadora
 *     tags: [Transportadoras]
 *     security:
 *       - bearerAuth: []
 */
router.delete('/:id',
  authorize(['admin']), // Apenas admin pode deletar
  validateParams(transportadoraParams),
  controller.delete.bind(controller)
);

/**
 * @swagger
 * /api/transportadoras/{id}/restore:
 *   post:
 *     summary: Restaurar transportadora deletada
 *     tags: [Transportadoras]
 *     security:
 *       - bearerAuth: []
 */
router.post('/:id/restore',
  authorize(['admin']), // Apenas admin pode restaurar
  validateParams(transportadoraParams),
  controller.restore.bind(controller)
);

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\users.routes.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\webhook-external.routes.js
================================================================================


// ROTAS SIMPLIFICADAS
// ==========================================
// backend/src/routes/webhook-external.routes.js (ATUALIZADO)

const express = require('express');
const router = express.Router();
const WebhookController = require('../controllers/webhook.controller');
const webhookAuth = require('../middlewares/webhook-auth.middleware');

const controller = new WebhookController();

/**
 * @swagger
 * /api/webhooks/{transportadora}:
 *   post:
 *     summary: Webhook unificado usando IntegrationFactory existente
 *     tags: [Webhooks]
 *     parameters:
 *       - in: path
 *         name: transportadora
 *         required: true
 *         schema: { type: string }
 *         description: Nome da transportadora (jamef, braspress, tnt, etc.)
 *     responses:
 *       200:
 *         description: Dados processados usando service de integra√ß√£o existente
 */
router.post('/:transportadora', 
  webhookAuth.validateByTransportadora,
  controller.handleTransportadoraWebhook.bind(controller)
);

/**
 * @swagger
 * /api/webhooks/status:
 *   get:
 *     summary: Status dos webhooks e integration services
 *     tags: [Webhooks]
 *     responses:
 *       200:
 *         description: Status mostrando integration services dispon√≠veis
 */
router.get('/status', controller.getStatus.bind(controller));

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\webhook.routes.js
================================================================================

// ==========================================
// 1. WEBHOOK ROUTES - Arquivo Principal
// ==========================================
// backend/src/routes/webhook.routes.js

const express = require('express');
const router = express.Router();

const WebhookController = require('../controllers/webhook.controller');
const { validate } = require('../middlewares/validate.middleware');
const logger = require('../config/logger');

// Schemas de valida√ß√£o
const {
  webhookNotaFiscalSchema,
  webhookOcorrenciasSchema
} = require('../validations/webhook.validation');

const controller = new WebhookController();

/**
 * @swagger
 * tags:
 *   name: Webhook
 *   description: Endpoints para receber dados via webhook
 */

/**
 * @swagger
 * /api/webhook/notafiscal:
 *   post:
 *     summary: Receber dados de nota fiscal via webhook
 *     tags: [Webhook]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               notfis:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     nro_nf:
 *                       type: string
 *                     serie_nf:
 *                       type: string
 *                     valor_nf:
 *                       type: number
 *                     peso_nf:
 *                       type: number
 *                     cliente:
 *                       type: object
 *                       properties:
 *                         nome:
 *                           type: string
 *                         cnpj:
 *                           type: string
 *                         endereco:
 *                           type: string
 *                         municipio:
 *                           type: string
 *                         uf:
 *                           type: string
 *     responses:
 *       200:
 *         description: Dados processados com sucesso
 *       400:
 *         description: Dados inv√°lidos
 *       500:
 *         description: Erro interno do servidor
 */
router.post('/notafiscal',
  validate(webhookNotaFiscalSchema),
  controller.receiveNotaFiscal.bind(controller)
);

/**
 * @swagger
 * /api/webhook/ocorrencias:
 *   post:
 *     summary: Receber ocorr√™ncias de tracking via webhook
 *     tags: [Webhook]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               ocorrencias:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     nro_nf:
 *                       type: string
 *                     codigo:
 *                       type: string
 *                     descricao:
 *                       type: string
 *                     data_ocorrencia:
 *                       type: string
 *                       format: date-time
 *                     latitude:
 *                       type: number
 *                     longitude:
 *                       type: number
 *                     linkComprovante:
 *                       type: string
 *     responses:
 *       200:
 *         description: Ocorr√™ncias processadas com sucesso
 *       400:
 *         description: Dados inv√°lidos
 *       404:
 *         description: Nota fiscal n√£o encontrada
 *       500:
 *         description: Erro interno do servidor
 */
router.post('/ocorrencias',
  validate(webhookOcorrenciasSchema),
  controller.receiveOcorrencias.bind(controller)
);

/**
 * @swagger
 * /api/webhook/status:
 *   get:
 *     summary: Verificar status do webhook
 *     tags: [Webhook]
 *     responses:
 *       200:
 *         description: Status do webhook
 */
router.get('/status', controller.getStatus.bind(controller));

// Middleware de log para todas as requisi√ß√µes do webhook
router.use((req, res, next) => {
  logger.info('Webhook request received', {
    method: req.method,
    url: req.originalUrl,
    body: req.body ? Object.keys(req.body) : null,
    ip: req.ip,
    userAgent: req.get('User-Agent')
  });
  next();
});

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\routes\webhooks.routes.js
================================================================================

// routes/webhook.routes.js
const express = require('express');
const router = express.Router();

const WebhookController = require('../controllers/webhook.controller');
const { validate } = require('../middlewares/validate.middleware');
const { webhookNotaFiscalSchema } = require('../validations/webhook.validation');
const logger = require('../config/logger');

const controller = new WebhookController();

/**
 * @swagger
 * components:
 *   schemas:
 *     Ocorrencia:
 *       type: object
 *       required:
 *         - nro_nf
 *         - dataHoraEvento
 *         - dataHoraEnvio
 *         - codigo
 *         - descricao
 *       properties:
 *         nro_nf:
 *           type: string
 *           description: N√∫mero da nota fiscal
 *           example: "1875722"
 *         dataHoraEvento:
 *           type: string
 *           format: date-time
 *           description: Data e hora do evento
 *           example: "2025-01-07T00:18:24.000-03:00"
 *         dataHoraEnvio:
 *           type: string
 *           format: date-time
 *           description: Data e hora do envio
 *           example: "2025-01-07T00:18:27.000-03:00"
 *         codigo:
 *           type: string
 *           description: C√≥digo da ocorr√™ncia
 *           example: "82"
 *         descricao:
 *           type: string
 *           description: Descri√ß√£o da ocorr√™ncia
 *           example: "SAIDA DA UNIDADE"
 *         complemento:
 *           type: string
 *           description: Informa√ß√µes complementares
 *           example: "Saida da unidade JUNDIAI em 07/01/25, 00:18h"
 *         nomeRecebedor:
 *           type: string
 *           description: Nome do recebedor (quando aplic√°vel)
 *           example: "CARLOS ROBERTO"
 *         docRecebedor:
 *           type: string
 *           description: Documento do recebedor
 *           example: "84587962585"
 *         latitude:
 *           type: string
 *           description: Coordenada de latitude
 *           example: "-23.1864"
 *         longitude:
 *           type: string
 *           description: Coordenada de longitude
 *           example: "-46.8842"
 *         linkComprovante:
 *           type: string
 *           format: uri
 *           description: Link para comprovante de entrega
 *           example: "https://comprovante.tnt.com/12345.pdf"
 *         dataHoraAgendamento:
 *           type: string
 *           format: date-time
 *           description: Data e hora de agendamento
 *         novaDataPrevisao:
 *           type: string
 *           format: date-time
 *           description: Nova data de previs√£o
 *           example: "2025-01-09T06:16:00.000-03:00"
 *     
 *     Recebedor:
 *       type: object
 *       required:
 *         - documento
 *         - nome
 *       properties:
 *         cod_cliente:
 *           type: string
 *           example: "56440"
 *         documento:
 *           type: string
 *           example: "24876491000369"
 *         nome:
 *           type: string
 *           example: "POLICLINICA QUALITY LTDA"
 *         endereco:
 *           type: string
 *           example: "R RIACHUELO,685"
 *         bairro:
 *           type: string
 *           example: "CAVALHADA I"
 *         cep:
 *           type: string
 *           example: "78216-010"
 *         cidade:
 *           type: string
 *           example: "C√ÉCERES"
 *         uf:
 *           type: string
 *           example: "MT"
 *         contato:
 *           type: string
 *           example: "65 32236048"
 *     
 *     Remetente:
 *       type: object
 *       required:
 *         - documento
 *         - nome
 *       properties:
 *         documento:
 *           type: string
 *           example: "61418042000131"
 *         nome:
 *           type: string
 *           example: "CIRURGICA FERNANDES C.MAT.CIR.HO.SO.LTDA"
 *     
 *     Transportadora:
 *       type: object
 *       required:
 *         - cnpj
 *         - nome
 *       properties:
 *         cnpj:
 *           type: string
 *           example: "95591723000119"
 *         nome:
 *           type: string
 *           example: "TNT MERCURIO CARGAS E ENCOMENDAS EXPRESSAS LTDA"
 *         endereco:
 *           type: string
 *           example: "AV. MARGINAL DIREITA DO TIETE, 2500"
 *         municipio:
 *           type: string
 *           example: "S√ÉO PAULO"
 *         uf:
 *           type: string
 *           example: "SP"
 *     
 *     EnderecoEntrega:
 *       type: object
 *       properties:
 *         endereco:
 *           type: string
 *           example: "R RIACHUELO,685"
 *         bairro:
 *           type: string
 *           example: "CAVALHADA I"
 *         cep:
 *           type: string
 *           example: "78216-010"
 *         cidade:
 *           type: string
 *           example: "C√ÉCERES"
 *         uf:
 *           type: string
 *           example: "MT"
 *         doca:
 *           type: string
 *           example: "71"
 *         rota:
 *           type: string
 *           example: ""
 *     
 *     NotaFiscalCompleta:
 *       type: object
 *       required:
 *         - nro
 *         - recebedor
 *         - remetente
 *         - transportadora
 *       properties:
 *         peso_calculo:
 *           type: number
 *           example: 1.032
 *         observacoes:
 *           type: string
 *           example: "Observa√ß√µes da nota fiscal"
 *         previsao_entrega:
 *           type: string
 *           format: date-time
 *           example: "2025-07-15T09:19:17.000000Z"
 *         chave_nf:
 *           type: string
 *           example: "35250761418042000131550040018757221276116250"
 *         ser:
 *           type: integer
 *           example: 4
 *         emi_nf:
 *           type: string
 *           format: date-time
 *           example: "2025-07-04T00:00:00.000000Z"
 *         nro:
 *           type: integer
 *           example: 1875722
 *         nro_pedido:
 *           type: integer
 *           example: 2413919
 *         peso_real:
 *           type: number
 *           example: 1.032
 *         cod_rep:
 *           type: integer
 *           example: 121
 *         nome_rep:
 *           type: string
 *           example: "PINHEIRO & SCRIVANTE REP. COMERCIAIS LTD"
 *         qtd_volumes:
 *           type: integer
 *           example: 1
 *         metro_cubico:
 *           type: number
 *           example: 0.01132866
 *         mensagem:
 *           type: string
 *           example: ""
 *         valor:
 *           type: number
 *           example: 748.14
 *         data_entrega:
 *           type: string
 *           example: ""
 *         status_nf:
 *           type: string
 *           enum: [pendente, em_transito, entregue, devolvida, cancelada, pedido reservado]
 *           example: "em_transito"
 *         nf_retida:
 *           type: boolean
 *           example: false
 *         valor_frete:
 *           type: number
 *           example: 25.50
 *         recebedor:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/Recebedor'
 *         endereco_entrega:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/EnderecoEntrega'
 *         remetente:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/Remetente'
 *         transportadora:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/Transportadora'
 *         ocorrencias:
 *           type: array
 *           description: Array de ocorr√™ncias de tracking (opcional)
 *           items:
 *             $ref: '#/components/schemas/Ocorrencia'
 *     
 *     WebhookResponse:
 *       type: object
 *       properties:
 *         success:
 *           type: boolean
 *           example: true
 *         message:
 *           type: string
 *           example: "1 notas fiscais processadas com sucesso"
 *         data:
 *           type: object
 *           properties:
 *             processed:
 *               type: integer
 *               description: Quantidade de notas fiscais processadas
 *               example: 1
 *             total:
 *               type: integer
 *               description: Total de notas fiscais enviadas
 *               example: 1
 *             ocorrencias_processadas:
 *               type: integer
 *               description: Total de ocorr√™ncias de tracking processadas
 *               example: 4
 *             errors:
 *               type: array
 *               description: Lista de erros encontrados
 *               items:
 *                 type: string
 *               example: []
 *             duration_ms:
 *               type: integer
 *               description: Tempo de processamento em milissegundos
 *               example: 1250
 */

/**
 * @swagger
 * /api/webhook/notafiscal:
 *   post:
 *     summary: Receber dados de nota fiscal via webhook com ocorr√™ncias de tracking
 *     description: |
 *       Endpoint para receber dados completos de notas fiscais incluindo:
 *       - Dados da nota fiscal
 *       - Informa√ß√µes de cliente (recebedor)
 *       - Informa√ß√µes de embarcador (remetente) 
 *       - Informa√ß√µes da transportadora
 *       - Endere√ßo de entrega (opcional)
 *       - **Ocorr√™ncias de tracking (NOVO)** - Array com hist√≥rico de eventos da nota fiscal
 *       
 *       O sistema processa automaticamente:
 *       - Cria/atualiza registros sem duplicar dados
 *       - Processa m√∫ltiplas notas fiscais em uma requisi√ß√£o
 *       - Salva todas as ocorr√™ncias de tracking com timestamps
 *       - Retorna detalhes do processamento incluindo contadores de ocorr√™ncias
 *     tags: [Webhook]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - notfis
 *             properties:
 *               notfis:
 *                 type: array
 *                 description: Array de notas fiscais para processar
 *                 items:
 *                   $ref: '#/components/schemas/NotaFiscalCompleta'
 *           examples:
 *             com_ocorrencias:
 *               summary: Nota fiscal com ocorr√™ncias de tracking
 *               description: Exemplo completo incluindo 4 ocorr√™ncias de tracking
 *               value:
 *                 notfis:
 *                   - nro: 1875722
 *                     chave_nf: "35250761418042000131550040018757221276116250"
 *                     valor: 748.14
 *                     status_nf: "em_transito"
 *                     recebedor:
 *                       - documento: "24876491000369"
 *                         nome: "POLICLINICA QUALITY LTDA"
 *                     remetente:
 *                       - documento: "61418042000131"
 *                         nome: "CIRURGICA FERNANDES LTDA"
 *                     transportadora:
 *                       - cnpj: "95591723000119"
 *                         nome: "TNT MERCURIO LTDA"
 *                     ocorrencias:
 *                       - nro_nf: "1875722"
 *                         dataHoraEvento: "2025-01-07T00:18:24.000-03:00"
 *                         dataHoraEnvio: "2025-01-07T00:18:27.000-03:00"
 *                         codigo: "82"
 *                         descricao: "SAIDA DA UNIDADE"
 *                         complemento: "Saida da unidade JUNDIAI"
 *                       - nro_nf: "1875722"
 *                         dataHoraEvento: "2025-01-10T16:20:10.000-03:00"
 *                         dataHoraEnvio: "2025-01-10T16:20:13.000-03:00"
 *                         codigo: "05"
 *                         descricao: "ENTREGA REALIZADA"
 *                         nomeRecebedor: "CARLOS ROBERTO"
 *                         docRecebedor: "84587962585"
 *                         linkComprovante: "https://comprovante.tnt.com/12345.pdf"
 *             sem_ocorrencias:
 *               summary: Nota fiscal simples (sem tracking)
 *               description: Exemplo b√°sico apenas com dados da nota fiscal
 *               value:
 *                 notfis:
 *                   - nro: 12345
 *                     valor: 1000.50
 *                     recebedor:
 *                       - documento: "12345678000195"
 *                         nome: "EMPRESA TESTE LTDA"
 *                     remetente:
 *                       - documento: "98765432000198"
 *                         nome: "FORNECEDOR TESTE LTDA"
 *                     transportadora:
 *                       - cnpj: "11111111000111"
 *                         nome: "TRANSPORTADORA TESTE LTDA"
 *     responses:
 *       200:
 *         description: Dados processados com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/WebhookResponse'
 *             examples:
 *               sucesso_com_ocorrencias:
 *                 summary: Processamento com ocorr√™ncias
 *                 value:
 *                   success: true
 *                   message: "1 notas fiscais processadas com sucesso"
 *                   data:
 *                     processed: 1
 *                     total: 1
 *                     ocorrencias_processadas: 4
 *                     errors: []
 *                     duration_ms: 1250
 *               sucesso_sem_ocorrencias:
 *                 summary: Processamento sem ocorr√™ncias
 *                 value:
 *                   success: true
 *                   message: "1 notas fiscais processadas com sucesso"
 *                   data:
 *                     processed: 1
 *                     total: 1
 *                     ocorrencias_processadas: 0
 *                     errors: []
 *                     duration_ms: 350
 *       400:
 *         description: Dados inv√°lidos
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: "Dados inv√°lidos"
 *                 errors:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       field:
 *                         type: string
 *                       message:
 *                         type: string
 *       500:
 *         description: Erro interno do servidor
 */
router.post('/notafiscal',
  validate(webhookNotaFiscalSchema),
  controller.receiveNotaFiscal.bind(controller)
);

/**
 * @swagger
 * /api/webhook/status:
 *   get:
 *     summary: Verificar status do webhook
 *     description: Endpoint para verificar se o webhook est√° funcionando e quais recursos suporta
 *     tags: [Webhook]
 *     responses:
 *       200:
 *         description: Status do webhook
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: "Webhook ativo - suporta notas fiscais e ocorr√™ncias de tracking"
 *                 timestamp:
 *                   type: string
 *                   format: date-time
 *                   example: "2025-09-16T14:30:00.000Z"
 *                 version:
 *                   type: string
 *                   example: "1.1.0"
 *                 features:
 *                   type: array
 *                   items:
 *                     type: string
 *                   example: ["notas_fiscais", "ocorrencias_tracking", "clientes", "embarcadores", "transportadoras"]
 */
router.get('/status', (req, res) => {
  res.json({
    success: true,
    message: 'Webhook ativo - suporta notas fiscais e ocorr√™ncias de tracking',
    timestamp: new Date().toISOString(),
    version: '1.1.0',
    features: ['notas_fiscais', 'ocorrencias_tracking', 'clientes', 'embarcadores', 'transportadoras']
  });
});

// Middleware de log para todas as requisi√ß√µes do webhook
router.use((req, res, next) => {
  logger.info('Webhook request received', {
    method: req.method,
    url: req.originalUrl,
    body: req.body ? {
      notfis_count: req.body.notfis?.length || 0,
      has_ocorrencias: req.body.notfis?.some(nf => nf.ocorrencias && nf.ocorrencias.length > 0) || false,
      total_ocorrencias: req.body.notfis?.reduce((acc, nf) => acc + (nf.ocorrencias?.length || 0), 0) || 0
    } : null,
    ip: req.ip,
    userAgent: req.get('User-Agent')
  });
  next();
});

module.exports = router;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\scripts\check-files.js
================================================================================

#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Lista de arquivos obrigat√≥rios
const requiredFiles = [
  // Configura√ß√£o
  'src/config/env.js',
  'src/config/logger.js',
  
  // Database
  'src/database/connection.js',
  
  // Repositories
  'src/repositories/base.repository.js',
  'src/repositories/users.repository.js',
  'src/repositories/transportadoras.repository.js',
  
  // Controllers
  'src/controllers/base.controller.js',
  'src/controllers/auth.controller.js',
  'src/controllers/transportadoras.controller.js',
  
  // Middlewares
  'src/middlewares/auth.middleware.js',
  'src/middlewares/validate.middleware.js',
  'src/middlewares/error.middleware.js',
  
  // Routes
  'src/routes/auth.routes.js',
  'src/routes/transportadoras.routes.js',
  
  // Validations
  'src/validations/auth.validation.js',
  'src/validations/transportadoras.validation.js',
  
  // Utils
  'src/utils/constants.js',
  'src/utils/validators.js',
  
  // Principais
  'server.js',
  'package.json',
  '.env'
];

console.log('Verificando arquivos necess√°rios...\n');

let missingFiles = [];
let existingFiles = [];

requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úì ${file}`);
    existingFiles.push(file);
  } else {
    console.log(`‚úó ${file} - FALTANDO`);
    missingFiles.push(file);
  }
});

console.log('\n=== RESUMO ===');
console.log(`Arquivos encontrados: ${existingFiles.length}`);
console.log(`Arquivos faltando: ${missingFiles.length}`);

if (missingFiles.length > 0) {
  console.log('\nArquivos faltando:');
  missingFiles.forEach(file => {
    console.log(`- ${file}`);
  });
  
  console.log('\nCrie os arquivos faltando antes de continuar.');
  process.exit(1);
} else {
  console.log('\nTodos os arquivos necess√°rios est√£o presentes!');
  
  // Verificar .env
  if (fs.existsSync('.env')) {
    const envContent = fs.readFileSync('.env', 'utf8');
    const requiredEnvVars = ['DB_HOST', 'DB_NAME', 'DB_USER', 'DB_PASSWORD', 'JWT_SECRET'];
    const missingEnvVars = requiredEnvVars.filter(envVar => !envContent.includes(envVar));
    
    if (missingEnvVars.length > 0) {
      console.log('\nVari√°veis faltando no .env:');
      missingEnvVars.forEach(envVar => {
        console.log(`- ${envVar}`);
      });
    } else {
      console.log('\nTodas as vari√°veis de ambiente est√£o configuradas!');
    }
  }
}


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\scripts\control-jobs.js
================================================================================

// ==========================================
// 4. CONTROL JOBS SCRIPT (GERAL)
// ==========================================
// backend/scripts/control-jobs.js

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

const { startJobs } = require('./start-jobs');
const { stopJobs } = require('./stop-jobs');
const { getJobsStatus } = require('./status-jobs');
const logger = require('../src/config/logger');

async function controlJobs() {
  const command = process.argv[2];
  const args = process.argv.slice(3);

  switch (command) {
    case 'start':
      await startJobs();
      break;

    case 'stop':
      await stopJobs();
      break;

    case 'restart':
      logger.info('=== REINICIANDO SISTEMA DE JOBS ===');
      await stopJobs();
      await new Promise(resolve => setTimeout(resolve, 3000)); // Aguardar 3s
      await startJobs();
      break;

    case 'status':
      await getJobsStatus();
      break;

    case 'run':
      await runManualJob();
      break;

    case 'help':
    default:
      showHelp();
      break;
  }
}

async function runManualJob() {
  try {
    logger.info('=== EXECUTANDO JOB MANUAL ===');

    const axios = require('axios');
    const baseURL = process.env.BASE_URL || 'http://localhost:3001';
    const adminToken = process.env.ADMIN_TOKEN;

    if (!adminToken) {
      logger.error('‚ùå Token de admin n√£o configurado (ADMIN_TOKEN)');
      process.exit(1);
    }

    const response = await axios.post(`${baseURL}/api/jobs/run`, {}, {
      headers: { 'Authorization': `Bearer ${adminToken}` },
      timeout: 30000
    });

    if (response.data.success) {
      logger.info('‚úÖ Job manual iniciado com sucesso');
    } else {
      logger.error('‚ùå Erro ao executar job:', response.data.message);
    }

  } catch (error) {
    logger.error('‚ùå Erro ao executar job manual:', error.message);
  }
}

function showHelp() {
  console.log(`
üöÄ CONTROLE DO SISTEMA DE JOBS - ROAD-RW

Uso: npm run jobs <comando>

Comandos dispon√≠veis:
  start     - Iniciar sistema de jobs
  stop      - Parar sistema de jobs
  restart   - Reiniciar sistema de jobs
  status    - Mostrar status atual
  run       - Executar job manual
  help      - Mostrar esta ajuda

Exemplos:
  npm run jobs start
  npm run jobs:status
  ADMIN_TOKEN=seu_token npm run jobs stop

Vari√°veis de ambiente:
  BASE_URL      - URL do servidor (padr√£o: http://localhost:3001)
  ADMIN_TOKEN   - Token JWT de administrador (obrigat√≥rio)
  NODE_ENV      - Ambiente de execu√ß√£o
  LOG_LEVEL     - N√≠vel de log (info, debug, error)

Para mais informa√ß√µes, consulte a documenta√ß√£o.
`);
}

// Executar se chamado diretamente
if (require.main === module) {
  controlJobs().catch(error => {
    logger.error('Erro no controle de jobs:', error);
    process.exit(1);
  });
}

module.exports = {
  controlJobs,
  runManualJob,
  showHelp
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\scripts\health-check.js
================================================================================

// ==========================================
// SCRIPT DE HEALTH CHECK
// ==========================================
// backend/scripts/health-check.js

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

const axios = require('axios');
const Database = require('../src/database/connection');
const logger = require('../src/config/logger');

class HealthChecker {
  constructor() {
    this.baseURL = process.env.BASE_URL || 'http://localhost:3001';
    this.adminToken = process.env.ADMIN_TOKEN;
  }

  async performHealthCheck() {
    const results = {
      timestamp: new Date().toISOString(),
      status: 'unknown',
      checks: {},
      summary: {
        passed: 0,
        failed: 0,
        total: 0
      }
    };

    logger.info('=== HEALTH CHECK DO SISTEMA ===');

    // 1. Verificar banco de dados
    results.checks.database = await this.checkDatabase();
    
    // 2. Verificar API
    results.checks.api = await this.checkAPI();
    
    // 3. Verificar sistema de jobs
    results.checks.jobs = await this.checkJobsSystem();
    
    // 4. Verificar integra√ß√µes
    results.checks.integrations = await this.checkIntegrations();
    
    // 5. Verificar recursos do sistema
    results.checks.resources = await this.checkSystemResources();

    // Calcular resumo
    for (const check of Object.values(results.checks)) {
      results.summary.total++;
      if (check.status === 'healthy') {
        results.summary.passed++;
      } else {
        results.summary.failed++;
      }
    }

    // Determinar status geral
    if (results.summary.failed === 0) {
      results.status = 'healthy';
    } else if (results.summary.passed > results.summary.failed) {
      results.status = 'degraded';
    } else {
      results.status = 'unhealthy';
    }

    this.printResults(results);
    return results;
  }

  async checkDatabase() {
    try {
      const database = new Database();
      await database.connect();
      
      const result = await database.query('SELECT NOW() as current_time');
      await database.disconnect();

      return {
        status: 'healthy',
        message: 'Conex√£o com banco de dados OK',
        details: {
          timestamp: result.rows[0].current_time,
          responseTime: '< 100ms'
        }
      };

    } catch (error) {
      return {
        status: 'unhealthy',
        message: 'Erro na conex√£o com banco de dados',
        error: error.message
      };
    }
  }

  async checkAPI() {
    try {
      const startTime = Date.now();
      
      const response = await axios.get(`${this.baseURL}/api/health`, {
        timeout: 10000
      });

      const responseTime = Date.now() - startTime;

      return {
        status: 'healthy',
        message: 'API respondendo normalmente',
        details: {
          statusCode: response.status,
          responseTime: `${responseTime}ms`
        }
      };

    } catch (error) {
      return {
        status: 'unhealthy',
        message: 'API n√£o est√° respondendo',
        error: error.message
      };
    }
  }

  async checkJobsSystem() {
    try {
      if (!this.adminToken) {
        return {
          status: 'warning',
          message: 'Token de admin n√£o configurado'
        };
      }

      const response = await axios.get(`${this.baseURL}/api/jobs/status`, {
        headers: { 'Authorization': `Bearer ${this.adminToken}` },
        timeout: 10000
      });

      const { scheduler, statistics } = response.data.data;

      const isHealthy = scheduler.running && scheduler.config?.enabled;

      return {
        status: isHealthy ? 'healthy' : 'unhealthy',
        message: isHealthy ? 'Sistema de jobs funcionando' : 'Sistema de jobs com problemas',
        details: {
          running: scheduler.running,
          enabled: scheduler.config?.enabled,
          integrations_24h: statistics.total_integracoes,
          success_rate: statistics.taxa_sucesso + '%'
        }
      };

    } catch (error) {
      return {
        status: 'unhealthy',
        message: 'Sistema de jobs inacess√≠vel',
        error: error.message
      };
    }
  }

  async checkIntegrations() {
    try {
      if (!this.adminToken) {
        return {
          status: 'warning',
          message: 'Token de admin n√£o configurado'
        };
      }

      const response = await axios.get(`${this.baseURL}/api/monitoring/health`, {
        headers: { 'Authorization': `Bearer ${this.adminToken}` },
        timeout: 10000
      });

      const integrations = response.data.data;
      
      if (!integrations || integrations.length === 0) {
        return {
          status: 'warning',
          message: 'Nenhuma integra√ß√£o configurada'
        };
      }

      const healthy = integrations.filter(i => i.status_saude === 'SAUDAVEL').length;
      const total = integrations.length;
      const healthyPercentage = Math.round((healthy / total) * 100);

      return {
        status: healthyPercentage >= 80 ? 'healthy' : healthyPercentage >= 50 ? 'degraded' : 'unhealthy',
        message: `${healthy}/${total} integra√ß√µes saud√°veis (${healthyPercentage}%)`,
        details: {
          total_integrations: total,
          healthy: healthy,
          percentage: healthyPercentage
        }
      };

    } catch (error) {
      return {
        status: 'unhealthy',
        message: 'Erro ao verificar integra√ß√µes',
        error: error.message
      };
    }
  }

  async checkSystemResources() {
    try {
      const memUsage = process.memoryUsage();
      const uptime = process.uptime();

      const memUsedMB = Math.round(memUsage.heapUsed / 1024 / 1024);
      const memTotalMB = Math.round(memUsage.heapTotal / 1024 / 1024);
      const memUsagePercent = Math.round((memUsedMB / memTotalMB) * 100);

      const uptimeHours = Math.round(uptime / 3600);

      let status = 'healthy';
      if (memUsagePercent > 90) {
        status = 'unhealthy';
      } else if (memUsagePercent > 80) {
        status = 'warning';
      }

      return {
        status,
        message: `Recursos do sistema OK (Mem: ${memUsagePercent}%)`,
        details: {
          memory: {
            used: `${memUsedMB}MB`,
            total: `${memTotalMB}MB`,
            percentage: `${memUsagePercent}%`
          },
          uptime: `${uptimeHours}h`,
          node_version: process.version
        }
      };

    } catch (error) {
      return {
        status: 'unhealthy',
        message: 'Erro ao verificar recursos',
        error: error.message
      };
    }
  }

  printResults(results) {
    const statusIcon = {
      'healthy': '‚úÖ',
      'degraded': '‚ö†Ô∏è',
      'unhealthy': '‚ùå',
      'warning': '‚ö†Ô∏è',
      'unknown': '‚ùì'
    };

    logger.info(`Status Geral: ${statusIcon[results.status]} ${results.status.toUpperCase()}`);
    logger.info(`Resumo: ${results.summary.passed}/${results.summary.total} verifica√ß√µes passaram`);
    logger.info('');

    for (const [name, check] of Object.entries(results.checks)) {
      const icon = statusIcon[check.status] || '‚ùì';
      logger.info(`${icon} ${name}: ${check.message}`);
      
      if (check.details) {
        Object.entries(check.details).forEach(([key, value]) => {
          logger.info(`   - ${key}: ${value}`);
        });
      }
      
      if (check.error) {
        logger.info(`   - Erro: ${check.error}`);
      }
    }

    logger.info('');
    logger.info(`Health check conclu√≠do em: ${results.timestamp}`);
  }
}

async function runHealthCheck() {
  const checker = new HealthChecker();
  const results = await checker.performHealthCheck();
  
  // Exit code baseado no resultado
  if (results.status === 'unhealthy') {
    process.exit(1);
  } else if (results.status === 'degraded') {
    process.exit(2);
  } else {
    process.exit(0);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runHealthCheck().catch(error => {
    logger.error('Erro no health check:', error);
    process.exit(1);
  });
}

module.exports = { HealthChecker, runHealthCheck };



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\scripts\jobs-daemon.js
================================================================================

// ==========================================
// 5. DAEMON SCRIPT (PRODU√á√ÉO)
// ==========================================
// backend/scripts/jobs-daemon.js

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

const fs = require('fs');
const { spawn } = require('child_process');
const logger = require('../src/config/logger');

class JobsDaemon {
  constructor() {
    this.pidFile = path.join(__dirname, '../jobs.pid');
    this.logFile = path.join(__dirname, '../logs/jobs-daemon.log');
    this.child = null;
    this.isRunning = false;
  }

  async start() {
    try {
      // Verificar se j√° est√° rodando
      if (this.isAlreadyRunning()) {
        logger.info('Jobs daemon j√° est√° rodando');
        return;
      }

      logger.info('Iniciando jobs daemon...');

      // Criar processo filho
      this.child = spawn('node', [path.join(__dirname, 'start-jobs.js')], {
        detached: true,
        stdio: ['ignore', 'ignore', 'ignore']
      });

      // Salvar PID
      fs.writeFileSync(this.pidFile, this.child.pid.toString());

      // Desanexar do processo pai
      this.child.unref();

      this.isRunning = true;
      logger.info(`Jobs daemon iniciado com PID ${this.child.pid}`);

    } catch (error) {
      logger.error('Erro ao iniciar daemon:', error);
      throw error;
    }
  }

  async stop() {
    try {
      if (!this.isAlreadyRunning()) {
        logger.info('Jobs daemon n√£o est√° rodando');
        return;
      }

      const pid = this.getPid();
      
      if (pid) {
        process.kill(pid, 'SIGTERM');
        
        // Aguardar processo parar
        let attempts = 0;
        while (attempts < 10 && this.isProcessRunning(pid)) {
          await new Promise(resolve => setTimeout(resolve, 1000));
          attempts++;
        }

        // For√ßar parada se necess√°rio
        if (this.isProcessRunning(pid)) {
          process.kill(pid, 'SIGKILL');
        }

        // Remover arquivo PID
        if (fs.existsSync(this.pidFile)) {
          fs.unlinkSync(this.pidFile);
        }

        logger.info('Jobs daemon parado');
      }

    } catch (error) {
      logger.error('Erro ao parar daemon:', error);
      throw error;
    }
  }

  getStatus() {
    const isRunning = this.isAlreadyRunning();
    const pid = this.getPid();

    return {
      running: isRunning,
      pid: pid,
      pidFile: this.pidFile,
      logFile: this.logFile
    };
  }

  isAlreadyRunning() {
    try {
      if (!fs.existsSync(this.pidFile)) {
        return false;
      }

      const pid = this.getPid();
      return pid && this.isProcessRunning(pid);

    } catch (error) {
      return false;
    }
  }

  getPid() {
    try {
      if (fs.existsSync(this.pidFile)) {
        const pid = parseInt(fs.readFileSync(this.pidFile, 'utf8'));
        return isNaN(pid) ? null : pid;
      }
      return null;
    } catch (error) {
      return null;
    }
  }

  isProcessRunning(pid) {
    try {
      process.kill(pid, 0);
      return true;
    } catch (error) {
      return false;
    }
  }
}

// Controle do daemon
async function daemonControl() {
  const daemon = new JobsDaemon();
  const command = process.argv[2];

  switch (command) {
    case 'start':
      await daemon.start();
      break;

    case 'stop':
      await daemon.stop();
      break;

    case 'restart':
      await daemon.stop();
      await new Promise(resolve => setTimeout(resolve, 2000));
      await daemon.start();
      break;

    case 'status':
      const status = daemon.getStatus();
      console.log('Daemon Status:', status);
      break;

    default:
      console.log(`
Uso: node jobs-daemon.js <comando>

Comandos:
  start   - Iniciar daemon
  stop    - Parar daemon
  restart - Reiniciar daemon
  status  - Status do daemon
`);
      break;
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  daemonControl().catch(error => {
    logger.error('Erro no daemon:', error);
    process.exit(1);
  });
}

module.exports = { JobsDaemon, daemonControl };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\scripts\maintenance.js
================================================================================

// ==========================================
// 6. EXEMPLO DE SCRIPT DE MANUTEN√á√ÉO
// ==========================================
// scripts/maintenance.js

const Database = require('../src/database/connection');
const logger = require('../src/config/logger');

async function maintenanceTasks() {
  const database = new Database();
  
  try {
    await database.connect();
    logger.info('Iniciando tarefas de manuten√ß√£o...');

    // 1. Limpar logs antigos
    await cleanOldLogs(database);
    
    // 2. Reprocessar NFs com erro
    await reprocessErrorNFs(database);
    
    // 3. Atualizar estat√≠sticas
    await updateStatistics(database);
    
    logger.info('Tarefas de manuten√ß√£o conclu√≠das');
    
  } catch (error) {
    logger.error('Erro nas tarefas de manuten√ß√£o:', error);
  } finally {
    await database.disconnect();
  }
}

async function cleanOldLogs(database) {
  const query = `
    DELETE FROM log_integracaos 
    WHERE created_at < NOW() - INTERVAL '30 days'
  `;
  
  const result = await database.query(query);
  logger.info(`${result.rowCount} logs antigos removidos`);
}

async function reprocessErrorNFs(database) {
  const query = `
    UPDATE notas_fiscais 
    SET status_api = NULL 
    WHERE status_api = 'erro' 
      AND updated_at < NOW() - INTERVAL '1 hour'
  `;
  
  const result = await database.query(query);
  logger.info(`${result.rowCount} NFs marcadas para reprocessamento`);
}

async function updateStatistics(database) {
  // Implementar cache de estat√≠sticas se necess√°rio
  logger.info('Estat√≠sticas atualizadas');
}

// Executar se chamado diretamente
if (require.main === module) {
  maintenanceTasks();
}

module.exports = { maintenanceTasks };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\scripts\setup-jobs.js
================================================================================

// ==========================================
// 5. SCRIPT DE SETUP COMPLETO
// ==========================================
// backend/scripts/setup-jobs.js

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../../.env') });

const db = require('../database/connection'); // m√≥dulo com query/testConnection/close
const JobManagerService = require('../services/jobs/job-manager.service');
const logger = require('../config/logger');

async function setupJobs() {
  const database = db;
  let jobManager = null;

  try {
    logger.info('=== SETUP DO SISTEMA DE JOBS ===');

    // 1. Testar conex√£o (o pool conecta on-demand)
    await database.testConnection();
    logger.info('‚úì Conex√£o com banco estabelecida');

    // 2. Executar seeds
    logger.info('‚úì Configura√ß√µes iniciais criadas');

    // 3. Testar inicializa√ß√£o do sistema
    jobManager = new JobManagerService(database);
    await jobManager.initialize();
    logger.info('‚úì Sistema de jobs inicializado');

    // 4. Testar funcionamento b√°sico
    const scheduler = jobManager.getScheduler();
    const status = scheduler.getStatus();
    logger.info('‚úì Status do scheduler:', status);

    // 5. Aguardar um pouco para verificar se o scheduler est√° funcionando
    logger.info('Aguardando 5 segundos para verifica√ß√£o do scheduler...');
    await new Promise(resolve => setTimeout(resolve, 5000));

    // 6. Parar sistema ANTES de fechar a conex√£o
    await jobManager.shutdown();
    logger.info('‚úì Sistema finalizado corretamente');

    logger.info('=== SETUP CONCLU√çDO COM SUCESSO ===');

  } catch (error) {
    logger.error('‚ùå Erro no setup:', error);
    
    // Tentar parar o jobManager se existir, mesmo em caso de erro
    if (jobManager) {
      try {
        await jobManager.shutdown();
      } catch (shutdownError) {
        logger.warn('Erro ao parar sistema durante cleanup:', shutdownError);
      }
    }
    
    process.exit(1);
  } finally {
    // Fechar conex√£o apenas ap√≥s garantir que tudo foi parado
    if (database) {
      try {
        await database.close();
        logger.info('‚úì Conex√£o com banco fechada');
      } catch (closeError) {
        logger.warn('Erro ao fechar conex√£o com banco:', closeError);
      }
    }
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  setupJobs();
}

module.exports = { setupJobs };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\scripts\setup.js
================================================================================

#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const bcrypt = require('bcryptjs');

// Cores para output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

const log = (message, color = 'reset') => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

// Fun√ß√£o para criar diret√≥rios necess√°rios
const createDirectories = () => {
  const directories = [
    'logs',
    'uploads',
    'uploads/images',
    'uploads/documents',
    'uploads/temp'
  ];

  log('üìÅ Criando diret√≥rios necess√°rios...', 'blue');
  
  directories.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      log(`  ‚úì Criado: ${dir}`, 'green');
    } else {
      log(`  - J√° existe: ${dir}`, 'yellow');
    }
  });
};

// Fun√ß√£o para verificar arquivo .env
const checkEnvFile = () => {
  log('üîß Verificando arquivo .env...', 'blue');
  
  if (!fs.existsSync('.env')) {
    log('  ‚ö†Ô∏è  Arquivo .env n√£o encontrado', 'yellow');
    
    if (fs.existsSync('.env.example')) {
      fs.copyFileSync('.env.example', '.env');
      log('  ‚úì Arquivo .env criado a partir do .env.example', 'green');
      log('  ‚ö†Ô∏è  CONFIGURE as vari√°veis no arquivo .env antes de continuar!', 'yellow');
    } else {
      log('  ‚ùå Arquivo .env.example n√£o encontrado', 'red');
      return false;
    }
  } else {
    log('  ‚úì Arquivo .env encontrado', 'green');
  }
  
  return true;
};

// Fun√ß√£o para testar conex√£o com banco
const testDatabase = () => {
  return new Promise((resolve, reject) => {
    log('üóÑÔ∏è  Testando conex√£o com banco de dados...', 'blue');
    
    try {
      const db = require('../src/database/connection');
      
      db.testConnection()
        .then((connected) => {
          if (connected) {
            log('  ‚úì Conex√£o com banco estabelecida', 'green');
            resolve(true);
          } else {
            log('  ‚ùå Falha na conex√£o com banco', 'red');
            resolve(false);
          }
        })
        .catch((error) => {
          log(`  ‚ùå Erro na conex√£o: ${error.message}`, 'red');
          resolve(false);
        });
    } catch (error) {
      log(`  ‚ùå Erro ao testar conex√£o: ${error.message}`, 'red');
      resolve(false);
    }
  });
};

// Fun√ß√£o para criar usu√°rio administrador inicial
const createAdminUser = async () => {
  log('üë§ Criando usu√°rio administrador...', 'blue');
  
  try {
    const UsersRepository = require('../src/repositories/users.repository');
    const repository = new UsersRepository();
    
    // Verificar se j√° existe admin
    const existingAdmin = await repository.findByEmail('admin@roadrw.com');
    
    if (existingAdmin) {
      log('  - Usu√°rio admin j√° existe', 'yellow');
      return true;
    }
    
    // Criar usu√°rio admin
    const hashedPassword = await bcrypt.hash('admin123', 12);
    
    const adminUser = await repository.create({
      name: 'Administrador',
      email: 'admin@roadrw.com',
      password: hashedPassword
    });
    
    log('  ‚úì Usu√°rio administrador criado:', 'green');
    log(`    Email: admin@roadrw.com`, 'green');
    log(`    Senha: admin123`, 'green');
    log(`    ‚ö†Ô∏è  ALTERE a senha ap√≥s o primeiro login!`, 'yellow');
    
    return true;
  } catch (error) {
    log(`  ‚ùå Erro ao criar usu√°rio: ${error.message}`, 'red');
    return false;
  }
};

// Fun√ß√£o para instalar depend√™ncias
const installDependencies = () => {
  return new Promise((resolve) => {
    log('üì¶ Verificando depend√™ncias...', 'blue');
    
    if (!fs.existsSync('node_modules')) {
      log('  üì• Instalando depend√™ncias...', 'blue');
      
      exec('npm install', (error, stdout, stderr) => {
        if (error) {
          log(`  ‚ùå Erro na instala√ß√£o: ${error.message}`, 'red');
          resolve(false);
        } else {
          log('  ‚úì Depend√™ncias instaladas', 'green');
          resolve(true);
        }
      });
    } else {
      log('  ‚úì Depend√™ncias j√° instaladas', 'green');
      resolve(true);
    }
  });
};

// Fun√ß√£o para verificar se PostgreSQL est√° rodando
const checkPostgreSQL = () => {
  return new Promise((resolve) => {
    log('üêò Verificando PostgreSQL...', 'blue');
    
    exec('pg_isready', (error, stdout, stderr) => {
      if (error) {
        log('  ‚ö†Ô∏è  PostgreSQL pode n√£o estar rodando', 'yellow');
        log('    Certifique-se de que o PostgreSQL est√° instalado e ativo', 'yellow');
        resolve(false);
      } else {
        log('  ‚úì PostgreSQL est√° rodando', 'green');
        resolve(true);
      }
    });
  });
};

// Fun√ß√£o para criar banco de dados se n√£o existir
const createDatabase = () => {
  return new Promise((resolve) => {
    log('üèóÔ∏è  Verificando banco de dados...', 'blue');
    
    const dbName = process.env.DB_NAME || 'road_rw';
    const dbUser = process.env.DB_USER || 'postgres';
    
    exec(`psql -U ${dbUser} -lqt | cut -d \\| -f 1 | grep -qw ${dbName}`, (error) => {
      if (error) {
        log(`  üìä Criando banco ${dbName}...`, 'blue');
        
        exec(`createdb -U ${dbUser} ${dbName}`, (createError) => {
          if (createError) {
            log(`  ‚ùå Erro ao criar banco: ${createError.message}`, 'red');
            resolve(false);
          } else {
            log(`  ‚úì Banco ${dbName} criado`, 'green');
            resolve(true);
          }
        });
      } else {
        log(`  ‚úì Banco ${dbName} j√° existe`, 'green');
        resolve(true);
      }
    });
  });
};

// Fun√ß√£o principal
const main = async () => {
  console.log('');
  log('üöÄ ROAD-RW Backend Setup', 'blue');
  log('================================', 'blue');
  console.log('');
  
  // Verificar e instalar depend√™ncias
  const depsInstalled = await installDependencies();
  if (!depsInstalled) {
    log('‚ùå Falha na instala√ß√£o de depend√™ncias', 'red');
    process.exit(1);
  }
  
  // Criar diret√≥rios
  createDirectories();
  
  // Verificar arquivo .env
  const envExists = checkEnvFile();
  if (!envExists) {
    log('‚ùå Configure o arquivo .env antes de continuar', 'red');
    process.exit(1);
  }
  
  // Carregar vari√°veis de ambiente
  require('dotenv').config();
  
  // Verificar PostgreSQL
  const pgRunning = await checkPostgreSQL();
  
  // Criar banco se necess√°rio
  if (pgRunning) {
    await createDatabase();
  }
  
  // Testar conex√£o com banco
  const dbConnected = await testDatabase();
  
  // Criar usu√°rio admin
  if (dbConnected) {
    await createAdminUser();
  }
  
  console.log('');
  log('‚úÖ Setup conclu√≠do!', 'green');
  log('================', 'green');
  console.log('');
  
  if (dbConnected) {
    log('Para iniciar o servidor:', 'blue');
    log('  npm run dev    # Desenvolvimento', 'blue');
    log('  npm start      # Produ√ß√£o', 'blue');
    console.log('');
    log('Health check: http://localhost:3001/health', 'blue');
    log('API Base: http://localhost:3001/api', 'blue');
  } else {
    log('‚ö†Ô∏è  Configure o banco de dados antes de iniciar', 'yellow');
  }
  
  console.log('');
};

// Executar setup
if (require.main === module) {
  main().catch((error) => {
    log(`‚ùå Erro no setup: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = { main };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\scripts\start-jobs.js
================================================================================


// ==========================================
// 1. START JOBS SCRIPT
// ==========================================
// backend/scripts/start-jobs.js

const path = require('path');

require('dotenv').config({ path: path.join(__dirname, '../../.env') });
const db = require('../database/connection');
const JobManagerService = require('../services/jobs/job-manager.service');
const logger = require('../config/logger');


class JobsManager {
  constructor() {
    this.database = db;
    this.jobManager = null;
    this.isRunning = false;
  }

  async start() {
    try {
      logger.info('=== INICIANDO SISTEMA DE JOBS ===');

      // 1. Conectar ao banco
      await this.database.testConnection();
      logger.info('‚úì Conex√£o com banco estabelecida');

      // 2. Inicializar sistema de jobs
      this.jobManager = new JobManagerService(this.database);
      await this.jobManager.initialize();
      logger.info('‚úì Sistema de jobs inicializado');

      // 3. Marcar como rodando
      this.isRunning = true;

      // 4. Obter status inicial
      const scheduler = this.jobManager.getScheduler();
      const status = scheduler.getStatus();
      
      logger.info('‚úì Status do scheduler:', {
        enabled: status.config?.enabled,
        pollInterval: status.config?.poll_interval,
        scheduledJobs: status.scheduledJobs
      });

      logger.info('=== SISTEMA DE JOBS INICIADO COM SUCESSO ===');
      logger.info('Pressione Ctrl+C para parar o sistema');

      // 5. Configurar handlers de finaliza√ß√£o
      this.setupShutdownHandlers();

      // 6. Manter processo ativo
      this.keepAlive();

    } catch (error) {
      logger.error('‚ùå Erro ao iniciar sistema de jobs:', error);
      await this.stop();
      process.exit(1);
    }
  }

  async stop() {
    if (!this.isRunning) {
      logger.info('Sistema j√° est√° parado');
      return;
    }

    try {
      logger.info('=== PARANDO SISTEMA DE JOBS ===');

      if (this.jobManager) {
        await this.jobManager.shutdown();
        logger.info('‚úì Sistema de jobs finalizado');
      }

      if (this.database) {
        await this.database.disconnect();
        logger.info('‚úì Conex√£o com banco fechada');
      }

      this.isRunning = false;
      logger.info('=== SISTEMA PARADO COM SUCESSO ===');

    } catch (error) {
      logger.error('‚ùå Erro ao parar sistema:', error);
    }
  }

  async getStatus() {
    if (!this.isRunning || !this.jobManager) {
      return { running: false, message: 'Sistema n√£o est√° rodando' };
    }

    try {
      const scheduler = this.jobManager.getScheduler();
      const repositories = this.jobManager.getRepositories();
      
      const status = scheduler.getStatus();
      const stats = await repositories.jobs.getJobStats();
      const systemStatus = this.jobManager.getSystemStatus();

      return {
        running: true,
        system: systemStatus,
        scheduler: status,
        statistics: stats,
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      logger.error('Erro ao obter status:', error);
      return { 
        running: true, 
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  setupShutdownHandlers() {
    // Finaliza√ß√£o graceful
    const gracefulShutdown = async (signal) => {
      logger.info(`Recebido sinal ${signal}, iniciando finaliza√ß√£o graceful...`);
      await this.stop();
      process.exit(0);
    };

    process.on('SIGINT', () => gracefulShutdown('SIGINT'));
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    
    // Handler para erros n√£o capturados
    process.on('uncaughtException', async (error) => {
      logger.error('Erro n√£o capturado:', error);
      await this.stop();
      process.exit(1);
    });

    process.on('unhandledRejection', async (reason, promise) => {
      logger.error('Promise rejeitada n√£o tratada:', { reason, promise });
      await this.stop();
      process.exit(1);
    });
  }

  keepAlive() {
    // Manter processo ativo e imprimir status periodicamente
    setInterval(async () => {
      try {
        const status = await this.getStatus();
        
        logger.info('Status peri√≥dico:', {
          running: status.running,
          uptime: Math.floor(status.uptime / 60) + ' min',
          memoryUsage: Math.floor(status.memory?.heapUsed / 1024 / 1024) + ' MB'
        });

        // Verificar sa√∫de do sistema
        if (status.scheduler && !status.scheduler.running) {
          logger.warn('‚ö†Ô∏è  Scheduler n√£o est√° rodando!');
        }

      } catch (error) {
        logger.error('Erro no status peri√≥dico:', error);
      }
    }, 5 * 60 * 1000); // A cada 5 minutos
  }
}

// Fun√ß√£o principal
async function startJobs() {
  const manager = new JobsManager();
  await manager.start();
}

// Executar se chamado diretamente
if (require.main === module) {
  startJobs();
}

module.exports = { JobsManager, startJobs };



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\scripts\status-jobs.js
================================================================================


// ==========================================
// 3. STATUS JOBS SCRIPT
// ==========================================
// backend/scripts/status-jobs.js

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

const axios = require('axios');
const logger = require('../src/config/logger');

async function getJobsStatus() {
  try {
    logger.info('=== STATUS DO SISTEMA DE JOBS ===');

    const baseURL = process.env.BASE_URL || 'http://localhost:3001';
    const adminToken = process.env.ADMIN_TOKEN;

    if (!adminToken) {
      logger.error('‚ùå Token de admin n√£o configurado (ADMIN_TOKEN)');
      process.exit(1);
    }

    // 1. Obter status geral
    try {
      const statusResponse = await axios.get(`${baseURL}/api/jobs/status`, {
        headers: { 'Authorization': `Bearer ${adminToken}` },
        timeout: 10000
      });

      const { scheduler, statistics } = statusResponse.data.data;

      logger.info('üìä STATUS GERAL:');
      logger.info(`  ‚Ä¢ Sistema: ${scheduler.running ? '‚úÖ RODANDO' : '‚ùå PARADO'}`);
      logger.info(`  ‚Ä¢ Configura√ß√£o: ${scheduler.config?.enabled ? 'Habilitada' : 'Desabilitada'}`);
      logger.info(`  ‚Ä¢ Intervalo: ${scheduler.config?.poll_interval || 'N/A'}s`);
      logger.info(`  ‚Ä¢ Jobs agendados: ${scheduler.scheduledJobs?.length || 0}`);

      logger.info('üìà ESTAT√çSTICAS (24h):');
      logger.info(`  ‚Ä¢ Total integra√ß√µes: ${statistics.total_integracoes || 0}`);
      logger.info(`  ‚Ä¢ Conclu√≠das: ${statistics.concluidas || 0}`);
      logger.info(`  ‚Ä¢ Em andamento: ${statistics.em_andamento || 0}`);
      logger.info(`  ‚Ä¢ NFs processadas: ${statistics.total_nfs_processadas || 0}`);
      logger.info(`  ‚Ä¢ Taxa de sucesso: ${statistics.taxa_sucesso || 0}%`);
      logger.info(`  ‚Ä¢ Tempo m√©dio: ${Math.round(statistics.tempo_medio_segundos || 0)}s`);

      if (scheduler.queueStatus) {
        const queues = Object.keys(scheduler.queueStatus);
        if (queues.length > 0) {
          logger.info('üîÑ FILAS ATIVAS:');
          queues.forEach(queueName => {
            const queue = scheduler.queueStatus[queueName];
            logger.info(`  ‚Ä¢ ${queueName}: ${queue.size} jobs (${queue.processing ? 'processando' : 'parado'})`);
          });
        }
      }

    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        logger.info('‚ùå SISTEMA PARADO (servidor n√£o responde)');
        return;
      }
      
      if (error.response?.status === 401) {
        logger.error('‚ùå Token inv√°lido ou expirado');
        return;
      }

      throw error;
    }

    // 2. Obter sa√∫de das integra√ß√µes
    try {
      const healthResponse = await axios.get(`${baseURL}/api/monitoring/health`, {
        headers: { 'Authorization': `Bearer ${adminToken}` },
        timeout: 10000
      });

      const healthData = healthResponse.data.data;

      if (healthData && healthData.length > 0) {
        logger.info('üè• SA√öDE DAS INTEGRA√á√ïES:');
        healthData.forEach(item => {
          const icon = {
            'SAUDAVEL': '‚úÖ',
            'ALERTA': '‚ö†Ô∏è',
            'CRITICO': '‚ùå',
            'INATIVO': '‚è∏Ô∏è'
          }[item.status_saude] || '‚ùì';

          logger.info(`  ‚Ä¢ ${item.nome} (${item.integracao_ocorrencia}): ${icon} ${item.status_saude}`);
          if (item.nfs_pendentes > 0) {
            logger.info(`    - NFs pendentes: ${item.nfs_pendentes}`);
          }
          if (item.erros_recentes > 0) {
            logger.info(`    - Erros recentes: ${item.erros_recentes}`);
          }
        });
      }

    } catch (error) {
      logger.warn('‚ö†Ô∏è Erro ao obter sa√∫de das integra√ß√µes:', error.response?.data?.message || error.message);
    }

    // 3. Obter alertas ativos
    try {
      const alertsResponse = await axios.get(`${baseURL}/api/monitoring/alerts`, {
        headers: { 'Authorization': `Bearer ${adminToken}` },
        timeout: 10000
      });

      const alerts = alertsResponse.data.data;

      if (alerts && alerts.length > 0) {
        logger.info('üö® ALERTAS ATIVOS:');
        alerts.forEach(alert => {
          const icon = alert.severidade === 'ALTO' ? '‚ùå' : '‚ö†Ô∏è';
          logger.info(`  ${icon} ${alert.titulo}`);
          logger.info(`    - ${alert.descricao}`);
        });
      } else {
        logger.info('‚úÖ Nenhum alerta ativo');
      }

    } catch (error) {
      logger.warn('‚ö†Ô∏è Erro ao obter alertas:', error.response?.data?.message || error.message);
    }

  } catch (error) {
    logger.error('‚ùå Erro ao obter status:', error.message);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  getJobsStatus();
}

module.exports = { getJobsStatus };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\scripts\stop-jobs.js
================================================================================

// ==========================================
// 2. STOP JOBS SCRIPT
// ==========================================
// backend/scripts/stop-jobs.js

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

const axios = require('axios');
const logger = require('../src/config/logger');

async function stopJobs() {
  try {
    logger.info('=== PARANDO SISTEMA DE JOBS ===');

    const baseURL = process.env.BASE_URL || 'http://localhost:3001';
    const adminToken = process.env.ADMIN_TOKEN;

    if (!adminToken) {
      logger.error('‚ùå Token de admin n√£o configurado (ADMIN_TOKEN)');
      logger.info('Configure a vari√°vel ADMIN_TOKEN no .env ou execute:');
      logger.info('ADMIN_TOKEN=seu_jwt_token npm run jobs:stop');
      process.exit(1);
    }

    // 1. Verificar status atual
    logger.info('Verificando status atual...');
    
    try {
      const statusResponse = await axios.get(`${baseURL}/api/jobs/status`, {
        headers: { 'Authorization': `Bearer ${adminToken}` },
        timeout: 10000
      });

      const status = statusResponse.data.data;
      
      if (!status.scheduler.running) {
        logger.info('‚úì Sistema j√° est√° parado');
        return;
      }

      logger.info('Sistema est√° rodando, enviando comando de parada...');

    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        logger.info('‚úì Servidor n√£o est√° rodando');
        return;
      }
      
      logger.warn('Erro ao verificar status, tentando parar mesmo assim...');
    }

    // 2. Enviar comando de parada
    try {
      const stopResponse = await axios.post(`${baseURL}/api/jobs/stop`, {}, {
        headers: { 'Authorization': `Bearer ${adminToken}` },
        timeout: 30000
      });

      if (stopResponse.data.success) {
        logger.info('‚úì Comando de parada enviado com sucesso');
      } else {
        logger.warn('‚ö†Ô∏è Resposta inesperada:', stopResponse.data.message);
      }

    } catch (error) {
      if (error.response?.status === 401) {
        logger.error('‚ùå Token inv√°lido ou expirado');
      } else {
        logger.error('‚ùå Erro ao enviar comando de parada:', error.message);
      }
      throw error;
    }

    // 3. Aguardar confirma√ß√£o
    logger.info('Aguardando sistema parar...');
    
    let attempts = 0;
    const maxAttempts = 10;
    
    while (attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 2000));
      attempts++;

      try {
        const checkResponse = await axios.get(`${baseURL}/api/jobs/status`, {
          headers: { 'Authorization': `Bearer ${adminToken}` },
          timeout: 5000
        });

        const status = checkResponse.data.data;
        
        if (!status.scheduler.running) {
          logger.info('‚úì Sistema parado com sucesso');
          break;
        }

        logger.info(`Tentativa ${attempts}/${maxAttempts}: Sistema ainda est√° rodando...`);

      } catch (error) {
        if (error.code === 'ECONNREFUSED') {
          logger.info('‚úì Sistema parado (servidor n√£o responde)');
          break;
        }
        
        logger.warn(`Tentativa ${attempts}/${maxAttempts}: Erro ao verificar status`);
      }
    }

    if (attempts >= maxAttempts) {
      logger.warn('‚ö†Ô∏è Sistema pode ainda estar rodando ap√≥s timeout');
      logger.info('Verifique manualmente ou force a parada');
    }

    logger.info('=== COMANDO DE PARADA CONCLU√çDO ===');

  } catch (error) {
    logger.error('‚ùå Erro ao parar sistema:', error.message);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  stopJobs();
}

module.exports = { stopJobs };



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\api.js
================================================================================

import axios from 'axios';
import config from '../../../frontend/src/config/api.js';

// Criar inst√¢ncia do axios com configura√ß√£o centralizada
const api = axios.create({
  baseURL: config.baseURL,
  timeout: config.timeout,
  headers: config.headers
});

// Interceptador para requests (adicionar token, logs, etc.)
api.interceptors.request.use(
  (config) => {
    // Adicionar token de autoriza√ß√£o se existir
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    console.log(`üåê API Request: ${config.method?.toUpperCase()} ${config.url}`);
    return config;
  },
  (error) => {
    console.error('‚ùå Request Error:', error);
    return Promise.reject(error);
  }
);

// Interceptador para responses
api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Response: ${response.status} - ${response.config.url}`);
    return response;
  },
  (error) => {
    console.error(`‚ùå API Error: ${error.response?.status} - ${error.config?.url}`);
    
    // Tratamento global de erros
    if (error.response?.status === 401) {
      // Token expirado - redirecionar para login
      localStorage.removeItem('authToken');
      window.location.href = '/login';
    }
    
    return Promise.reject(error);
  }
);

export default api;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\auth.service.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\base-integration.service.test.js
================================================================================

// ==========================================
// 1. TESTES UNIT√ÅRIOS - BASE INTEGRATION SERVICE
// ==========================================
// backend/tests/services/base-integration.service.test.js

const BaseIntegrationService = require('../../src/services/integrations/base-integration.service');

describe('BaseIntegrationService', () => {
  let service;

  beforeEach(() => {
    service = new (class TestIntegration extends BaseIntegrationService {
      async consultarAPI(numeroNF, config) {
        if (numeroNF === 'ERRO') {
          throw new Error('API Error');
        }
        return { success: true, numeroNF };
      }

      parseResponse(response, numeroNF) {
        return [{
          nro_nf: parseInt(numeroNF),
          codigo: 1,
          descricao: 'Teste',
          dataHoraEvento: new Date()
        }];
      }
    })({ name: 'test' });
  });

  describe('Circuit Breaker', () => {
    test('deve iniciar como CLOSED', () => {
      expect(service.circuitState).toBe('CLOSED');
      expect(service.isRequestAllowed()).toBe(true);
    });

    test('deve abrir circuito ap√≥s falhas consecutivas', async () => {
      service.failureThreshold = 2;

      // Primeira falha
      try {
        await service.consultar('ERRO', {});
      } catch (error) {
        // Esperado
      }

      expect(service.circuitState).toBe('CLOSED');
      expect(service.failureCount).toBe(1);

      // Segunda falha - deve abrir circuito
      try {
        await service.consultar('ERRO', {});
      } catch (error) {
        // Esperado
      }

      expect(service.circuitState).toBe('OPEN');
      expect(service.isRequestAllowed()).toBe(false);
    });

    test('deve resetar circuito ap√≥s sucesso', async () => {
      service.circuitState = 'HALF_OPEN';
      
      const result = await service.consultar('123', {});
      
      expect(result.success).toBe(true);
      expect(service.circuitState).toBe('CLOSED');
      expect(service.failureCount).toBe(0);
    });
  });

  describe('Retry Logic', () => {
    test('deve fazer retry em caso de erro', async () => {
      const mockFn = jest.fn()
        .mockRejectedValueOnce(new Error('Temp error'))
        .mockResolvedValueOnce({ success: true });

      const result = await service.retryRequest(mockFn, 2);
      
      expect(mockFn).toHaveBeenCalledTimes(2);
      expect(result.success).toBe(true);
    });

    test('deve falhar ap√≥s esgotar tentativas', async () => {
      const mockFn = jest.fn()
        .mockRejectedValue(new Error('Persistent error'));

      await expect(service.retryRequest(mockFn, 2))
        .rejects.toThrow('Persistent error');
      
      expect(mockFn).toHaveBeenCalledTimes(2);
    });
  });

  describe('Rate Limiting', () => {
    test('deve permitir requests dentro do limite', async () => {
      service.rateLimitRequests = 2;
      service.requestCount = 1;

      const allowed = await service.checkRateLimit();
      expect(allowed).toBe(true);
      expect(service.requestCount).toBe(2);
    });

    test('deve bloquear requests acima do limite', async () => {
      service.rateLimitRequests = 1;
      service.requestCount = 1;

      await expect(service.checkRateLimit())
        .rejects.toThrow('Rate limit excedido');
    });
  });
});

// ==========================================
// 2. TESTES - JOB QUEUE SERVICE
// ==========================================
// backend/tests/services/job-queue.service.test.js

const JobQueueService = require('../../src/services/jobs/job-queue.service');

describe('JobQueueService', () => {
  let queueService;

  beforeEach(() => {
    queueService = new JobQueueService();
  });

  describe('Queue Management', () => {
    test('deve criar fila para transportadora', () => {
      const queueName = queueService.createQueue(1);
      
      expect(queueName).toBe('transportadora_1');
      expect(queueService.queues.has(queueName)).toBe(true);
      expect(queueService.processing.get(queueName)).toBe(false);
    });

    test('deve adicionar job na fila', async () => {
      const jobId = await queueService.addJob(1, {
        numeroNF: '123',
        transportadora: { nome: 'Teste' }
      });

      expect(jobId).toBeDefined();
      
      const queue = queueService.queues.get('transportadora_1');
      expect(queue).toHaveLength(1);
      expect(queue[0].data.numeroNF).toBe('123');
    });

    test('deve limpar fila', () => {
      queueService.createQueue(1);
      queueService.queues.get('transportadora_1').push({ id: 1 });
      
      const cleared = queueService.clearQueue(1);
      
      expect(cleared).toBe(1);
      expect(queueService.queues.get('transportadora_1')).toHaveLength(0);
    });
  });

  describe('Status Monitoring', () => {
    test('deve retornar status das filas', () => {
      queueService.createQueue(1);
      queueService.createQueue(2);
      
      const status = queueService.getQueueStatus();
      
      expect(status).toHaveProperty('transportadora_1');
      expect(status).toHaveProperty('transportadora_2');
      expect(status.transportadora_1.size).toBe(0);
      expect(status.transportadora_1.processing).toBe(false);
    });
  });
});

// ==========================================
// 3. TESTES - JOBS CONTROLLER
// ==========================================
// backend/tests/controllers/jobs.controller.test.js

const request = require('supertest');
const express = require('express');
const JobsController = require('../../src/controllers/jobs.controller');

describe('JobsController', () => {
  let app;
  let mockRepository;
  let mockScheduler;
  let controller;

  beforeEach(() => {
    mockRepository = {
      getJobStats: jest.fn(),
      getRecentIntegrations: jest.fn(),
      createApiToken: jest.fn(),
      deactivateApiTokens: jest.fn()
    };

    mockScheduler = {
      getStatus: jest.fn(),
      isRunning: false,
      runManual: jest.fn(),
      stop: jest.fn(),
      initialize: jest.fn(),
      reloadConfig: jest.fn(),
      queueService: {
        clearQueue: jest.fn()
      }
    };

    controller = new JobsController(mockRepository, mockScheduler);

    app = express();
    app.use(express.json());
    app.use((req, res, next) => {
      req.user = { id: 1, role: 'admin' };
      next();
    });
    
    app.get('/status', (req, res) => controller.getStatus(req, res));
    app.post('/run', (req, res) => controller.runManual(req, res));
    app.post('/api-tokens', (req, res) => controller.setApiToken(req, res));
  });

  describe('GET /status', () => {
    test('deve retornar status dos jobs', async () => {
      mockScheduler.getStatus.mockReturnValue({
        running: false,
        config: { enabled: true }
      });
      
      mockRepository.getJobStats.mockResolvedValue({
        total_integracoes: 10,
        concluidas: 8
      });

      const response = await request(app).get('/status');

      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.scheduler.running).toBe(false);
      expect(response.body.data.statistics.total_integracoes).toBe(10);
    });
  });

  describe('POST /run', () => {
    test('deve executar job manual', async () => {
      const response = await request(app).post('/run');

      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toContain('iniciado manualmente');
    });

    test('deve falhar se job j√° estiver rodando', async () => {
      mockScheduler.isRunning = true;

      const response = await request(app).post('/run');

      expect(response.status).toBe(400);
      expect(response.body.success).toBe(false);
    });
  });

  describe('POST /api-tokens', () => {
    test('deve criar token de API', async () => {
      mockRepository.deactivateApiTokens.mockResolvedValue();
      mockRepository.createApiToken.mockResolvedValue({
        id: 1,
        integracao: 'jamef',
        active: true
      });

      const response = await request(app)
        .post('/api-tokens')
        .send({
          integracao: 'jamef',
          token: 'test-token-123'
        });

      expect(response.status).toBe(201);
      expect(response.body.success).toBe(true);
      expect(response.body.data.integracao).toBe('jamef');
      expect(mockRepository.deactivateApiTokens).toHaveBeenCalledWith('jamef');
    });
  });
});



// ==========================================
// 5. EXEMPLO DE MONITORAMENTO PERSONALIZADO
// ==========================================
// examples/custom-monitoring.js

/**
 * Exemplo: Sistema de alertas personalizado
 */

const nodemailer = require('nodemailer');

class CustomAlertService {
  constructor(config) {
    this.emailTransporter = nodemailer.createTransporter(config.email);
    this.webhookUrl = config.webhookUrl;
    this.thresholds = config.thresholds;
  }

  // Verificar alertas personalizados
  async checkCustomAlerts(monitoringRepository) {
    const alerts = [];

    // Alerta: Taxa de erro acima do limite
    const errorRate = await this.checkErrorRate(monitoringRepository);
    if (errorRate > this.thresholds.errorRate) {
      alerts.push({
        type: 'HIGH_ERROR_RATE',
        severity: 'CRITICAL',
        message: `Taxa de erro: ${errorRate}% (limite: ${this.thresholds.errorRate}%)`,
        value: errorRate
      });
    }

    // Alerta: NFs paradas h√° muito tempo
    const stuckNFs = await this.checkStuckNFs(monitoringRepository);
    if (stuckNFs > this.thresholds.stuckNFs) {
      alerts.push({
        type: 'STUCK_NFS',
        severity: 'WARNING',
        message: `${stuckNFs} NFs paradas h√° mais de 24h`,
        value: stuckNFs
      });
    }

    // Enviar alertas
    for (const alert of alerts) {
      await this.sendAlert(alert);
    }

    return alerts;
  }

  async checkErrorRate(repository) {
    const stats = await repository.getPerformanceStats({ periodo: 1 });
    const latest = stats[stats.length - 1];
    
    if (!latest || latest.total_logs === 0) return 0;
    
    return (latest.erros / latest.total_logs) * 100;
  }

  async checkStuckNFs(repository) {
    const query = `
      SELECT COUNT(*) as stuck_count
      FROM notas_fiscais 
      WHERE finalizada = false 
        AND created_at < NOW() - INTERVAL '24 hours'
        AND (status_api IS NULL OR status_api != 'consultado_hoje')
    `;
    
    const result = await repository.database.query(query);
    return parseInt(result.rows[0].stuck_count);
  }

  async sendAlert(alert) {
    // Email
    if (this.emailTransporter) {
      await this.emailTransporter.sendMail({
        from: 'alerts@roadrw.com',
        to: 'admin@roadrw.com',
        subject: `[ROAD-RW] Alerta: ${alert.type}`,
        html: `
          <h3>Alerta do Sistema de Integra√ß√£o</h3>
          <p><strong>Tipo:</strong> ${alert.type}</p>
          <p><strong>Severidade:</strong> ${alert.severity}</p>
          <p><strong>Mensagem:</strong> ${alert.message}</p>
          <p><strong>Timestamp:</strong> ${new Date().toISOString()}</p>
        `
      });
    }

    // Webhook
    if (this.webhookUrl) {
      await axios.post(this.webhookUrl, {
        ...alert,
        timestamp: new Date().toISOString(),
        source: 'road-rw-jobs'
      });
    }
  }
}

// ==========================================
// 6. EXEMPLO DE SCRIPT DE MANUTEN√á√ÉO
// ==========================================
// scripts/maintenance.js

const Database = require('../src/database/connection');
const logger = require('../src/config/logger');

async function maintenanceTasks() {
  const database = new Database();
  
  try {
    await database.connect();
    logger.info('Iniciando tarefas de manuten√ß√£o...');

    // 1. Limpar logs antigos
    await cleanOldLogs(database);
    
    // 2. Reprocessar NFs com erro
    await reprocessErrorNFs(database);
    
    // 3. Atualizar estat√≠sticas
    await updateStatistics(database);
    
    logger.info('Tarefas de manuten√ß√£o conclu√≠das');
    
  } catch (error) {
    logger.error('Erro nas tarefas de manuten√ß√£o:', error);
  } finally {
    await database.disconnect();
  }
}

async function cleanOldLogs(database) {
  const query = `
    DELETE FROM log_integracaos 
    WHERE created_at < NOW() - INTERVAL '30 days'
  `;
  
  const result = await database.query(query);
  logger.info(`${result.rowCount} logs antigos removidos`);
}

async function reprocessErrorNFs(database) {
  const query = `
    UPDATE notas_fiscais 
    SET status_api = NULL 
    WHERE status_api = 'erro' 
      AND updated_at < NOW() - INTERVAL '1 hour'
  `;
  
  const result = await database.query(query);
  logger.info(`${result.rowCount} NFs marcadas para reprocessamento`);
}

async function updateStatistics(database) {
  // Implementar cache de estat√≠sticas se necess√°rio
  logger.info('Estat√≠sticas atualizadas');
}

// Executar se chamado diretamente
if (require.main === module) {
  maintenanceTasks();
}

module.exports = { maintenanceTasks };


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\email.service.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\external\external-auth.service.js
================================================================================

// ==========================================
// 4. EXTERNAL AUTH SERVICE
// ==========================================
// backend/src/services/external/external-auth.service.js

const jwt = require('jsonwebtoken');
const logger = require('../../config/logger');

class ExternalAuthService {
  constructor(repositories) {
    this.apiTokensRepo = repositories.apiTokens;
    this.transportadorasRepo = repositories.transportadoras;
  }

  // Validar token de API externa
  async validateExternalToken(token) {
    try {
      if (!token) {
        throw new Error('Token n√£o fornecido');
      }

      // Buscar token ativo no banco
      const apiToken = await this.apiTokensRepo.findActiveToken(token);
      
      if (!apiToken) {
        throw new Error('Token inv√°lido ou expirado');
      }

      // Verificar expira√ß√£o
      if (apiToken.expires_at && new Date() > new Date(apiToken.expires_at)) {
        throw new Error('Token expirado');
      }

      // Buscar transportadora associada
      const transportadora = await this.transportadorasRepo.findByIntegracao(apiToken.integracao);
      
      if (!transportadora || !transportadora.ativo) {
        throw new Error('Transportadora n√£o encontrada ou inativa');
      }

      // Atualizar √∫ltimo uso do token
      await this.updateTokenLastUsed(apiToken.id);

      return {
        valid: true,
        token: apiToken,
        transportadora: transportadora
      };

    } catch (error) {
      logger.error('Erro na valida√ß√£o do token externo:', error);
      return {
        valid: false,
        error: error.message
      };
    }
  }

  // Gerar novo token de API
  async generateApiToken(integracao, expiresInDays = 365) {
    try {
      const payload = {
        integracao: integracao,
        type: 'external_api',
        timestamp: Date.now()
      };

      const token = jwt.sign(payload, process.env.JWT_SECRET, {
        expiresIn: `${expiresInDays}d`
      });

      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + expiresInDays);

      // Desativar tokens existentes
      await this.apiTokensRepo.deactivateByIntegracao(integracao);

      // Criar novo token
      const newApiToken = await this.apiTokensRepo.create({
        integracao: integracao,
        token: token,
        expires_at: expiresAt,
        active: true
      });

      logger.info('Token de API criado:', {
        integracao: integracao,
        expires_at: expiresAt
      });

      return newApiToken;

    } catch (error) {
      logger.error('Erro ao gerar token de API:', error);
      throw error;
    }
  }

  // Atualizar √∫ltimo uso do token
  async updateTokenLastUsed(tokenId) {
    try {
      await this.apiTokensRepo.update(tokenId, {
        last_used_at: new Date()
      });
    } catch (error) {
      logger.warn('Erro ao atualizar √∫ltimo uso do token:', error);
    }
  }

  // Revogar token
  async revokeToken(token) {
    try {
      const apiToken = await this.apiTokensRepo.findByToken(token);
      
      if (apiToken) {
        await this.apiTokensRepo.update(apiToken.id, { active: false });
        logger.info('Token revogado:', { integracao: apiToken.integracao });
        return true;
      }

      return false;
    } catch (error) {
      logger.error('Erro ao revogar token:', error);
      throw error;
    }
  }

  // Listar tokens ativos
  async listActiveTokens() {
    try {
      return await this.apiTokensRepo.findActiveTokens();
    } catch (error) {
      logger.error('Erro ao listar tokens ativos:', error);
      throw error;
    }
  }
}

module.exports = ExternalAuthService;




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\external\nota-fiscal-processor.service.js
================================================================================


// ==========================================
// 2. NOTA FISCAL PROCESSOR SERVICE
// ==========================================
// backend/src/services/external/nota-fiscal-processor.service.js

const UpsertManagerService = require('./upsert-manager.service');
const logger = require('../../config/logger');

class NotaFiscalProcessorService {
  constructor(repositories) {
    this.repositories = repositories;
    this.upsertManager = new UpsertManagerService(repositories);
    this.notasRepo = repositories.notas;
  }

  // Processar array de notas fiscais
  async processNotasFiscais(notfisData, transportadoraToken) {
    const results = {
      processed: 0,
      created: 0,
      updated: 0,
      errors: 0,
      details: []
    };

    if (!Array.isArray(notfisData)) {
      throw new Error('Dados das notas fiscais devem ser um array');
    }

    logger.info(`Processando ${notfisData.length} notas fiscais`);

    // Processar cada nota fiscal
    for (const [index, notfisItem] of notfisData.entries()) {
      try {
        const result = await this.processSingleNotaFiscal(notfisItem, transportadoraToken);
        
        results.details.push({
          index: index,
          nro: notfisItem.nro,
          chave_nf: notfisItem.chave_nf,
          status: 'success',
          action: result.action,
          message: result.message
        });

        results.processed++;
        if (result.action === 'created') {
          results.created++;
        } else if (result.action === 'updated') {
          results.updated++;
        }

      } catch (error) {
        logger.error(`Erro ao processar NF √≠ndice ${index}:`, error);
        
        results.details.push({
          index: index,
          nro: notfisItem?.nro,
          chave_nf: notfisItem?.chave_nf,
          status: 'error',
          message: error.message
        });

        results.errors++;
      }
    }

    logger.info('Processamento conclu√≠do:', {
      processed: results.processed,
      created: results.created,
      updated: results.updated,
      errors: results.errors
    });

    return results;
  }

  // Processar uma √∫nica nota fiscal
  async processSingleNotaFiscal(notfisData, transportadoraToken) {
    try {
      // 1. Validar dados obrigat√≥rios
      this.validateNotaFiscalData(notfisData);

      // 2. Buscar/criar entidades relacionadas
      const entities = await this.processRelatedEntities(notfisData);

      // 3. Processar nota fiscal principal
      const notaFiscalResult = await this.upsertNotaFiscal(notfisData, entities);

      // 4. Log da opera√ß√£o
      await this.logOperation(notfisData, notaFiscalResult, transportadoraToken);

      return {
        action: notaFiscalResult.action,
        message: `Nota fiscal processada com sucesso`,
        notaFiscal: notaFiscalResult.notaFiscal
      };

    } catch (error) {
      // Log do erro
      await this.logOperation(notfisData, { error: error.message }, transportadoraToken);
      throw error;
    }
  }

  // Validar dados da nota fiscal
  validateNotaFiscalData(data) {
    const requiredFields = ['nro', 'chave_nf', 'emi_nf'];
    
    for (const field of requiredFields) {
      if (!data[field]) {
        throw new Error(`Campo obrigat√≥rio ausente: ${field}`);
      }
    }

    if (!data.recebedor || !data.recebedor[0]) {
      throw new Error('Dados do recebedor s√£o obrigat√≥rios');
    }

    if (!data.remetente || !data.remetente[0]) {
      throw new Error('Dados do remetente s√£o obrigat√≥rios');
    }

    if (!data.transportadora || !data.transportadora[0]) {
      throw new Error('Dados da transportadora s√£o obrigat√≥rios');
    }

    // Validar chave da NF (44 caracteres)
    if (data.chave_nf && data.chave_nf.length !== 44) {
      throw new Error('Chave da nota fiscal inv√°lida');
    }
  }

  // Processar entidades relacionadas
  async processRelatedEntities(notfisData) {
    const entities = {};

    try {
      // Processar transportadora
      const transportadoraResult = await this.upsertManager.upsertTransportadora(
        notfisData.transportadora[0]
      );
      entities.transportadora = transportadoraResult.transportadora;

      // Processar cliente (recebedor)
      const clienteResult = await this.upsertManager.upsertCliente(
        notfisData.recebedor[0]
      );
      entities.cliente = clienteResult.cliente;

      // Processar embarcador (remetente)  
      const embarcadorResult = await this.upsertManager.upsertEmbarcador(
        notfisData.remetente[0]
      );
      entities.embarcador = embarcadorResult.embarcador;

      // Processar endere√ßo de entrega
      if (notfisData.endereco_entrega && notfisData.endereco_entrega[0]) {
        const enderecoResult = await this.upsertManager.upsertEnderecoEntrega(
          notfisData.endereco_entrega[0],
          entities.cliente.id
        );
        entities.endereco = enderecoResult?.endereco;
      }

      return entities;

    } catch (error) {
      logger.error('Erro ao processar entidades relacionadas:', error);
      throw error;
    }
  }

  // UPSERT da nota fiscal principal
  async upsertNotaFiscal(notfisData, entities) {
    try {
      // Buscar NF existente por chave
      const existingNF = await this.notasRepo.findByChaveNF(notfisData.chave_nf);

      const nfData = {
        chave_cte: notfisData.chave_nf,
        cliente_id: entities.cliente.id,
        embarcador_id: entities.embarcador.id,
        transportadora_id: entities.transportadora.id,
        endereco_entrega_id: entities.endereco?.id || null,
        
        cod_rep: parseInt(notfisData.cod_rep) || 0,
        nome_rep: notfisData.nome_rep?.trim() || '',
        emi_nf: this.parseDate(notfisData.emi_nf),
        ser: parseInt(notfisData.ser) || 1,
        nro: parseInt(notfisData.nro),
        nro_ctrc: parseInt(notfisData.nro),
        nro_pedido: parseInt(notfisData.nro_pedido) || null,
        
        peso_real: parseFloat(notfisData.peso_real) || 0,
        peso_calculo: parseFloat(notfisData.peso_calculo) || 0,
        qtd_volumes: parseInt(notfisData.qtd_volumes) || 1,
        metro_cubico: parseFloat(notfisData.metro_cubico) || 0,
        valor: parseFloat(notfisData.valor) || 0,
        valor_frete: parseFloat(notfisData.valor_frete) || 0,
        
        observacoes: notfisData.observacoes?.trim() || '',
        mensagem: notfisData.mensagem?.trim() || '',
        status_nf: notfisData.status_nf?.trim() || 'importada',
        nf_retida: Boolean(notfisData.nf_retida),
        
        previsao_entrega: this.parseDate(notfisData.previsao_entrega),
        data_entrega: this.parseDate(notfisData.data_entrega),
        finalizada: false
      };

      if (existingNF) {
        const changes = this.upsertManager.getDataChanges(existingNF, nfData);
        
        if (Object.keys(changes).length > 0) {
          const updated = await this.notasRepo.update(existingNF.id, changes);
          
          logger.info('Nota fiscal atualizada:', {
            id: existingNF.id,
            nro: nfData.nro,
            changes: Object.keys(changes)
          });

          return { notaFiscal: updated, action: 'updated', changes };
        }

        return { notaFiscal: existingNF, action: 'no_changes' };
      } else {
        const newNF = await this.notasRepo.create(nfData);
        
        logger.info('Nota fiscal criada:', {
          id: newNF.id,
          nro: nfData.nro,
          chave_nf: nfData.chave_cte
        });

        return { notaFiscal: newNF, action: 'created' };
      }

    } catch (error) {
      logger.error('Erro no upsert da nota fiscal:', error);
      throw error;
    }
  }

  // Converter string para Date
  parseDate(dateString) {
    if (!dateString) return null;
    
    try {
      const date = new Date(dateString);
      return isNaN(date.getTime()) ? null : date;
    } catch (error) {
      return null;
    }
  }

  // Log da opera√ß√£o
  async logOperation(notfisData, result, token) {
    try {
      const logData = {
        tipo: 'external_api',
        operacao: 'nota_fiscal',
        token_usado: token?.substring(0, 10) + '...',
        dados: {
          nro: notfisData.nro,
          chave_nf: notfisData.chave_nf,
          resultado: result.action || 'erro',
          erro: result.error || null
        },
        created_at: new Date()
      };

      // Log estruturado
      logger.info('Opera√ß√£o externa registrada:', logData);

    } catch (error) {
      logger.error('Erro ao registrar log da opera√ß√£o:', error);
    }
  }
}

module.exports = NotaFiscalProcessorService;



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\external\ocorrencia-processor.service.js
================================================================================

// ==========================================
// 3. OCORRENCIA PROCESSOR SERVICE  
// ==========================================
// backend/src/services/external/ocorrencia-processor.service.js

const logger = require('../../config/logger');

class OcorrenciaProcessorService {
  constructor(repositories) {
    this.repositories = repositories;
    this.notasRepo = repositories.notas;
    this.ocorrenciasRepo = repositories.ocorrencias;
    this.codigoOcorrenciasRepo = repositories.codigoOcorrencias;
  }

  // Processar array de ocorr√™ncias
  async processOcorrencias(ocorrenciasData, transportadoraToken) {
    const results = {
      processed: 0,
      created: 0,
      updated: 0,
      errors: 0,
      details: []
    };

    if (!Array.isArray(ocorrenciasData)) {
      throw new Error('Dados das ocorr√™ncias devem ser um array');
    }

    logger.info(`Processando ${ocorrenciasData.length} ocorr√™ncias`);

    for (const [index, ocorrenciaItem] of ocorrenciasData.entries()) {
      try {
        const result = await this.processSingleOcorrencia(ocorrenciaItem, transportadoraToken);
        
        results.details.push({
          index: index,
          nro_nf: ocorrenciaItem.nro_nf,
          codigo: ocorrenciaItem.codigo,
          status: 'success',
          action: result.action,
          message: result.message
        });

        results.processed++;
        if (result.action === 'created') {
          results.created++;
        } else if (result.action === 'updated') {
          results.updated++;
        }

      } catch (error) {
        logger.error(`Erro ao processar ocorr√™ncia √≠ndice ${index}:`, error);
        
        results.details.push({
          index: index,
          nro_nf: ocorrenciaItem?.nro_nf,
          codigo: ocorrenciaItem?.codigo,
          status: 'error',
          message: error.message
        });

        results.errors++;
      }
    }

    return results;
  }

  // Processar uma √∫nica ocorr√™ncia
  async processSingleOcorrencia(ocorrenciaData, transportadoraToken) {
    try {
      // 1. Validar dados
      this.validateOcorrenciaData(ocorrenciaData);

      // 2. Buscar nota fiscal
      const notaFiscal = await this.findNotaFiscal(ocorrenciaData.nro_nf);
      if (!notaFiscal) {
        throw new Error(`Nota fiscal n√£o encontrada: ${ocorrenciaData.nro_nf}`);
      }

      // 3. Mapear c√≥digo externo para interno
      const codigoInterno = await this.mapCodigoOcorrencia(
        ocorrenciaData.codigo, 
        notaFiscal.transportadora_id
      );

      // 4. Processar ocorr√™ncia
      const ocorrenciaResult = await this.upsertOcorrencia(
        ocorrenciaData, 
        notaFiscal, 
        codigoInterno
      );

      // 5. Verificar se √© c√≥digo finalizador
      await this.checkFinalizadora(notaFiscal, codigoInterno);

      // 6. Log da opera√ß√£o
      await this.logOcorrenciaOperation(ocorrenciaData, ocorrenciaResult, transportadoraToken);

      return {
        action: ocorrenciaResult.action,
        message: 'Ocorr√™ncia processada com sucesso',
        ocorrencia: ocorrenciaResult.ocorrencia
      };

    } catch (error) {
      await this.logOcorrenciaOperation(ocorrenciaData, { error: error.message }, transportadoraToken);
      throw error;
    }
  }

  // Validar dados da ocorr√™ncia
  validateOcorrenciaData(data) {
    if (!data.nro_nf) {
      throw new Error('N√∫mero da NF √© obrigat√≥rio');
    }

    if (!data.codigo) {
      throw new Error('C√≥digo da ocorr√™ncia √© obrigat√≥rio');
    }

    if (!data.data_evento && !data.dataHoraEvento) {
      throw new Error('Data do evento √© obrigat√≥ria');
    }
  }

  // Buscar nota fiscal
  async findNotaFiscal(nroNF) {
    try {
      // Tentar por n√∫mero CTRC primeiro
      let nota = await this.notasRepo.findByNroCtrc(parseInt(nroNF));
      
      // Se n√£o encontrar, tentar por n√∫mero da NF
      if (!nota) {
        nota = await this.notasRepo.findByNro(parseInt(nroNF));
      }

      return nota;
    } catch (error) {
      logger.error('Erro ao buscar nota fiscal:', error);
      return null;
    }
  }

  // Mapear c√≥digo externo para c√≥digo interno
  async mapCodigoOcorrencia(codigoExterno, transportadoraId) {
    try {
      // Buscar mapeamento espec√≠fico da transportadora
      const mapeamento = await this.repositories.transportadoraCodigoOcorrencia
        .findByTransportadoraAndCodigo(transportadoraId, codigoExterno);

      if (mapeamento) {
        return mapeamento.codigo_ocorrencia_codigo;
      }

      // Mapeamento padr√£o baseado em strings comuns
      const mapeamentoPadrao = {
        'COLETADO': 1,
        'COLETA': 1,
        'PICKUP': 1,
        
        'EM_TRANSITO': 2,
        'TRANSPORTE': 2,
        'TRANSIT': 2,
        'TRANSFERIDO': 2,
        
        'SAIU_PARA_ENTREGA': 3,
        'OUT_FOR_DELIVERY': 3,
        'ENTREGA': 3,
        
        'ENTREGUE': 4,
        'DELIVERED': 4,
        'ENTREGA_REALIZADA': 4,
        
        'TENTATIVA': 5,
        'TENTATIVA_ENTREGA': 5,
        'DELIVERY_ATTEMPT': 5,
        
        'DEVOLVIDO': 6,
        'RETURNED': 6,
        'DEVOLUCAO': 6,
        
        'EXTRAVIADO': 7,
        'LOST': 7,
        'PERDIDO': 7,
        
        'AVARIADO': 8,
        'DAMAGED': 8,
        'DANIFICADO': 8
      };

      const codigo = mapeamentoPadrao[codigoExterno.toUpperCase()];
      return codigo || 99; // C√≥digo padr√£o para outros eventos

    } catch (error) {
      logger.error('Erro ao mapear c√≥digo de ocorr√™ncia:', error);
      return 99; // C√≥digo padr√£o
    }
  }

  // UPSERT da ocorr√™ncia
  async upsertOcorrencia(ocorrenciaData, notaFiscal, codigoInterno) {
    try {
      const dataEvento = this.parseDateTime(
        ocorrenciaData.data_evento || ocorrenciaData.dataHoraEvento
      );

      // Verificar se j√° existe ocorr√™ncia similar
      const existing = await this.ocorrenciasRepo.findSimilar({
        nro_nf: notaFiscal.nro_ctrc,
        codigo: codigoInterno,
        dataHoraEvento: dataEvento
      });

      const ocorrenciaPayload = {
        nro_nf: parseInt(notaFiscal.nro_ctrc),
        codigo: codigoInterno,
        descricao: ocorrenciaData.descricao || 'Evento importado via API',
        dataHoraEvento: dataEvento,
        dataHoraEnvio: new Date(),
        nomeRecebedor: ocorrenciaData.recebedor?.trim() || null,
        docRecebedor: ocorrenciaData.documento_recebedor?.replace(/\D/g, '') || null,
        latitude: parseFloat(ocorrenciaData.latitude) || null,
        longitude: parseFloat(ocorrenciaData.longitude) || null,
        linkComprovante: ocorrenciaData.comprovante_url?.trim() || null
      };

      if (existing) {
        const changes = this.getOcorrenciaChanges(existing, ocorrenciaPayload);
        
        if (Object.keys(changes).length > 0) {
          const updated = await this.ocorrenciasRepo.update(existing.id, changes);
          return { ocorrencia: updated, action: 'updated', changes };
        }

        return { ocorrencia: existing, action: 'no_changes' };
      } else {
        const newOcorrencia = await this.ocorrenciasRepo.create(ocorrenciaPayload);
        
        logger.info('Ocorr√™ncia criada:', {
          id: newOcorrencia.id,
          nro_nf: newOcorrencia.nro_nf,
          codigo: newOcorrencia.codigo
        });

        return { ocorrencia: newOcorrencia, action: 'created' };
      }

    } catch (error) {
      logger.error('Erro no upsert da ocorr√™ncia:', error);
      throw error;
    }
  }

  // Verificar se c√≥digo √© finalizador e atualizar NF
  async checkFinalizadora(notaFiscal, codigoInterno) {
    try {
      const codigoInfo = await this.codigoOcorrenciasRepo.findByCodigo(codigoInterno);
      
      if (codigoInfo && codigoInfo.finalizadora && !notaFiscal.finalizada) {
        await this.notasRepo.update(notaFiscal.id, {
          finalizada: true,
          status_nf: 'finalizada',
          data_integracao: new Date()
        });

        logger.info('Nota fiscal finalizada:', {
          id: notaFiscal.id,
          nro: notaFiscal.nro_ctrc,
          codigo_finalizador: codigoInterno
        });
      }

    } catch (error) {
      logger.error('Erro ao verificar finalizadora:', error);
    }
  }

  // Comparar dados da ocorr√™ncia
  getOcorrenciaChanges(existing, newData) {
    const changes = {};
    
    const fieldsToCompare = [
      'descricao', 'nomeRecebedor', 'docRecebedor', 
      'latitude', 'longitude', 'linkComprovante'
    ];
    
    for (const field of fieldsToCompare) {
      const newValue = newData[field];
      const existingValue = existing[field];
      
      if (newValue !== null && newValue !== existingValue) {
        changes[field] = newValue;
      }
    }
    
    return changes;
  }

  // Parse de data e hora
  parseDateTime(dateTimeString) {
    if (!dateTimeString) return new Date();
    
    try {
      const date = new Date(dateTimeString);
      return isNaN(date.getTime()) ? new Date() : date;
    } catch (error) {
      return new Date();
    }
  }

  // Log da opera√ß√£o
  async logOcorrenciaOperation(ocorrenciaData, result, token) {
    try {
      const logData = {
        tipo: 'external_api',
        operacao: 'ocorrencia',
        token_usado: token?.substring(0, 10) + '...',
        dados: {
          nro_nf: ocorrenciaData.nro_nf,
          codigo: ocorrenciaData.codigo,
          resultado: result.action || 'erro',
          erro: result.error || null
        }
      };

      logger.info('Opera√ß√£o de ocorr√™ncia registrada:', logData);

    } catch (error) {
      logger.error('Erro ao registrar log da ocorr√™ncia:', error);
    }
  }
}

module.exports = OcorrenciaProcessorService;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\external\upsert-manager.service.js
================================================================================

// ==========================================
// 1. UPSERT MANAGER SERVICE
// ==========================================
// backend/src/services/external/upsert-manager.service.js

const logger = require('../../config/logger');
const { validateCNPJ, validateCPF } = require('../../utils/validators');

class UpsertManagerService {
  constructor(repositories) {
    this.clientesRepo = repositories.clientes;
    this.embarcadoresRepo = repositories.embarcadores;
    this.transportadorasRepo = repositories.transportadoras;
    this.enderecoEntregaRepo = repositories.enderecoEntrega;
    this.notasRepo = repositories.notas;
  }

  // UPSERT Cliente (Recebedor)
  async upsertCliente(recebedorData) {
    try {
      if (!recebedorData || !recebedorData.documento) {
        throw new Error('Dados do recebedor s√£o obrigat√≥rios');
      }

      // Normalizar CNPJ/CPF
      const documento = recebedorData.documento.replace(/\D/g, '');
      
      if (!validateCNPJ(documento) && !validateCPF(documento)) {
        throw new Error(`Documento inv√°lido: ${recebedorData.documento}`);
      }

      // Buscar cliente existente
      const existingCliente = await this.clientesRepo.findByCnpj(documento);

      const clienteData = {
        cnpj: documento,
        nome: recebedorData.nome?.trim().toUpperCase() || '',
        endereco: recebedorData.endereco?.trim() || '',
        bairro: recebedorData.bairro?.trim() || '',
        cidade: recebedorData.cidade?.trim() || '',
        uf: recebedorData.uf?.trim().toUpperCase() || '',
        cep: recebedorData.cep?.replace(/\D/g, '') || '',
        contato: recebedorData.contato?.trim() || '',
        cod_cliente: recebedorData.cod_cliente?.toString() || null
      };

      if (existingCliente) {
        // Comparar e atualizar apenas se houver diferen√ßas
        const changes = this.getDataChanges(existingCliente, clienteData);
        
        if (Object.keys(changes).length > 0) {
          const updated = await this.clientesRepo.update(existingCliente.id, changes);
          
          logger.info('Cliente atualizado:', {
            id: existingCliente.id,
            cnpj: documento,
            changes: Object.keys(changes)
          });

          return { cliente: updated, action: 'updated', changes };
        }

        return { cliente: existingCliente, action: 'no_changes' };
      } else {
        // Criar novo cliente
        const newCliente = await this.clientesRepo.create(clienteData);
        
        logger.info('Cliente criado:', {
          id: newCliente.id,
          cnpj: documento,
          nome: clienteData.nome
        });

        return { cliente: newCliente, action: 'created' };
      }

    } catch (error) {
      logger.error('Erro no upsert do cliente:', {
        error: error.message,
        data: recebedorData
      });
      throw error;
    }
  }

  // UPSERT Embarcador (Remetente)
  async upsertEmbarcador(remetenteData) {
    try {
      if (!remetenteData || !remetenteData.documento) {
        throw new Error('Dados do remetente s√£o obrigat√≥rios');
      }

      const documento = remetenteData.documento.replace(/\D/g, '');
      
      if (!validateCNPJ(documento)) {
        throw new Error(`CNPJ do remetente inv√°lido: ${remetenteData.documento}`);
      }

      const existingEmbarcador = await this.embarcadoresRepo.findByCnpj(documento);

      const embarcadorData = {
        cnpj: documento,
        nome: remetenteData.nome?.trim().toUpperCase() || '',
        endereco: remetenteData.endereco?.trim() || '',
        municipio: remetenteData.municipio?.trim() || '',
        uf: remetenteData.uf?.trim().toUpperCase() || '',
        contato: remetenteData.contato?.trim() || ''
      };

      if (existingEmbarcador) {
        const changes = this.getDataChanges(existingEmbarcador, embarcadorData);
        
        if (Object.keys(changes).length > 0) {
          const updated = await this.embarcadoresRepo.update(existingEmbarcador.id, changes);
          
          logger.info('Embarcador atualizado:', {
            id: existingEmbarcador.id,
            cnpj: documento,
            changes: Object.keys(changes)
          });

          return { embarcador: updated, action: 'updated', changes };
        }

        return { embarcador: existingEmbarcador, action: 'no_changes' };
      } else {
        const newEmbarcador = await this.embarcadoresRepo.create(embarcadorData);
        
        logger.info('Embarcador criado:', {
          id: newEmbarcador.id,
          cnpj: documento
        });

        return { embarcador: newEmbarcador, action: 'created' };
      }

    } catch (error) {
      logger.error('Erro no upsert do embarcador:', error);
      throw error;
    }
  }

  // UPSERT Transportadora
  async upsertTransportadora(transportadoraData) {
    try {
      if (!transportadoraData || !transportadoraData.cnpj) {
        throw new Error('CNPJ da transportadora √© obrigat√≥rio');
      }

      const cnpj = transportadoraData.cnpj.replace(/\D/g, '');
      
      if (!validateCNPJ(cnpj)) {
        throw new Error(`CNPJ da transportadora inv√°lido: ${transportadoraData.cnpj}`);
      }

      const existingTransportadora = await this.transportadorasRepo.findByCnpj(cnpj);

      const tpData = {
        cnpj: cnpj,
        nome: transportadoraData.nome?.trim().toUpperCase() || '',
        endereco: transportadoraData.endereco?.trim() || '',
        municipio: transportadoraData.municipio?.trim() || '',
        uf: transportadoraData.uf?.trim().toUpperCase() || '',
        ativo: true
      };

      if (existingTransportadora) {
        const changes = this.getDataChanges(existingTransportadora, tpData);
        
        if (Object.keys(changes).length > 0) {
          const updated = await this.transportadorasRepo.update(existingTransportadora.id, changes);
          return { transportadora: updated, action: 'updated', changes };
        }

        return { transportadora: existingTransportadora, action: 'no_changes' };
      } else {
        const newTransportadora = await this.transportadorasRepo.create(tpData);
        
        logger.info('Transportadora criada:', {
          id: newTransportadora.id,
          cnpj: cnpj
        });

        return { transportadora: newTransportadora, action: 'created' };
      }

    } catch (error) {
      logger.error('Erro no upsert da transportadora:', error);
      throw error;
    }
  }

  // UPSERT Endere√ßo de Entrega
  async upsertEnderecoEntrega(enderecoData, clienteId) {
    try {
      if (!enderecoData || !clienteId) {
        return null;
      }

      const endereco = {
        cliente_id: clienteId,
        endereco: enderecoData.endereco?.trim() || '',
        bairro: enderecoData.bairro?.trim() || '',
        cidade: enderecoData.cidade?.trim() || '',
        uf: enderecoData.uf?.trim().toUpperCase() || '',
        cep: enderecoData.cep?.replace(/\D/g, '') || '',
        doca: enderecoData.doca?.trim() || null,
        rota: enderecoData.rota?.trim() || null
      };

      // Buscar endere√ßo similar
      const existing = await this.enderecoEntregaRepo.findSimilar({
        cliente_id: clienteId,
        endereco: endereco.endereco,
        cep: endereco.cep
      });

      if (existing) {
        const changes = this.getDataChanges(existing, endereco);
        
        if (Object.keys(changes).length > 0) {
          const updated = await this.enderecoEntregaRepo.update(existing.id, changes);
          return { endereco: updated, action: 'updated', changes };
        }

        return { endereco: existing, action: 'no_changes' };
      } else {
        const newEndereco = await this.enderecoEntregaRepo.create(endereco);
        return { endereco: newEndereco, action: 'created' };
      }

    } catch (error) {
      logger.error('Erro no upsert do endere√ßo:', error);
      return null;
    }
  }

  // Comparar dados e retornar apenas diferen√ßas
  getDataChanges(existing, newData) {
    const changes = {};
    
    for (const [key, newValue] of Object.entries(newData)) {
      const existingValue = existing[key];
      
      // Comparar valores normalizados
      const normalizedNew = this.normalizeValue(newValue);
      const normalizedExisting = this.normalizeValue(existingValue);
      
      if (normalizedNew !== normalizedExisting) {
        changes[key] = newValue;
      }
    }
    
    return changes;
  }

  // Normalizar valores para compara√ß√£o
  normalizeValue(value) {
    if (value === null || value === undefined) {
      return '';
    }
    
    if (typeof value === 'string') {
      return value.trim().toUpperCase();
    }
    
    if (typeof value === 'number') {
      return value.toString();
    }
    
    if (typeof value === 'boolean') {
      return value.toString();
    }
    
    return value;
  }
}

module.exports = UpsertManagerService;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\file-upload.service.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\integration.service.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\integrations\base-integration.service.js
================================================================================

// ==========================================
// 1. BASE INTEGRATION SERVICE
// ==========================================
// backend/src/services/integrations/base-integration.service.js

const logger = require('../../config/logger');
const { HTTP_STATUS } = require('../../utils/constants');

class BaseIntegrationService {
  constructor(config = {}) {
    this.name = config.name || 'base';
    this.timeout = config.timeout || 30000;
    this.retryAttempts = config.retryAttempts || 3;
    this.retryDelay = config.retryDelay || 1000;
    this.rateLimitRequests = config.rateLimitRequests || 100;
    this.rateLimitPer = config.rateLimitPer || 'minute';
    this.circuitBreakerEnabled = config.circuitBreakerEnabled !== false;
    this.failureThreshold = config.failureThreshold || 5;
    this.resetTimeout = config.resetTimeout || 60000;

    // Circuit breaker state
    this.circuitState = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN
    this.failureCount = 0;
    this.lastFailureTime = null;
    this.requestCount = 0;
    this.lastResetTime = Date.now();
  }

  // Template method - deve ser implementado pelas classes filhas
  async consultarAPI(numeroNF, transportadoraConfig) {
    throw new Error('consultarAPI deve ser implementado pela classe filha');
  }

  // Template method - parser de resposta
  parseResponse(response, numeroNF) {
    throw new Error('parseResponse deve ser implementado pela classe filha');
  }

  // M√©todo principal para consulta com circuit breaker e retry
  async consultar(numeroNF, transportadoraConfig) {
    try {
      // Verificar circuit breaker
      if (!this.isRequestAllowed()) {
        throw new Error(`Circuit breaker OPEN para ${this.name}`);
      }

      // Tentar consulta com retry
      const response = await this.retryRequest(
        () => this.consultarAPI(numeroNF, transportadoraConfig),
        this.retryAttempts
      );

      // Processar resposta
      const ocorrencias = this.parseResponse(response, numeroNF);

      // Reset circuit breaker em caso de sucesso
      this.onSuccess();

      return {
        success: true,
        numeroNF,
        transportadora: this.name,
        ocorrencias,
        response
      };

    } catch (error) {
      this.onFailure();
      
      logger.error(`Erro na integra√ß√£o ${this.name}:`, {
        numeroNF,
        error: error.message,
        stack: error.stack
      });

      throw error;
    }
  }

  // Retry logic com backoff exponencial
  async retryRequest(requestFn, attempts) {
    let lastError;

    for (let attempt = 1; attempt <= attempts; attempt++) {
      try {
        return await requestFn();
      } catch (error) {
        lastError = error;
        
        // N√£o fazer retry para erros 4xx (exceto 429)
        if (error.response?.status >= 400 && error.response?.status < 500 && error.response?.status !== 429) {
          throw error;
        }

        if (attempt === attempts) {
          throw error;
        }

        // Backoff exponencial
        const delay = this.retryDelay * Math.pow(2, attempt - 1);
        await this.sleep(delay);

        logger.warn(`Tentativa ${attempt}/${attempts} falhou para ${this.name}:`, {
          error: error.message,
          nextAttempt: attempt + 1,
          delay
        });
      }
    }

    throw lastError;
  }

  // Circuit breaker methods
  isRequestAllowed() {
    if (!this.circuitBreakerEnabled) return true;

    if (this.circuitState === 'CLOSED') {
      return true;
    }

    if (this.circuitState === 'OPEN') {
      if (Date.now() - this.lastFailureTime >= this.resetTimeout) {
        this.circuitState = 'HALF_OPEN';
        logger.info(`Circuit breaker HALF_OPEN para ${this.name}`);
        return true;
      }
      return false;
    }

    if (this.circuitState === 'HALF_OPEN') {
      return true;
    }

    return false;
  }

  onSuccess() {
    if (this.circuitState === 'HALF_OPEN') {
      this.circuitState = 'CLOSED';
      this.failureCount = 0;
      logger.info(`Circuit breaker CLOSED para ${this.name}`);
    }
  }

  onFailure() {
    this.failureCount++;
    this.lastFailureTime = Date.now();

    if (this.failureCount >= this.failureThreshold) {
      this.circuitState = 'OPEN';
      logger.warn(`Circuit breaker OPEN para ${this.name}`, {
        failureCount: this.failureCount,
        threshold: this.failureThreshold
      });
    }
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Rate limiting check (deve ser implementado com Redis em produ√ß√£o)
  async checkRateLimit() {
    // Implementa√ß√£o b√°sica - em produ√ß√£o usar Redis
    const now = Date.now();
    const windowMs = this.rateLimitPer === 'minute' ? 60000 : 3600000;

    if (now - this.lastResetTime >= windowMs) {
      this.requestCount = 0;
      this.lastResetTime = now;
    }

    if (this.requestCount >= this.rateLimitRequests) {
      throw new Error(`Rate limit excedido para ${this.name}: ${this.rateLimitRequests}/${this.rateLimitPer}`);
    }

    this.requestCount++;
    return true;
  }
}

module.exports = BaseIntegrationService;









================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\integrations\braspress-integration.service.js
================================================================================

// ==========================================
// 4. EXEMPLOS DE USO - ADICIONANDO NOVA TRANSPORTADORA
// ==========================================
// examples/add-new-integration.js

/**
 * Exemplo: Como adicionar uma nova integra√ß√£o (Braspress)
 */

// 1. Criar servi√ßo de integra√ß√£o
// backend/src/services/integrations/braspress-integration.service.js

const axios = require('axios');
const xml2js = require('xml2js');
const BaseIntegrationService = require('./base-integration.service');

class BraspressIntegrationService extends BaseIntegrationService {
  constructor(config = {}) {
    super({
      name: 'braspress',
      timeout: 45000,
      retryAttempts: 3,
      rateLimitRequests: 500,
      rateLimitPer: 'hour',
      ...config
    });

    this.baseURL = config.baseURL || 'https://api.braspress.com.br';
    this.soapAction = 'http://tempuri.org/ConsultarRemessa';
  }

  async consultarAPI(numeroNF, transportadoraConfig) {
    await this.checkRateLimit();

    // Montar SOAP XML
    const soapEnvelope = `
      <?xml version="1.0" encoding="utf-8"?>
      <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
        <soap:Body>
          <ConsultarRemessa xmlns="http://tempuri.org/">
            <usuario>${transportadoraConfig.usuario}</usuario>
            <senha>${transportadoraConfig.senha}</senha>
            <numeroRemessa>${numeroNF}</numeroRemessa>
          </ConsultarRemessa>
        </soap:Body>
      </soap:Envelope>
    `;

    const response = await axios.post(this.baseURL + '/ws/tracking.asmx', soapEnvelope, {
      headers: {
        'Content-Type': 'text/xml; charset=utf-8',
        'SOAPAction': this.soapAction
      },
      timeout: this.timeout
    });

    if (response.status !== 200) {
      throw new Error(`API Braspress retornou status ${response.status}`);
    }

    // Parser XML para JSON
    const parser = new xml2js.Parser({ explicitArray: false });
    const result = await parser.parseStringPromise(response.data);
    
    return result;
  }

  parseResponse(response, numeroNF) {
    const ocorrencias = [];

    try {
      const eventos = response['soap:Envelope']['soap:Body']['ConsultarRemessaResponse']['ConsultarRemessaResult']['Eventos']['Evento'];
      const eventArray = Array.isArray(eventos) ? eventos : [eventos];

      for (const evento of eventArray) {
        const ocorrencia = {
          nro_nf: parseInt(numeroNF),
          codigo: this.mapearCodigoBraspress(evento.Codigo),
          descricao: evento.Descricao || 'Evento sem descri√ß√£o',
          dataHoraEvento: this.parseDate(evento.Data, evento.Hora),
          dataHoraEnvio: new Date(),
          nomeRecebedor: evento.Recebedor || null,
          docRecebedor: null,
          latitude: null,
          longitude: null,
          linkComprovante: null
        };

        ocorrencias.push(ocorrencia);
      }

    } catch (error) {
      logger.warn(`Erro ao processar resposta Braspress para NF ${numeroNF}:`, error);
    }

    return ocorrencias;
  }

  mapearCodigoBraspress(codigoBraspress) {
    const mapeamento = {
      '01': 1,  // Coleta
      '02': 2,  // Transfer√™ncia
      '03': 3,  // Saiu para entrega
      '04': 4,  // Entregue
      '05': 5,  // Tentativa
      '06': 6   // Devolvido
    };

    return mapeamento[codigoBraspress] || 99;
  }

  parseDate(data, hora) {
    try {
      const dateStr = `${data} ${hora}`;
      return new Date(dateStr);
    } catch (error) {
      return null;
    }
  }
}

// 2. Registrar no factory
// backend/src/services/integrations/integration-factory.js (ADICIONAR)

const BraspressIntegrationService = require('./braspress-integration.service');

// No m√©todo initialize():
this.register('braspress', BraspressIntegrationService);

// 3. Atualizar valida√ß√µes
// backend/src/validations/jobs.validation.js (ATUALIZAR)

integracao: Joi.string()
  .valid('jamef', 'braspress', 'tnt', 'correios') // Adicionar 'braspress'
  .required()

// 4. Configurar no banco
/**
 * INSERT INTO settings (slug, env, settings)
 * VALUES ('integration_config', 'production', '{
 *   "rate_limits": {
 *     "braspress": {"requests": 500, "per": "hour"}
 *   },
 *   "timeouts": {
 *     "braspress": 45000
 *   }
 * }')
 * ON CONFLICT (slug, env) DO UPDATE SET settings = settings || EXCLUDED.settings;
 */


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\integrations\integration-factory.js
================================================================================

// ==========================================
// 3. INTEGRATION FACTORY
// ==========================================
// backend/src/services/integrations/integration-factory.js

const JamefIntegrationService = require('./jamef-integration.service');
const logger = require('../../config/logger');

class IntegrationFactory {
  static services = new Map();

  static register(name, serviceClass) {
    this.services.set(name, serviceClass);
    logger.info(`Servi√ßo de integra√ß√£o registrado: ${name}`);
  }

  static create(type, config = {}) {
    const ServiceClass = this.services.get(type);
    
    if (!ServiceClass) {
      throw new Error(`Servi√ßo de integra√ß√£o n√£o encontrado: ${type}`);
    }

    return new ServiceClass(config);
  }

  static getAvailableServices() {
    return Array.from(this.services.keys());
  }

  static initialize() {
    // Registrar servi√ßos dispon√≠veis
    this.register('jamef', JamefIntegrationService);
    
    // TODO: Adicionar outros servi√ßos
    // this.register('braspress', BraspressIntegrationService);
    // this.register('tnt', TNTIntegrationService);
    
    logger.info('Factory de integra√ß√µes inicializada', {
      services: this.getAvailableServices()
    });
  }
}

module.exports = IntegrationFactory;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\integrations\jamef-integration.service.js
================================================================================

// ==========================================
// 2. JAMEF INTEGRATION SERVICE
// ==========================================
// backend/src/services/integrations/jamef-integration.service.js

const axios = require('axios');
const BaseIntegrationService = require('./base-integration.service');
const logger = require('../../config/logger');

class JamefIntegrationService extends BaseIntegrationService {
  constructor(config = {}) {
    super({
      name: 'jamef',
      timeout: 15000,
      retryAttempts: 3,
      rateLimitRequests: 100,
      rateLimitPer: 'minute',
      ...config
    });

    this.baseURL = config.baseURL || 'https://api.jamef.com.br';
    this.apiVersion = config.apiVersion || 'v1';
  }

  async consultarAPI(numeroNF, transportadoraConfig) {
    await this.checkRateLimit();

    const url = `${this.baseURL}/${this.apiVersion}/rastreamento`;
    const headers = {
      'Authorization': `Bearer ${transportadoraConfig.token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    };

    logger.info(`Consultando API Jamef para NF ${numeroNF}`);

    const response = await axios.post(url, {
      numero_nf: numeroNF,
      tipo: 'nota_fiscal'
    }, {
      headers,
      timeout: this.timeout
    });

    if (response.status !== 200) {
      throw new Error(`API Jamef retornou status ${response.status}`);
    }

    return response.data;
  }

  parseResponse(response, numeroNF) {
    const ocorrencias = [];

    if (!response || !response.eventos) {
      logger.warn(`Resposta vazia da API Jamef para NF ${numeroNF}`);
      return ocorrencias;
    }

    for (const evento of response.eventos) {
      const ocorrencia = {
        nro_nf: parseInt(numeroNF),
        codigo: this.mapearCodigoJamef(evento.codigo),
        descricao: evento.descricao || 'Evento sem descri√ß√£o',
        dataHoraEvento: this.parseDate(evento.data_hora),
        dataHoraEnvio: new Date(),
        nomeRecebedor: evento.recebedor?.nome || null,
        docRecebedor: evento.recebedor?.documento || null,
        latitude: evento.localizacao?.latitude || null,
        longitude: evento.localizacao?.longitude || null,
        linkComprovante: evento.comprovante_url || null
      };

      ocorrencias.push(ocorrencia);
    }

    logger.info(`${ocorrencias.length} ocorr√™ncias processadas da API Jamef para NF ${numeroNF}`);
    return ocorrencias;
  }

  mapearCodigoJamef(codigoJamef) {
    // Mapeamento dos c√≥digos Jamef para c√≥digos internos
    const mapeamento = {
      '01': 1,  // Coleta realizada
      '02': 2,  // Em tr√¢nsito
      '03': 3,  // Saiu para entrega
      '04': 4,  // Entregue
      '05': 5,  // Tentativa de entrega
      '06': 6,  // Devolvido
      '99': 99  // Outros
    };

    return mapeamento[codigoJamef] || 99;
  }

  parseDate(dateString) {
    if (!dateString) return null;
    
    try {
      // Assumindo formato 'YYYY-MM-DD HH:mm:ss'
      return new Date(dateString);
    } catch (error) {
      logger.warn(`Erro ao processar data: ${dateString}`);
      return null;
    }
  }


async parseWebhookData(webhookData) {
  const result = { notfis: [], ocorrencias: [] };

  try {
    // Usar a mesma l√≥gica de parseResponse mas adaptada para webhook
    if (webhookData.tracking && Array.isArray(webhookData.tracking)) {
      for (const track of webhookData.tracking) {
        if (track.nf_number) {
          const nota = {
            nro_nf: track.nf_number,
            serie_nf: track.series,
            valor_nf: parseFloat(track.value) || null,
            peso_nf: parseFloat(track.weight) || null,
            data_emissao: this.parseDate(track.emission_date),
            
            cliente: track.customer_name ? {
              nome: track.customer_name,
              cnpj: track.customer_cnpj,
              endereco: track.customer_address,
              municipio: track.customer_city,
              uf: track.customer_state
            } : null,
            
            transportadora: {
              nome: 'Jamef',
              cnpj: '02404952000115'
            },
            
            endereco_entrega: track.delivery_address ? {
              destinatario: track.delivery_name,
              endereco: track.delivery_address,
              municipio: track.delivery_city,
              uf: track.delivery_state,
              cep: track.delivery_zip
            } : null
          };
          
          result.notfis.push(nota);
        }
      }
    }

    if (webhookData.events && Array.isArray(webhookData.events)) {
      for (const event of webhookData.events) {
        if (event.nf_number && event.event_code) {
          const ocorrencia = {
            nro_nf: event.nf_number,
            codigo: this.mapearCodigoJamef(event.event_code),
            descricao: event.event_description || 'Evento sem descri√ß√£o',
            data_ocorrencia: this.parseDate(event.event_date),
            latitude: parseFloat(event.latitude) || null,
            longitude: parseFloat(event.longitude) || null,
            linkComprovante: event.proof_link || null
          };
          
          result.ocorrencias.push(ocorrencia);
        }
      }
    }

    logger.info(`Webhook Jamef processado: ${result.notfis.length} notas, ${result.ocorrencias.length} ocorr√™ncias`);
    return result;

  } catch (error) {
    logger.error('Erro ao processar webhook Jamef:', error);
    throw new Error(`Erro no processamento do webhook Jamef: ${error.message}`);
  }
}



}

module.exports = JamefIntegrationService;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\job-queue.service.test.js
================================================================================

// ==========================================
// 2. TESTES - JOB QUEUE SERVICE
// ==========================================
// backend/tests/services/job-queue.service.test.js

const JobQueueService = require('../../src/services/jobs/job-queue.service');

describe('JobQueueService', () => {
  let queueService;

  beforeEach(() => {
    queueService = new JobQueueService();
  });

  describe('Queue Management', () => {
    test('deve criar fila para transportadora', () => {
      const queueName = queueService.createQueue(1);
      
      expect(queueName).toBe('transportadora_1');
      expect(queueService.queues.has(queueName)).toBe(true);
      expect(queueService.processing.get(queueName)).toBe(false);
    });

    test('deve adicionar job na fila', async () => {
      const jobId = await queueService.addJob(1, {
        numeroNF: '123',
        transportadora: { nome: 'Teste' }
      });

      expect(jobId).toBeDefined();
      
      const queue = queueService.queues.get('transportadora_1');
      expect(queue).toHaveLength(1);
      expect(queue[0].data.numeroNF).toBe('123');
    });

    test('deve limpar fila', () => {
      queueService.createQueue(1);
      queueService.queues.get('transportadora_1').push({ id: 1 });
      
      const cleared = queueService.clearQueue(1);
      
      expect(cleared).toBe(1);
      expect(queueService.queues.get('transportadora_1')).toHaveLength(0);
    });
  });

  describe('Status Monitoring', () => {
    test('deve retornar status das filas', () => {
      queueService.createQueue(1);
      queueService.createQueue(2);
      
      const status = queueService.getQueueStatus();
      
      expect(status).toHaveProperty('transportadora_1');
      expect(status).toHaveProperty('transportadora_2');
      expect(status.transportadora_1.size).toBe(0);
      expect(status.transportadora_1.processing).toBe(false);
    });
  });
});



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\jobs\job-manager.service.js
================================================================================

// ==========================================
// 1. SETUP E INICIALIZA√á√ÉO DO SISTEMA
// ==========================================
// backend/src/services/jobs/job-manager.service.js

const logger = require('../../config/logger');
const JobSchedulerService = require('./job-scheduler.service');
const JobsRepository = require('../../repositories/jobs.repository');
const MonitoringRepository = require('../../repositories/monitoring.repository');
const TransportadorasRepository = require('../../repositories/transportadoras.repository');
const NotasRepository = require('../../repositories/notas.repository');
const OcorrenciasRepository = require('../../repositories/ocorrencias.repository');
const SettingsRepository = require('../../repositories/settings.repository');

class JobManagerService {
  constructor(database) {
    this.database = database;
    this.scheduler = null;
    this.repositories = null;
    this.isInitialized = false;
  }

  // Inicializar o sistema completo de jobs
  async initialize() {
    try {
      logger.info('Inicializando sistema de jobs...');

      // Instanciar repositories
      this.repositories = {
        jobs: new JobsRepository(this.database),
        monitoring: new MonitoringRepository(this.database),
        transportadoras: new TransportadorasRepository(this.database),
        notas: new NotasRepository(this.database),
        ocorrencias: new OcorrenciasRepository(this.database),
        settings: new SettingsRepository(this.database)
      };

      // Criar configura√ß√µes iniciais se n√£o existirem
      await this.setupInitialConfig();

      // Instanciar e inicializar scheduler
      this.scheduler = new JobSchedulerService(this.repositories);
      await this.scheduler.initialize();

      this.isInitialized = true;
      logger.info('Sistema de jobs inicializado com sucesso');

      return this.scheduler;

    } catch (error) {
      logger.error('Erro ao inicializar sistema de jobs:', error);
      throw error;
    }
  }

  // Configurar configura√ß√µes iniciais
  async setupInitialConfig() {
    const settingsRepo = new SettingsRepository(this.database);
    try {
      // Verificar se j√° existem configura√ß√µes
      const existingConfig = await this.repositories.settings.findBySlug('integration_config');
      
      if (!existingConfig) {
        logger.info('Criando configura√ß√µes iniciais...');
        
        const defaultConfig = {
          enabled: true,
          poll_interval: 300, // 5 minutos
          rate_limits: {
            jamef: { requests: 100, per: 'minute' },
            braspress: { requests: 500, per: 'hour' },
            tnt: { requests: 200, per: 'minute' }
          },
          timeouts: {
            default: 30000,
            jamef: 15000,
            braspress: 45000,
            tnt: 20000
          },
          retry: {
            attempts: 3,
            exponential: true,
            base_delay: 1000
          },
          circuit_breaker: {
            enabled: true,
            failure_threshold: 5,
            reset_timeout: 60000
          }
        };

        await this.repositories.settings.create({
          slug: 'integration_config',
          env: 'production',
          settings: defaultConfig
        });

        logger.info('Configura√ß√µes iniciais criadas');
      }

      // Configura√ß√µes de monitoramento
      const monitoringConfig = await this.repositories.monitoring.getMonitoringConfig();
      if (!monitoringConfig || Object.keys(monitoringConfig).length === 0) {
        const defaultMonitoringConfig = {
          alertas: {
            erro_threshold: 5,
            inatividade_hours: 4,
            email_notifications: false,
            webhook_url: null
          },
          dashboard: {
            periodo_padrao: 7,
            refresh_interval: 30,
            auto_refresh: true
          },
          logs: {
            retention_days: 30,
            max_log_size: 1000000
          }
        };

        await this.repositories.monitoring.updateMonitoringConfig(defaultMonitoringConfig);
        logger.info('Configura√ß√µes de monitoramento criadas');
      }

    } catch (error) {
      logger.error('Erro ao configurar configura√ß√µes iniciais:', error);
      throw error;
    }
  }

  // Obter inst√¢ncia do scheduler
  getScheduler() {
    if (!this.isInitialized) {
      throw new Error('Sistema de jobs n√£o foi inicializado');
    }
    return this.scheduler;
  }

  // Obter repositories
  getRepositories() {
    if (!this.isInitialized) {
      throw new Error('Sistema de jobs n√£o foi inicializado');
    }
    return this.repositories;
  }

  // Parar sistema
  async shutdown() {
    try {
      if (this.scheduler) {
        await this.scheduler.stop();
        logger.info('Scheduler parado');
      }

      this.isInitialized = false;
      logger.info('Sistema de jobs finalizado');

    } catch (error) {
      logger.error('Erro ao finalizar sistema de jobs:', error);
    }
  }

  // Status do sistema
  getSystemStatus() {
    return {
      initialized: this.isInitialized,
      scheduler: this.scheduler ? this.scheduler.getStatus() : null,
      repositories: this.repositories ? Object.keys(this.repositories) : []
    };
  }

  // M√©todos para status e sa√∫de dos jobs
  async getHealthStatus() {
    try {
      if (!this.isInitialized) {
        return { status: 'not_initialized' };
      }

      return {
        status: 'running',
        initialized: this.isInitialized,
        scheduler: this.scheduler ? 'active' : 'inactive',
        repositories: Object.keys(this.repositories || {}),
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return { 
        status: 'error', 
        message: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  async getStatus() {
    return await this.getHealthStatus();
  }

  async getIntegrationsStatus() {
    try {
      if (!this.repositories || !this.repositories.monitoring) {
        return [];
      }
      return [];
    } catch (error) {
      return [];
    }
  }
}

module.exports = JobManagerService;




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\jobs\job-manager.service.js.backup
================================================================================

// ==========================================
// 1. SETUP E INICIALIZA√á√ÉO DO SISTEMA
// ==========================================
// backend/src/services/jobs/job-manager.service.js

const logger = require('../../config/logger');
const JobSchedulerService = require('./job-scheduler.service');
const JobsRepository = require('../../repositories/jobs.repository');
const MonitoringRepository = require('../../repositories/monitoring.repository');
const TransportadorasRepository = require('../../repositories/transportadoras.repository');
const NotasRepository = require('../../repositories/notas.repository');
const OcorrenciasRepository = require('../../repositories/ocorrencias.repository');
const SettingsRepository = require('../../repositories/settings.repository');

class JobManagerService {
  constructor(database) {
    this.database = database;
    this.scheduler = null;
    this.repositories = null;
    this.isInitialized = false;
  }

  // Inicializar o sistema completo de jobs
  async initialize() {
    try {
      logger.info('Inicializando sistema de jobs...');

      // Instanciar repositories
      this.repositories = {
        jobs: new JobsRepository(this.database),
        monitoring: new MonitoringRepository(this.database),
        transportadoras: new TransportadorasRepository(this.database),
        notas: new NotasRepository(this.database),
        ocorrencias: new OcorrenciasRepository(this.database),
        settings: new SettingsRepository(this.database)
      };

      // Criar configura√ß√µes iniciais se n√£o existirem
      await this.setupInitialConfig();

      // Instanciar e inicializar scheduler
      this.scheduler = new JobSchedulerService(this.repositories);
      await this.scheduler.initialize();

      this.isInitialized = true;
      logger.info('Sistema de jobs inicializado com sucesso');

      return this.scheduler;

    } catch (error) {
      logger.error('Erro ao inicializar sistema de jobs:', error);
      throw error;
    }
  }

  // Configurar configura√ß√µes iniciais
  async setupInitialConfig() {
    const settingsRepo = new SettingsRepository(this.database);
    try {
      // Verificar se j√° existem configura√ß√µes
      const existingConfig = await this.repositories.settings.findBySlug('integration_config');
      
      if (!existingConfig) {
        logger.info('Criando configura√ß√µes iniciais...');
        
        const defaultConfig = {
          enabled: true,
          poll_interval: 300, // 5 minutos
          rate_limits: {
            jamef: { requests: 100, per: 'minute' },
            braspress: { requests: 500, per: 'hour' },
            tnt: { requests: 200, per: 'minute' }
          },
          timeouts: {
            default: 30000,
            jamef: 15000,
            braspress: 45000,
            tnt: 20000
          },
          retry: {
            attempts: 3,
            exponential: true,
            base_delay: 1000
          },
          circuit_breaker: {
            enabled: true,
            failure_threshold: 5,
            reset_timeout: 60000
          }
        };

        await this.repositories.settings.create({
          slug: 'integration_config',
          env: 'production',
          settings: defaultConfig
        });

        logger.info('Configura√ß√µes iniciais criadas');
      }

      // Configura√ß√µes de monitoramento
      const monitoringConfig = await this.repositories.monitoring.getMonitoringConfig();
      if (!monitoringConfig || Object.keys(monitoringConfig).length === 0) {
        const defaultMonitoringConfig = {
          alertas: {
            erro_threshold: 5,
            inatividade_hours: 4,
            email_notifications: false,
            webhook_url: null
          },
          dashboard: {
            periodo_padrao: 7,
            refresh_interval: 30,
            auto_refresh: true
          },
          logs: {
            retention_days: 30,
            max_log_size: 1000000
          }
        };

        await this.repositories.monitoring.updateMonitoringConfig(defaultMonitoringConfig);
        logger.info('Configura√ß√µes de monitoramento criadas');
      }

    } catch (error) {
      logger.error('Erro ao configurar configura√ß√µes iniciais:', error);
      throw error;
    }
  }

  // Obter inst√¢ncia do scheduler
  getScheduler() {
    if (!this.isInitialized) {
      throw new Error('Sistema de jobs n√£o foi inicializado');
    }
    return this.scheduler;
  }

  // Obter repositories
  getRepositories() {
    if (!this.isInitialized) {
      throw new Error('Sistema de jobs n√£o foi inicializado');
    }
    return this.repositories;
  }

  // Parar sistema
  async shutdown() {
    try {
      if (this.scheduler) {
        await this.scheduler.stop();
        logger.info('Scheduler parado');
      }

      this.isInitialized = false;
      logger.info('Sistema de jobs finalizado');

    } catch (error) {
      logger.error('Erro ao finalizar sistema de jobs:', error);
    }
  }

  // Status do sistema
  getSystemStatus() {
    return {
      initialized: this.isInitialized,
      scheduler: this.scheduler ? this.scheduler.getStatus() : null,
      repositories: this.repositories ? Object.keys(this.repositories) : []
    };
  }
}

module.exports = JobManagerService;




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\jobs\job-queue.service.js
================================================================================


// ==========================================
// 4. JOB QUEUE SERVICE
// ==========================================
// backend/src/services/jobs/job-queue.service.js

const logger = require('../../config/logger');
const IntegrationFactory = require('../integrations/integration-factory');

class JobQueueService {
  constructor() {
    this.queues = new Map(); // transportadora -> queue
    this.processing = new Map(); // transportadora -> isProcessing
    this.processors = new Map(); // transportadora -> processor function
  }

  // Criar fila para uma transportadora
  createQueue(transportadoraId, config = {}) {
    const queueName = `transportadora_${transportadoraId}`;
    
    if (!this.queues.has(queueName)) {
      this.queues.set(queueName, []);
      this.processing.set(queueName, false);
      
      logger.info(`Fila criada para transportadora ${transportadoraId}`, config);
    }

    return queueName;
  }

  // Adicionar job na fila
  async addJob(transportadoraId, jobData) {
    const queueName = this.createQueue(transportadoraId);
    const queue = this.queues.get(queueName);

    const job = {
      id: Date.now() + Math.random(),
      transportadoraId,
      data: jobData,
      attempts: 0,
      maxAttempts: 3,
      createdAt: new Date(),
      status: 'pending'
    };

    queue.push(job);
    
    logger.info(`Job adicionado na fila ${queueName}:`, {
      jobId: job.id,
      queueSize: queue.length
    });

    // Processar fila se n√£o estiver sendo processada
    if (!this.processing.get(queueName)) {
      setImmediate(() => this.processQueue(queueName));
    }

    return job.id;
  }

  // Processar fila de uma transportadora
  async processQueue(queueName) {
    if (this.processing.get(queueName)) {
      return;
    }

    this.processing.set(queueName, true);
    const queue = this.queues.get(queueName);

    logger.info(`Iniciando processamento da fila ${queueName}:`, {
      queueSize: queue.length
    });

    while (queue.length > 0) {
      const job = queue.shift();
      
      try {
        await this.processJob(job);
        job.status = 'completed';
        
        logger.info(`Job ${job.id} processado com sucesso`);
        
      } catch (error) {
        job.attempts++;
        job.lastError = error.message;
        
        if (job.attempts < job.maxAttempts) {
          // Adicionar de volta na fila com delay
          setTimeout(() => {
            queue.push(job);
            if (!this.processing.get(queueName)) {
              this.processQueue(queueName);
            }
          }, 5000 * job.attempts); // Backoff
          
          logger.warn(`Job ${job.id} falhou, tentativa ${job.attempts}/${job.maxAttempts}:`, error.message);
        } else {
          job.status = 'failed';
          logger.error(`Job ${job.id} falhou definitivamente:`, error.message);
        }
      }

      // Rate limiting entre jobs
      if (queue.length > 0) {
        await this.sleep(1000); // 1 segundo entre requests
      }
    }

    this.processing.set(queueName, false);
    logger.info(`Processamento da fila ${queueName} finalizado`);
  }

// Processar um job individual
async processJob(jobData) {
  const { numeroNF, transportadora, apiConfig, detalhesNF } = jobData;
  
  logger.info(`Iniciando processamento da NF ${numeroNF}`, {
    nf: numeroNF,
    transportadora: transportadora.nome,
    integracao: transportadora.integracao_ocorrencia,
    detalhes: detalhesNF
  });

  try {
    // Processar a NF...
    const resultado = await this.integrationService.processarNF(numeroNF, transportadora, apiConfig);
    
    logger.info(`NF ${numeroNF} processada com sucesso`, {
      nf: numeroNF,
      status: resultado.status,
      transportadora: transportadora.nome,
      tempo_processamento: resultado.tempo
    });
    
    return resultado;
    
  } catch (error) {
    logger.error(`Falha no processamento da NF ${numeroNF}: ${error.message}`, {
      nf: numeroNF,
      transportadora: transportadora.nome,
      error: error.message,
      tentativa: jobData.attempts
    });
    
    throw error;
  }
}

  // Obter status das filas
  getQueueStatus() {
    const status = {};

    for (const [queueName, queue] of this.queues.entries()) {
      status[queueName] = {
        size: queue.length,
        processing: this.processing.get(queueName),
        jobs: queue.map(job => ({
          id: job.id,
          status: job.status,
          attempts: job.attempts,
          createdAt: job.createdAt
        }))
      };
    }

    return status;
  }

  // Limpar fila
  clearQueue(transportadoraId) {
    const queueName = `transportadora_${transportadoraId}`;
    const queue = this.queues.get(queueName);
    
    if (queue) {
      const cleared = queue.length;
      queue.length = 0;
      
      logger.info(`Fila ${queueName} limpa: ${cleared} jobs removidos`);
      return cleared;
    }
    
    return 0;
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

module.exports = JobQueueService;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\jobs\job-scheduler.service.js
================================================================================

// ==========================================
// 5. JOB SCHEDULER SERVICE
// ==========================================
// backend/src/services/jobs/job-scheduler.service.js

const cron = require('node-cron');
const logger = require('../../config/logger');
const defaultLogger = require('../../config/logger');
const JobQueueService = require('./job-queue.service');
const IntegrationFactory = require('../integrations/integration-factory');

class JobSchedulerService {
  constructor(repositories) {
    this.jobsRepository = repositories.jobs;
    this.settingsRepository = repositories.settings;
    this.transportadorasRepository = repositories.transportadoras;
    this.notasRepository = repositories.notas;
    this.ocorrenciasRepository = repositories.ocorrencias;
    
    this.queueService = new JobQueueService();
    this.scheduledJobs = new Map(); // ‚úÖ Correto
    this.isRunning = false;
    this.config = null;
  }


  // Inicializar scheduler
  async initialize() {
    try {
      // Inicializar factory de integra√ß√µes
      IntegrationFactory.initialize();
      
      // Carregar configura√ß√µes
      await this.loadConfig();
      
      // Agendar job principal
      await this.scheduleMainJob();
      
      logger.info('Job Scheduler inicializado com sucesso');
      
    } catch (error) {
      logger.error('Erro ao inicializar Job Scheduler:', error);
      throw error;
    }
  }

  // Carregar configura√ß√µes do banco
  async loadConfig() {
    try {
      const settings = await this.settingsRepository.findBySlug('integration_config');
      
      this.config = {
        enabled: true,
        pollInterval: 300, // 5 minutos
        rateLimits: {
          jamef: { requests: 100, per: 'minute' }
        },
        timeouts: {
          default: 30000,
          jamef: 15000
        },
        retry: {
          attempts: 3,
          exponential: true
        },
        ...settings?.settings
      };
      
      logger.info('Configura√ß√µes carregadas:', this.config);
      
    } catch (error) {
      logger.warn('Erro ao carregar configura√ß√µes, usando padr√µes:', error.message);
      
      // Configura√ß√µes padr√£o
      this.config = {
        enabled: true,
        pollInterval: 300,
        rateLimits: {},
        timeouts: { default: 30000 },
        retry: { attempts: 3, exponential: true }
      };
    }
  }

  // Agendar job principal
  async scheduleMainJob() {
    if (!this.config.enabled) {
      logger.info('Jobs desabilitados na configura√ß√£o');
      return;
    }

    // Converter intervalo para cron
    const intervalMinutes = Math.max(1, this.config.pollInterval / 60);
    const cronExpression = `*/${intervalMinutes} * * * *`;
    
    // Cancelar job existente se houver
    if (this.scheduledJobs.has('main')) {
      this.scheduledJobs.get('main').destroy();
    }

    // Agendar novo job
    const task = cron.schedule(cronExpression, async () => {
      if (!this.isRunning) {
        await this.executeMainJob();
      }
    }, {
      scheduled: true
    });

    this.scheduledJobs.set('main', task);
    
    logger.info(`Job principal agendado: ${cronExpression} (a cada ${intervalMinutes} minutos)`);
  }


// Executar job principal
async executeMainJob() {
  if (this.isRunning) {
    logger.warn('Job j√° est√° em execu√ß√£o, pulando ciclo');
    return;
  }

  this.isRunning = true;
  const startTime = Date.now();
  const cycleId = Date.now(); // ‚úÖ ID √∫nico para o ciclo

  try {
    logger.info(`=== INICIANDO CICLO DE INTEGRA√á√ÉO [${cycleId}] ===`);

    // Registrar in√≠cio da integra√ß√£o
    const integracaoId = await this.jobsRepository.createIntegracao({
      integracao: 'transportadoras_api',
      qtd: 0,
      inicio: new Date()
    });

    // Buscar transportadoras ativas com integra√ß√£o API
    const transportadoras = await this.transportadorasRepository.findForIntegration();
    
    if (transportadoras.length === 0) {
      logger.info('Nenhuma transportadora com integra√ß√£o ativa encontrada');
      return;
    }

    logger.info(`${transportadoras.length} transportadoras encontradas para integra√ß√£o`, {
      cycle_id: cycleId,
      transportadoras: transportadoras.map(t => ({
        id: t.id,
        nome: t.nome,
        integracao: t.integracao_ocorrencia
      }))
    });

    let totalProcessed = 0;

    // Processar cada transportadora
    for (const transportadora of transportadoras) {
      try {
        const processed = await this.processTransportadora(transportadora);
        totalProcessed += processed;
        
        logger.info(`Transportadora ${transportadora.nome} processada: ${processed} NFs`, {
          cycle_id: cycleId,
          transportadora: transportadora.nome,
          nfs_processadas: processed
        });
        
      } catch (error) {
        logger.error(`Erro ao processar transportadora ${transportadora.id}:`, {
          cycle_id: cycleId,
          transportadora_id: transportadora.id,
          error: error.message,
          stack: error.stack
        });
        
        await this.jobsRepository.createLog({
          integracao: 'transportadoras_api',
          nro: transportadora.id,
          texto: `Erro: ${error.message}`
        });
      }
    }

    // Finalizar integra√ß√£o
    await this.jobsRepository.updateIntegracao(integracaoId, {
      qtd: totalProcessed,
      fim: new Date()
    });

    const duration = Date.now() - startTime;
    logger.info(`=== CICLO FINALIZADO [${cycleId}]: ${totalProcessed} NFs processadas em ${duration}ms ===`, {
      cycle_id: cycleId,
      total_nfs: totalProcessed,
      duration_ms: duration,
      transportadoras_count: transportadoras.length
    });

  } catch (error) {
    logger.error('Erro no ciclo de integra√ß√£o:', {
      cycle_id: cycleId,
      error: error.message,
      stack: error.stack
    });
  } finally {
    this.isRunning = false;
  }
}

// Processar uma transportadora
async processTransportadora(transportadora) {
  const transportadoraInfo = {
    id: transportadora.id,
    nome: transportadora.nome,
    integracao: transportadora.integracao_ocorrencia
  };

  logger.info(`Iniciando processamento da transportadora`, {
    transportadora: transportadoraInfo,
    etapa: 'inicio'
  });

  // Buscar NFs n√£o finalizadas desta transportadora
  const notasNaoFinalizadas = await this.notasRepository.findPendingByTransportadora(transportadora.id);
  
  if (notasNaoFinalizadas.length === 0) {
    logger.info(`Nenhuma NF pendente encontrada para a transportadora`, {
      transportadora: transportadoraInfo,
    });
    return 0;
  }

  logger.info(`NFs pendentes identificadas para processamento`, {
    transportadora: transportadoraInfo,
    quantidade_nfs: notasNaoFinalizadas.length,
    nfs: notasNaoFinalizadas.map(nota => ({
      nro_ctrc: nota.nro_ctrc,
      chave_nf: nota.chave_nf,
      cliente: nota.nome_rep,
      cod_rep: nota.cod_rep,
      status: nota.status_nf
    })),
    etapa: 'nf_encontradas'
  });

  // Obter configura√ß√£o da API
  const apiConfig = await this.getAPIConfig(transportadora);
  
  if (!apiConfig || !apiConfig.token) {
    logger.warn(`Configura√ß√£o de API n√£o dispon√≠vel para a transportadora`, {
      transportadora: transportadoraInfo,
      possui_config: !!apiConfig,
      possui_token: !!(apiConfig?.token),
      etapa: 'config_api'
    });
    return 0;
  }

  logger.info(`Configura√ß√£o de API obtida com sucesso`, {
    transportadora: transportadoraInfo,
    config: {
      timeout: apiConfig.timeout,
      retry_attempts: apiConfig.retry?.attempts,
      rate_limit: apiConfig.requests ? `${apiConfig.requests} requests/${apiConfig.per}` : 'padr√£o'
    },
    etapa: 'config_ok'
  });

  let processed = 0;
  let batchNumber = 1;
  const totalBatches = Math.ceil(notasNaoFinalizadas.length / this.getRateLimitBatchSize(transportadora.integracao_ocorrencia));

  // Processar NFs em lotes respeitando rate limit
  const batchSize = this.getRateLimitBatchSize(transportadora.integracao_ocorrencia);
  
  logger.info(`Iniciando processamento em lotes`, {
    transportadora: transportadoraInfo,
    total_nfs: notasNaoFinalizadas.length,
    batch_size: batchSize,
    total_batches: totalBatches,
    etapa: 'inicio_lotes'
  });
  
  for (let i = 0; i < notasNaoFinalizadas.length; i += batchSize) {
    const batch = notasNaoFinalizadas.slice(i, i + batchSize);
    
    logger.info(`Processando lote ${batchNumber}/${totalBatches}`, {
      transportadora: transportadoraInfo,
      batch_number: batchNumber,
      total_batches: totalBatches,
      nfs_no_lote: batch.length,
      nfs: batch.map(n => n.nro_ctrc),
      intervalo: `${i}-${Math.min(i + batchSize, notasNaoFinalizadas.length)}/${notasNaoFinalizadas.length}`,
      etapa: 'processamento_lote'
    });
    
    try {
      await this.processBatch(batch, transportadora, apiConfig);
      processed += batch.length;
      
      logger.info(`Lote ${batchNumber}/${totalBatches} processado com sucesso`, {
        transportadora: transportadoraInfo,
        batch_number: batchNumber,
        nfs_processadas: batch.length,
        total_processadas: processed,
        progresso: `${processed}/${notasNaoFinalizadas.length}`,
        etapa: 'lote_concluido'
      });
      
      // Delay entre lotes apenas se n√£o for o √∫ltimo lote
      if (i + batchSize < notasNaoFinalizadas.length) {
        const delayMs = 2000;
        logger.info(`Aguardando ${delayMs}ms antes do pr√≥ximo lote...`, {
          transportadora: transportadoraInfo,
          delay_ms: delayMs,
          etapa: 'delay_lote'
        });
        
        await this.sleep(delayMs);
      }
      
    } catch (error) {
      logger.error(`Erro ao processar lote ${batchNumber} da transportadora`, {
        transportadora: transportadoraInfo,
        batch_number: batchNumber,
        error: error.message,
        stack: error.stack,
        nfs_no_lote: batch.map(n => n.nro_ctrc),
        etapa: 'erro_lote'
      });
      
      // Continuar com os pr√≥ximos lotes mesmo com erro neste
    }
    
    batchNumber++;
  }

  logger.info(`Processamento da transportadora conclu√≠do`, {
    transportadora: transportadoraInfo,
    total_nfs: notasNaoFinalizadas.length,
    nfs_processadas: processed,
    taxa_sucesso: `${((processed / notasNaoFinalizadas.length) * 100).toFixed(1)}%`,
    etapa: 'conclusao'
  });

  return processed;
}


 // Processar lote de NFs
async processBatch(notas, transportadora, apiConfig) {
  const promises = notas.map(async (nota) => {
    try {
      // ‚úÖ Log detalhado do in√≠cio do processamento
      logger.info(`Processando NF ${nota.nro_ctrc} - Transportadora: ${transportadora.nome}`, {
        nf: nota.nro_ctrc,
        transportadora: transportadora.nome,
        transportadora_id: transportadora.id,
        chave_nf: nota.chave_nf,
        cliente: nota.nome_rep
      });

      // Adicionar job na fila
      await this.queueService.addJob(transportadora.id, {
        numeroNF: nota.nro_ctrc,
        transportadora,
        apiConfig,
        // ‚úÖ Adicionar mais detalhes para logging
        detalhesNF: {
          chave_nf: nota.chave_nf,
          cliente: nota.nome_rep,
          cod_rep: nota.cod_rep,
          valor: nota.valor,
          peso: nota.peso_calculo
        }
      });

      // ‚úÖ Log de sucesso
      logger.info(`NF ${nota.nro_ctrc} adicionada na fila com sucesso`, {
        nf: nota.nro_ctrc,
        transportadora: transportadora.nome,
        status: 'enqueued'
      });

    } catch (error) {
      // ‚úÖ Log de erro detalhado
      logger.error(`Erro ao processar NF ${nota.nro_ctrc}: ${error.message}`, {
        nf: nota.nro_ctrc,
        transportadora: transportadora.nome,
        error: error.message,
        stack: error.stack
      });
      
      await this.jobsRepository.createLog({
        integracao: 'transportadoras_api',
        nro: nota.nro_ctrc,
        texto: `Erro: ${error.message}`
      });
    }
  });

  await Promise.allSettled(promises);
}

  // Obter configura√ß√£o da API para transportadora
  async getAPIConfig(transportadora) {
    try {
      // Buscar token da API
      const apiToken = await this.settingsRepository.getActiveToken(transportadora.integracao_ocorrencia);
      
      if (!apiToken) {
        return null;
      }

      const config = this.config.rateLimits[transportadora.integracao_ocorrencia] || {};
      const timeout = this.config.timeouts[transportadora.integracao_ocorrencia] || this.config.timeouts.default;

      return {
        token: apiToken.token,
        timeout,
        retry: this.config.retry,
        ...config
      };

    } catch (error) {
      logger.error(`Erro ao obter configura√ß√£o da API para ${transportadora.nome}:`, error);
      return null;
    }
  }

  // Obter tamanho do lote baseado no rate limit
  getRateLimitBatchSize(integracao) {
    const rateLimit = this.config.rateLimits[integracao];
    
    if (!rateLimit) return 10; // Padr√£o
    
    // Calcular lote seguro (50% do limite)
    return Math.max(1, Math.floor(rateLimit.requests * 0.5));
  }

  // Parar scheduler
// Parar scheduler
async stop() {
  logger.info('Parando Job Scheduler...'); // ‚úÖ Usar logger importado
  
  for (const [name, task] of this.scheduledJobs.entries()) {
    try {
      if (task && typeof task.stop === 'function') task.stop();
      if (task && typeof task.destroy === 'function') task.destroy();
      logger.info(`Tarefa parada: ${name}`); // ‚úÖ Usar logger importado
    } catch (e) {
      logger.warn(`Falha ao parar tarefa ${name}: ${e.message}`); // ‚úÖ Usar logger importado
    }
  }
  
  // Limpar jobs agendados
  this.scheduledJobs.clear();
  this.isRunning = false;
  
  logger.info('Job Scheduler parado com sucesso'); // ‚úÖ Usar logger importado
}

  // Executar job manualmente
  async runManual() {
    if (this.isRunning) {
      throw new Error('Job j√° est√° em execu√ß√£o');
    }
    
    logger.info('Executando job manual...');
    await this.executeMainJob();
  }

  // Recarregar configura√ß√µes
  async reloadConfig() {
    await this.loadConfig();
    await this.scheduleMainJob();
    logger.info('Configura√ß√µes recarregadas');
  }

  // Status do scheduler
  getStatus() {
    return {
      running: this.isRunning,
      config: this.config,
      scheduledJobs: Array.from(this.scheduledJobs.keys()),
      queueStatus: this.queueService.getQueueStatus()
    };
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

module.exports = JobSchedulerService;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\notification.service.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\notifications\notification.service.js
================================================================================

// ==========================================
// 1. SISTEMA DE NOTIFICA√á√ïES AVAN√áADO
// ==========================================
// backend/src/services/notifications/notification.service.js

const nodemailer = require('nodemailer');
const axios = require('axios');
const logger = require('../../config/logger');

class NotificationService {
  constructor() {
    this.emailTransporter = this.setupEmailTransporter();
    this.webhookConfig = this.loadWebhookConfig();
  }

  setupEmailTransporter() {
    if (!process.env.EMAIL_HOST) {
      return null;
    }

    return nodemailer.createTransporter({
      host: process.env.EMAIL_HOST,
      port: process.env.EMAIL_PORT || 587,
      secure: process.env.EMAIL_SECURE === 'true',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASSWORD
      }
    });
  }

  loadWebhookConfig() {
    return {
      slack: process.env.SLACK_WEBHOOK_URL,
      discord: process.env.DISCORD_WEBHOOK_URL,
      teams: process.env.TEAMS_WEBHOOK_URL,
      custom: process.env.CUSTOM_WEBHOOK_URL
    };
  }

  // Notificar sobre erro cr√≠tico nas APIs externas
  async notifyError(error, context = {}) {
    const message = {
      type: 'error',
      title: 'Erro Cr√≠tico - APIs Externas',
      description: error.message,
      context: {
        timestamp: new Date().toISOString(),
        integracao: context.integracao,
        operacao: context.operacao,
        ip: context.ip,
        ...context
      }
    };

    await Promise.allSettled([
      this.sendEmail(message),
      this.sendSlackNotification(message),
      this.sendCustomWebhook(message)
    ]);
  }

  // Notificar sobre sucesso em opera√ß√µes importantes
  async notifySuccess(data, context = {}) {
    const message = {
      type: 'success',
      title: 'Opera√ß√£o Bem-Sucedida - APIs Externas',
      description: data.message,
      context: {
        timestamp: new Date().toISOString(),
        processed: data.processed,
        created: data.created,
        updated: data.updated,
        ...context
      }
    };

    // S√≥ notificar sucessos para opera√ß√µes grandes (>50 itens)
    if (data.processed >= 50) {
      await this.sendSlackNotification(message);
    }
  }

  // Notificar sobre token expirando
  async notifyTokenExpiring(token) {
    const message = {
      type: 'warning',
      title: 'Token Expirando - APIs Externas',
      description: `Token da integra√ß√£o ${token.integracao} expira em breve`,
      context: {
        integracao: token.integracao,
        expires_at: token.expires_at,
        days_remaining: Math.ceil((new Date(token.expires_at) - new Date()) / (1000 * 60 * 60 * 24))
      }
    };

    await Promise.allSettled([
      this.sendEmail(message),
      this.sendSlackNotification(message)
    ]);
  }

  // Relat√≥rio di√°rio de atividade
  async sendDailyReport(stats) {
    const message = {
      type: 'info',
      title: 'Relat√≥rio Di√°rio - APIs Externas',
      description: 'Resumo das atividades das √∫ltimas 24 horas',
      context: stats
    };

    await Promise.allSettled([
      this.sendEmail(message),
      this.sendSlackNotification(message)
    ]);
  }

  async sendEmail(message) {
    if (!this.emailTransporter) {
      return;
    }

    try {
      const html = this.generateEmailHTML(message);
      
      await this.emailTransporter.sendMail({
        from: process.env.EMAIL_FROM || 'alerts@roadrw.com',
        to: process.env.ADMIN_EMAIL || 'admin@roadrw.com',
        subject: message.title,
        html: html
      });

      logger.info('Email de notifica√ß√£o enviado:', { type: message.type });

    } catch (error) {
      logger.error('Erro ao enviar email:', error);
    }
  }

  async sendSlackNotification(message) {
    if (!this.webhookConfig.slack) {
      return;
    }

    try {
      const color = {
        'error': '#FF0000',
        'warning': '#FFA500',
        'success': '#00FF00',
        'info': '#0000FF'
      }[message.type] || '#808080';

      const payload = {
        text: message.title,
        attachments: [{
          color: color,
          fields: [
            {
              title: 'Descri√ß√£o',
              value: message.description,
              short: false
            },
            {
              title: 'Timestamp',
              value: message.context.timestamp,
              short: true
            },
            {
              title: 'Integra√ß√£o',
              value: message.context.integracao || 'N/A',
              short: true
            }
          ]
        }]
      };

      await axios.post(this.webhookConfig.slack, payload);
      logger.info('Notifica√ß√£o Slack enviada:', { type: message.type });

    } catch (error) {
      logger.error('Erro ao enviar notifica√ß√£o Slack:', error);
    }
  }

  async sendCustomWebhook(message) {
    if (!this.webhookConfig.custom) {
      return;
    }

    try {
      await axios.post(this.webhookConfig.custom, {
        service: 'roadrw-external-api',
        ...message
      }, {
        timeout: 10000
      });

      logger.info('Webhook customizado enviado:', { type: message.type });

    } catch (error) {
      logger.error('Erro ao enviar webhook customizado:', error);
    }
  }

  generateEmailHTML(message) {
    const contextItems = Object.entries(message.context)
      .map(([key, value]) => `<li><strong>${key}:</strong> ${value}</li>`)
      .join('');

    return `
      <html>
        <body style="font-family: Arial, sans-serif; margin: 20px;">
          <h2 style="color: #333;">${message.title}</h2>
          <p style="color: #666; font-size: 16px;">${message.description}</p>
          
          <h3>Detalhes:</h3>
          <ul style="color: #555;">
            ${contextItems}
          </ul>
          
          <hr style="margin: 20px 0;">
          <p style="color: #999; font-size: 12px;">
            Este √© um email autom√°tico do sistema Road-RW.
            <br>Para configurar notifica√ß√µes, acesse o painel administrativo.
          </p>
        </body>
      </html>
    `;
  }
}

module.exports = NotificationService;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\services\webhook.service.js
================================================================================

// ==========================================
// WEBHOOK SERVICE - ATUALIZADO PARA NOVO FORMATO
// ==========================================
// backend/src/services/webhook.service.js

const logger = require('../config/logger');
const db = require('../database/connection');

// Repositories
const NotasFiscaisRepository = require('../repositories/notas-fiscais.repository');
const ClientesRepository = require('../repositories/clientes.repository');
const EmbarcadoresRepository = require('../repositories/embarcadores.repository');
const TransportadorasRepository = require('../repositories/transportadoras.repository');
const { EnderecoEntregaRepository } = require('../repositories/endereco-entrega.repository');
const OcorrenciasRepository = require('../repositories/ocorrencias.repository');

class WebhookService {
  constructor() {
    this.notasRepository = new NotasFiscaisRepository();
    this.clientesRepository = new ClientesRepository();
    this.embarcadoresRepository = new EmbarcadoresRepository();
    this.transportadorasRepository = new TransportadorasRepository();
    this.enderecoEntregaRepository = new EnderecoEntregaRepository();
    this.ocorrenciasRepository = new OcorrenciasRepository();
    this.clientePadraoId = null;
    this.embarcadorPadraoId = null;
    this.transportadoraPadraoId = null;
  }

  // Processar notas fiscais recebidas via webhook
  async processNotasFiscais(notfis) {
    const results = {
      processed: 0,
      errors: []
    };

    if (!Array.isArray(notfis)) {
      throw new Error('Formato inv√°lido: esperado array de notas fiscais');
    }

    // Pr√©-carrega os IDs padr√£o uma vez
    if (this.clientePadraoId === null) {
      this.clientePadraoId = await this.getClientePadraoId();
    }
    if (this.embarcadorPadraoId === null) {
      this.embarcadorPadraoId = await this.getEmbarcadorPadraoId();
    }
    if (this.transportadoraPadraoId === null) {
      this.transportadoraPadraoId = await this.getTransportadoraPadraoId();
    }

    for (const notaData of notfis) {
      try {
        await this.processNotaFiscalIndividual(notaData);
        results.processed++;
        
        logger.info('Nota fiscal processada com sucesso via webhook:', {
          numero: notaData.nro,
          processedCount: results.processed
        });
        
      } catch (error) {
        logger.error('Erro ao processar nota fiscal individual:', {
          numero: notaData.nro,
          error: error.message
        });
        
        results.errors.push({
          numero: notaData.nro,
          error: error.message
        });
      }
    }

    logger.info('Processamento de notas fiscais finalizado:', {
      total: notfis.length,
      processed: results.processed,
      errors: results.errors.length
    });

    return results;
  }

  // Processar uma nota fiscal individual
  async processNotaFiscalIndividual(notaData) {
    try {
      logger.info('Iniciando processamento de nota fiscal individual:', {
        numero: notaData.nro,
        hasRecebedor: !!(notaData.recebedor && notaData.recebedor.length > 0),
        hasRemetente: !!(notaData.remetente && notaData.remetente.length > 0),
        hasTransportadora: !!(notaData.transportadora && notaData.transportadora.length > 0),
        hasEnderecoEntrega: !!(notaData.endereco_entrega && notaData.endereco_entrega.length > 0)
      });

      // 1. Processar cliente (recebedor) - OBRIGAT√ìRIO
      let clienteId = this.clientePadraoId;
      
      if (notaData.recebedor && notaData.recebedor.length > 0 && notaData.recebedor[0].documento) {
        try {
          clienteId = await this.processCliente(notaData.recebedor[0]);
          logger.debug('Cliente processado:', { clienteId });
        } catch (error) {
          logger.warn('Falha ao processar cliente, usando padr√£o:', error.message);
          clienteId = this.clientePadraoId;
        }
      }

      // 2. Processar embarcador (remetente) - OBRIGAT√ìRIO
      let embarcadorId = this.embarcadorPadraoId;
      if (notaData.remetente && notaData.remetente.length > 0 && notaData.remetente[0].documento) {
        try {
          embarcadorId = await this.processEmbarcador(notaData.remetente[0]);
          logger.debug('Embarcador processado:', { embarcadorId });
        } catch (error) {
          logger.warn('Falha ao processar embarcador, usando padr√£o:', error.message);
          embarcadorId = this.embarcadorPadraoId;
        }
      }

      // 3. Processar transportadora - OBRIGAT√ìRIO
      let transportadoraId = this.transportadoraPadraoId;
      if (notaData.transportadora && notaData.transportadora.length > 0 && notaData.transportadora[0].cnpj) {
        try {
          transportadoraId = await this.processTransportadora(notaData.transportadora[0]);
          logger.debug('Transportadora processada:', { transportadoraId });
        } catch (error) {
          logger.warn('Falha ao processar transportadora, usando padr√£o:', error.message);
          transportadoraId = this.transportadoraPadraoId;
        }
      }

      // 4. Processar endere√ßo de entrega (opcional)
      let enderecoEntregaId = null;
      if (notaData.endereco_entrega && notaData.endereco_entrega.length > 0) {
        const enderecoData = notaData.endereco_entrega[0];
        if (enderecoData.endereco && enderecoData.cidade && enderecoData.uf) {
          try {
            enderecoEntregaId = await this.processEnderecoEntrega(enderecoData, clienteId);
            logger.debug('Endere√ßo de entrega processado:', { enderecoEntregaId });
          } catch (error) {
            logger.warn('Falha ao processar endere√ßo de entrega:', error.message);
          }
        }
      }

      // 5. Criar/atualizar nota fiscal
      const notaFiscalData = {
        nro: notaData.nro,
        ser: notaData.ser,
        valor: notaData.valor,
        peso_real: notaData.peso_real,
        peso_calculo: notaData.peso_calculo,
        qtd_volumes: notaData.qtd_volumes,
        metro_cubico: notaData.metro_cubico,
        valor_frete: notaData.valor_frete,
        chave_nf: notaData.chave_nf,
        nro_pedido: notaData.nro_pedido,
        cod_rep: notaData.cod_rep,
        nome_rep: notaData.nome_rep,
        observacoes: notaData.observacoes,
        mensagem: notaData.mensagem,
        previsao_entrega: notaData.previsao_entrega ? new Date(notaData.previsao_entrega) : null,
        data_entrega: notaData.data_entrega ? new Date(notaData.data_entrega) : null,
        nf_retida: notaData.nf_retida || false,
        cliente_id: clienteId,
        embarcador_id: embarcadorId,
        transportadora_id: transportadoraId,
        endereco_entrega_id: enderecoEntregaId,
        emi_nf: notaData.emi_nf ? new Date(notaData.emi_nf) : null,
        status_nf: notaData.status_nf || 'pendente',
        updated_at: new Date()
      };

      // Verificar se nota fiscal j√° existe
      let notaFiscal;
      const existingNota = await this.notasRepository.findByNumero(notaData.nro);
      
      if (existingNota && existingNota.length > 0) {
        const notaExistente = existingNota[0];
        notaFiscal = await this.notasRepository.update(notaExistente.id, notaFiscalData);
        logger.debug('Nota fiscal atualizada:', { id: notaExistente.id });
      } else {
        notaFiscalData.created_at = new Date();
        notaFiscal = await this.notasRepository.create(notaFiscalData);
        logger.debug('Nota fiscal criada:', { id: notaFiscal.id });
      }
      
      logger.info('Nota fiscal processada com sucesso:', {
        id: notaFiscal.id,
        numero: notaData.nro
      });

      return notaFiscal;

    } catch (error) {
      logger.error('Erro no processamento da nota fiscal:', {
        numero: notaData.nro,
        error: error.message
      });
      throw error;
    }
  }

  // Processar cliente (recebedor) - APENAS CAMPOS NECESS√ÅRIOS
  async processCliente(clienteData) {
    try {
      if (!clienteData.documento) {
        throw new Error('CNPJ/CPF do cliente √© obrigat√≥rio');
      }

      let cliente = await this.clientesRepository.findByDocumento(clienteData.documento);
      
      if (!cliente) {
        // Criar novo cliente com dados b√°sicos
        const clienteToCreate = {
          documento: clienteData.documento,
          cod_cliente: clienteData.cod_cliente || this.gerarCodigoClienteFromCnpj(clienteData.documento),
          nome: clienteData.nome || 'Cliente n√£o informado',
          endereco: clienteData.endereco || 'N√£o informado',
          bairro: clienteData.bairro || 'N√£o informado',
          cep: clienteData.cep || '00000000',
          cidade: clienteData.cidade || 'N√£o informado',
          uf: clienteData.uf || 'NI',
          contato: clienteData.contato || '0000000000',
          created_at: new Date(),
          updated_at: new Date()
        };
        
        cliente = await this.clientesRepository.create(clienteToCreate);
        logger.debug('Cliente criado:', { id: cliente.id, documento: clienteData.documento });
      } else {
        // Atualizar dados do cliente existente
        const clienteToUpdate = {
          nome: clienteData.nome || cliente.nome,
          endereco: clienteData.endereco || cliente.endereco,
          bairro: clienteData.bairro || cliente.bairro,
          cep: clienteData.cep || cliente.cep,
          cidade: clienteData.cidade || cliente.cidade,
          uf: clienteData.uf || cliente.uf,
          contato: clienteData.contato || cliente.contato,
          updated_at: new Date()
        };
        
        await this.clientesRepository.update(cliente.id, clienteToUpdate);
        logger.debug('Cliente atualizado:', { id: cliente.id, documento: clienteData.documento });
      }
      
      return cliente.id;
    } catch (error) {
      logger.error('Erro ao processar cliente:', error.message);
      throw error;
    }
  }

  // Processar embarcador (remetente)
  async processEmbarcador(embarcadorData) {
    try {
      if (!embarcadorData.documento) {
        throw new Error('CNPJ do embarcador √© obrigat√≥rio');
      }

      let embarcador = await this.embarcadoresRepository.findByDocumento(embarcadorData.documento);
      
      if (!embarcador) {
        // Criar novo embarcador
        const embarcadorToCreate = {
          documento: embarcadorData.documento,
          nome: embarcadorData.nome || 'Embarcador n√£o informado',
          endereco: embarcadorData.endereco || 'N√£o informado',
          cidade: embarcadorData.cidade || embarcadorData.municipio || 'N√£o informado',
          uf: embarcadorData.uf || 'NI',
          created_at: new Date(),
          updated_at: new Date()
        };
        
        embarcador = await this.embarcadoresRepository.create(embarcadorToCreate);
        logger.debug('Embarcador criado:', { id: embarcador.id, documento: embarcadorData.documento });
      } else {
        // Atualizar dados do embarcador existente
        const embarcadorToUpdate = {
          nome: embarcadorData.nome || embarcador.nome,
          endereco: embarcadorData.endereco || embarcador.endereco,
          cidade: embarcadorData.cidade || embarcadorData.municipio || embarcador.cidade,
          uf: embarcadorData.uf || embarcador.uf,
          updated_at: new Date()
        };
        
        await this.embarcadoresRepository.update(embarcador.id, embarcadorToUpdate);
        logger.debug('Embarcador atualizado:', { id: embarcador.id, documento: embarcadorData.documento });
      }
      
      return embarcador.id;
    } catch (error) {
      logger.error('Erro ao processar embarcador:', error.message);
      throw error;
    }
  }

  // Processar transportadora
  async processTransportadora(transportadoraData) {
    try {
      if (!transportadoraData.cnpj) {
        throw new Error('CNPJ da transportadora √© obrigat√≥rio');
      }

      let transportadora = await this.transportadorasRepository.findByCnpj(transportadoraData.cnpj);
      
      if (!transportadora) {
        // Criar nova transportadora
        const transportadoraToCreate = {
          cnpj: transportadoraData.cnpj,
          nome: transportadoraData.nome || 'Transportadora n√£o informada',
          endereco: transportadoraData.endereco || 'N√£o informado',
          municipio: transportadoraData.municipio || transportadoraData.cidade || 'N√£o informado',
          uf: transportadoraData.uf || 'NI',
          created_at: new Date(),
          updated_at: new Date()
        };
        
        transportadora = await this.transportadorasRepository.create(transportadoraToCreate);
        logger.debug('Transportadora criada:', { id: transportadora.id, cnpj: transportadoraData.cnpj });
      } else {
        // Atualizar dados da transportadora existente
        const transportadoraToUpdate = {
          nome: transportadoraData.nome || transportadora.nome,
          endereco: transportadoraData.endereco || transportadora.endereco,
          municipio: transportadoraData.municipio || transportadoraData.cidade || transportadora.municipio,
          uf: transportadoraData.uf || transportadora.uf,
          updated_at: new Date()
        };
        
        await this.transportadorasRepository.update(transportadora.id, transportadoraToUpdate);
        logger.debug('Transportadora atualizada:', { id: transportadora.id, cnpj: transportadoraData.cnpj });
      }
      
      return transportadora.id;
    } catch (error) {
      logger.error('Erro ao processar transportadora:', error.message);
      throw error;
    }
  }

  // Processar endere√ßo de entrega usando m√©todo do reposit√≥rio
  async processEnderecoEntrega(enderecoData, clienteId) {
    try {
      logger.debug('Processando endere√ßo de entrega:', {
        endereco: enderecoData.endereco,
        cidade: enderecoData.cidade,
        uf: enderecoData.uf,
        clienteId: clienteId || this.clientePadraoId
      });

      // Delegar processamento para o reposit√≥rio
      const resultado = await this.enderecoEntregaRepository.processEnderecoEntrega(
        enderecoData,
        clienteId || this.clientePadraoId
      );

      logger.debug('Endere√ßo de entrega processado:', {
        id: resultado.id,
        isNew: resultado.isNew,
        endereco: enderecoData.endereco
      });

      return resultado.id;
    } catch (error) {
      logger.error('Erro ao processar endere√ßo de entrega:', error.message);
      throw error;
    }
  }

  // === M√âTODOS DE APOIO ===

  async getClientePadraoId() {
    try {
      const cnpjPadrao = '00000000000000';
      
      let clientePadrao = await this.clientesRepository.findByDocumento(cnpjPadrao);
      if (clientePadrao) {
        return clientePadrao.id;
      }
      
      logger.info('Criando cliente padr√£o...');
      const clienteToCreate = {
        documento: cnpjPadrao,
        cod_cliente: 99999,
        nome: 'Cliente N√£o Informado',
        endereco: 'N√£o informado',
        bairro: 'N√£o informado',
        cep: '00000000',
        cidade: 'N√£o informado',
        uf: 'NI',
        contato: '0000000000',
        created_at: new Date(),
        updated_at: new Date()
      };
      
      const novoCliente = await this.clientesRepository.create(clienteToCreate);
      logger.info('Cliente padr√£o criado com sucesso:', { id: novoCliente.id });
      return novoCliente.id;
      
    } catch (error) {
      logger.error('Falha ao obter cliente padr√£o:', error.message);
      throw new Error('Sistema de clientes indispon√≠vel');
    }
  }

  async getEmbarcadorPadraoId() {
    try {
      const cnpjPadrao = '00000000000100';
      let embarcador = await this.embarcadoresRepository.findByDocumento(cnpjPadrao);
      
      if (embarcador) {
        return embarcador.id;
      }
      
      const embarcadorData = {
        documento: cnpjPadrao,
        nome: 'Embarcador N√£o Informado',
        endereco: 'N√£o informado',
        cidade: 'N√£o informado',
        uf: 'NI',
        created_at: new Date(),
        updated_at: new Date()
      };
      
      const novoEmbarcador = await this.embarcadoresRepository.create(embarcadorData);
      return novoEmbarcador.id;
      
    } catch (error) {
      logger.error('Falha ao obter embarcador padr√£o:', error.message);
      throw new Error('N√£o foi poss√≠vel obter embarcador');
    }
  }

  async getTransportadoraPadraoId() {
    try {
      const cnpjPadrao = '00000000000200';
      let transportadora = await this.transportadorasRepository.findByCnpj(cnpjPadrao);
      
      if (transportadora) {
        return transportadora.id;
      }
      
      const transportadoraData = {
        cnpj: cnpjPadrao,
        nome: 'Transportadora N√£o Informada',
        endereco: 'N√£o informado',
        municipio: 'N√£o informado',
        uf: 'NI',
        created_at: new Date(),
        updated_at: new Date()
      };
      
      const novaTransportadora = await this.transportadorasRepository.create(transportadoraData);
      return novaTransportadora.id;
      
    } catch (error) {
      logger.error('Falha ao obter transportadora padr√£o:', error.message);
      throw new Error('N√£o foi poss√≠vel obter transportadora');
    }
  }

  // Processar ocorr√™ncias recebidas via webhook
  async processOcorrencias(ocorrencias) {
    const results = {
      processed: 0,
      errors: []
    };

    if (!Array.isArray(ocorrencias)) {
      throw new Error('Formato inv√°lido: esperado array de ocorr√™ncias');
    }

    for (const ocorrenciaData of ocorrencias) {
      try {
        await this.processOcorrenciaIndividual(ocorrenciaData);
        results.processed++;
        
        logger.info('Ocorr√™ncia processada com sucesso via webhook:', {
          nro_nf: ocorrenciaData.nro_nf,
          codigo: ocorrenciaData.codigo,
          processedCount: results.processed
        });
        
      } catch (error) {
        logger.error('Erro ao processar ocorr√™ncia individual:', {
          nro_nf: ocorrenciaData.nro_nf,
          codigo: ocorrenciaData.codigo,
          error: error.message
        });
        
        results.errors.push({
          nro_nf: ocorrenciaData.nro_nf,
          codigo: ocorrenciaData.codigo,
          error: error.message
        });
      }
    }

    logger.info('Processamento de ocorr√™ncias finalizado:', {
      total: ocorrencias.length,
      processed: results.processed,
      errors: results.errors.length
    });

    return results;
  }

  // Processar uma ocorr√™ncia individual
// Processar uma ocorr√™ncia individual
async processOcorrenciaIndividual(ocorrenciaData) {
  try {
    logger.info('Iniciando processamento de ocorr√™ncia individual:', {
      nro_nf: ocorrenciaData.nro_nf,
      codigo: ocorrenciaData.codigo,
      descricao: ocorrenciaData.descricao
    });

    // Validar campos obrigat√≥rios baseados no schema real
    if (!ocorrenciaData.nro_nf) {
      throw new Error('N√∫mero da NF √© obrigat√≥rio');
    }

    if (!ocorrenciaData.codigo) {
      throw new Error('C√≥digo da ocorr√™ncia √© obrigat√≥rio');
    }

    if (!ocorrenciaData.descricao) {
      throw new Error('Descri√ß√£o da ocorr√™ncia √© obrigat√≥ria');
    }

    if (!ocorrenciaData.dataHoraEnvio) {
      throw new Error('Data/hora de envio √© obrigat√≥ria');
    }

    // Verificar se a nota fiscal existe
    const notaFiscal = await this.notasRepository.findByNumero(ocorrenciaData.nro_nf);
    if (!notaFiscal || notaFiscal.length === 0) {
      throw new Error(`Nota fiscal ${ocorrenciaData.nro_nf} n√£o encontrada`);
    }

    // Validar c√≥digo de ocorr√™ncia
    const codigoOcorrencia = await this.validateCodigoOcorrencia(ocorrenciaData.codigo);
    if (!codigoOcorrencia) {
      logger.warn(`C√≥digo de ocorr√™ncia ${ocorrenciaData.codigo} n√£o encontrado, criando mesmo assim`);
    }

    // Verificar duplica√ß√£o
    const existente = await this.findOcorrenciaExistente(
      ocorrenciaData.nro_nf,
      ocorrenciaData.codigo,
      ocorrenciaData.dataHoraEnvio
    );

    if (existente) {
      logger.info('Ocorr√™ncia j√° existe, ignorando:', {
        id: existente.id,
        nro_nf: ocorrenciaData.nro_nf,
        codigo: ocorrenciaData.codigo
      });
      return existente;
    }

    // Preparar dados da ocorr√™ncia baseados no schema real
    const ocorrenciaToCreate = {
      // Campos obrigat√≥rios
      nro_nf: parseInt(ocorrenciaData.nro_nf),                                    // integer NOT NULL
      dataHoraEnvio: new Date(ocorrenciaData.dataHoraEnvio),                     // timestamp NOT NULL  
      codigo: parseInt(ocorrenciaData.codigo),                                   // integer NOT NULL
      descricao: ocorrenciaData.descricao,                                       // text NOT NULL
      
      // Campos opcionais
      dataHoraEvento: ocorrenciaData.dataHoraEvento ? new Date(ocorrenciaData.dataHoraEvento) : null,  // timestamp nullable
      complemento: ocorrenciaData.complemento || null,                           // varchar(255) nullable
      nomeRecebedor: ocorrenciaData.nomeRecebedor || null,                       // varchar(255) nullable
      docRecebedor: ocorrenciaData.docRecebedor || null,                         // char(20) nullable
      latitude: ocorrenciaData.latitude || null,                                 // numeric(8,2) nullable
      longitude: ocorrenciaData.longitude || null,                               // numeric(8,2) nullable
      linkComprovante: ocorrenciaData.linkComprovante || null,                   // text nullable
      zaapId: ocorrenciaData.zaapId || null,                                     // varchar(255) nullable
      messageId: ocorrenciaData.messageId || null,                               // varchar(255) nullable
      id_z_api: ocorrenciaData.id_z_api || null,                                 // varchar(255) nullable
      enviado_zap: ocorrenciaData.enviado_zap !== undefined ? ocorrenciaData.enviado_zap : false,  // boolean DEFAULT false
      enviado_date: ocorrenciaData.enviado_date ? new Date(ocorrenciaData.enviado_date) : null,    // timestamp nullable
      status: this.validateStatus(ocorrenciaData.status),                        // varchar(255) com constraint
      link_comprovante_sistema: ocorrenciaData.link_comprovante_sistema || null, // text nullable
      status_download_comprovante: ocorrenciaData.status_download_comprovante || null,  // integer nullable
      tipo_comprovante_download: ocorrenciaData.tipo_comprovante_download || null,      // varchar(255) nullable
      
      // Timestamps autom√°ticos
      created_at: new Date(),
      updated_at: new Date()
    };

    // Criar ocorr√™ncia
    const ocorrencia = await this.ocorrenciasRepository.create(ocorrenciaToCreate);
    logger.debug('Ocorr√™ncia criada:', { id: ocorrencia.id });

    // Atualizar status da nota fiscal se c√≥digo √© finalizador
    if (codigoOcorrencia && codigoOcorrencia.finalizadora) {
      await this.updateNotaFiscalStatus(ocorrenciaData.nro_nf, codigoOcorrencia);
    }

    logger.info('Ocorr√™ncia processada com sucesso:', {
      id: ocorrencia.id,
      nro_nf: ocorrenciaData.nro_nf,
      codigo: ocorrenciaData.codigo
    });

    return ocorrencia;

  } catch (error) {
    logger.error('Erro no processamento da ocorr√™ncia:', {
      nro_nf: ocorrenciaData.nro_nf,
      codigo: ocorrenciaData.codigo,
      error: error.message,
      stack: error.stack
    });
    throw error;
  }
}

// Validar status (deve ser um dos valores permitidos pela constraint)
validateStatus(status) {
  const validStatuses = ['waiting', 'running', 'finished'];
  
  if (!status) {
    return 'waiting'; // Default
  }
  
  if (validStatuses.includes(status)) {
    return status;
  }
  
  logger.warn(`Status inv√°lido recebido: ${status}, usando 'waiting'`);
  return 'waiting';
}

// Validar se c√≥digo de ocorr√™ncia existe
async validateCodigoOcorrencia(codigo) {
  try {
    // Buscar diretamente na tabela codigo_ocorrencias pelo campo 'codigo'
    const sql = `SELECT * FROM codigo_ocorrencias WHERE codigo = $1 LIMIT 1`;
    const result = await db.query(sql, [codigo]);
    
    return result.rows[0] || null;
  } catch (error) {
    logger.warn('Erro ao validar c√≥digo de ocorr√™ncia:', error.message);
    return null;
  }
}

// Buscar ocorr√™ncia existente para evitar duplica√ß√£o
async findOcorrenciaExistente(nroNf, codigo, dataHoraEnvio) {
  try {
    // Buscar ocorr√™ncia com mesmo NF, c√≥digo e data/hora de envio
    const sql = `
      SELECT id FROM ocorrencias 
      WHERE nro_nf = $1 
      AND codigo = $2 
      AND "dataHoraEnvio" = $3 
      LIMIT 1
    `;
    
    const result = await db.query(sql, [
      nroNf, 
      codigo, 
      new Date(dataHoraEnvio)
    ]);

    return result.rows[0] || null;
  } catch (error) {
    logger.warn('Erro ao buscar ocorr√™ncia existente:', error.message);
    return null;
  }
}

// Atualizar status da nota fiscal baseado na ocorr√™ncia finalizadora
async updateNotaFiscalStatus(nroNf, codigoOcorrencia) {
  try {
    const notaFiscal = await this.notasRepository.findByNumero(nroNf);
    if (!notaFiscal || notaFiscal.length === 0) {
      return;
    }

    const nota = notaFiscal[0];
    let novoStatus = nota.status_nf;

    // Determinar novo status baseado no tipo de ocorr√™ncia
    switch (codigoOcorrencia.tipo) {
      case 'entrega':
        novoStatus = 'entregue';
        break;
      case 'coleta':
        novoStatus = 'coletado';
        break;
      case 'ocorrencia':
        if (codigoOcorrencia.descricao && codigoOcorrencia.descricao.toLowerCase().includes('entregue')) {
          novoStatus = 'entregue';
        }
        break;
      default:
        // Manter status atual
        break;
    }

    if (novoStatus !== nota.status_nf) {
      await this.notasRepository.update(nota.id, {
        status_nf: novoStatus,
        updated_at: new Date()
      });

      logger.info('Status da nota fiscal atualizado:', {
        nro_nf: nroNf,
        statusAnterior: nota.status_nf,
        novoStatus: novoStatus
      });
    }
  } catch (error) {
    logger.error('Erro ao atualizar status da nota fiscal:', {
      nro_nf: nroNf,
      error: error.message
    });
    // N√£o lan√ßa erro para n√£o interromper processamento da ocorr√™ncia
  }
}

  // Validar se c√≥digo de ocorr√™ncia existe
  async validateCodigoOcorrencia(codigo) {
    try {
      // Buscar diretamente na tabela codigo_ocorrencias pelo campo 'codigo'
      const sql = `SELECT * FROM codigo_ocorrencias WHERE codigo = $1 LIMIT 1`;
      const result = await db.query(sql, [codigo]);
      
      return result.rows[0] || null;
    } catch (error) {
      logger.warn('Erro ao validar c√≥digo de ocorr√™ncia:', error.message);
      return null;
    }
  }

  // Buscar ocorr√™ncia existente para evitar duplica√ß√£o
  async findOcorrenciaExistente(nroNf, codigo, dataHoraEnvio) {
    try {
      // Buscar ocorr√™ncia com mesmo NF, c√≥digo e data/hora de envio usando SQL direto
      const sql = `
        SELECT id FROM ocorrencias 
        WHERE nro_nf = $1 
        AND codigo = $2 
        AND "dataHoraEnvio" = $3 
        LIMIT 1
      `;
      
      const result = await db.query(sql, [
        nroNf, 
        codigo, 
        new Date(dataHoraEnvio)
      ]);

      return result.rows[0] || null;
    } catch (error) {
      logger.warn('Erro ao buscar ocorr√™ncia existente:', error.message);
      return null;
    }
  }

  // Atualizar status da nota fiscal baseado na ocorr√™ncia finalizadora
  async updateNotaFiscalStatus(nroNf, codigoOcorrencia) {
    try {
      const notaFiscal = await this.notasRepository.findByNumero(nroNf);
      if (!notaFiscal || notaFiscal.length === 0) {
        return;
      }

      const nota = notaFiscal[0];
      let novoStatus = nota.status_nf;

      // Determinar novo status baseado no tipo de ocorr√™ncia
      switch (codigoOcorrencia.tipo) {
        case 'entrega':
          novoStatus = 'entregue';
          break;
        case 'coleta':
          novoStatus = 'coletado';
          break;
        case 'ocorrencia':
          if (codigoOcorrencia.descricao && codigoOcorrencia.descricao.toLowerCase().includes('entregue')) {
            novoStatus = 'entregue';
          }
          break;
        default:
          // Manter status atual
          break;
      }

      if (novoStatus !== nota.status_nf) {
        await this.notasRepository.update(nota.id, {
          status_nf: novoStatus,
          updated_at: new Date()
        });

        logger.info('Status da nota fiscal atualizado:', {
          nro_nf: nroNf,
          statusAnterior: nota.status_nf,
          novoStatus: novoStatus
        });
      }
    } catch (error) {
      logger.error('Erro ao atualizar status da nota fiscal:', {
        nro_nf: nroNf,
        error: error.message
      });
      // N√£o lan√ßa erro para n√£o interromper processamento da ocorr√™ncia
    }
  }
}

module.exports = WebhookService;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\tests\external\external-notas.controller.integration.test.js
================================================================================

// ==========================================
// 2. TESTES DE INTEGRA√á√ÉO - EXTERNAL CONTROLLER
// ==========================================
// backend/tests/external/external-notas.controller.integration.test.js

const request = require('supertest');
const express = require('express');
const ExternalNotasController = require('../../src/controllers/external-notas.controller');

describe('ExternalNotasController Integration', () => {
  let app;
  let mockRepositories;
  let controller;

  beforeEach(() => {
    mockRepositories = {
      notas: {
        findByChaveNF: jest.fn(),
        create: jest.fn(),
        update: jest.fn()
      },
      clientes: {
        findByCnpj: jest.fn(),
        create: jest.fn()
      },
      transportadoras: {
        findByCnpj: jest.fn(),
        create: jest.fn()
      },
      embarcadores: {
        findByCnpj: jest.fn(),
        create: jest.fn()
      },
      externalLogs: {
        create: jest.fn()
      }
    };

    controller = new ExternalNotasController(mockRepositories);

    app = express();
    app.use(express.json());

    // Mock authentication middleware
    app.use((req, res, next) => {
      req.externalAuth = {
        token: { token: 'test-token', integracao: 'test' },
        transportadora: { id: 1, nome: 'Test Transport' }
      };
      next();
    });

    app.post('/external/notas-fiscais', (req, res) => 
      controller.receiveNotasFiscais(req, res)
    );
  });

  test('deve processar notas fiscais v√°lidas', async () => {
    const validPayload = {
      notfis: [{
        peso_calculo: 0.0,
        chave_nf: "35250761418042000131550040018757221276116250",
        ser: 4,
        emi_nf: "2025-07-04T00:00:00.000Z",
        nro: 1875722,
        nro_pedido: 2413919,
        peso_real: 1.032,
        qtd_volumes: 1,
        valor: 748.14,
        recebedor: [{
          cod_cliente: "56440",
          documento: "24876491000369",
          nome: "POLICLINICA QUALITY LTDA",
          endereco: "R RIACHUELO,685",
          cidade: "C√ÅCERES",
          uf: "MT"
        }],
        remetente: [{
          documento: "61418042000131",
          nome: "CIRURGICA FERNANDES C.MAT.CIR.HO.SO.LTDA"
        }],
        transportadora: [{
          cnpj: "95591723000119",
          nome: "TNT MERCURIO CARGAS E ENCOMENDAS EXPRESSAS LTDA"
        }]
      }]
    };

    // Mock successful creation
    mockRepositories.transportadoras.findByCnpj.mockResolvedValue(null);
    mockRepositories.transportadoras.create.mockResolvedValue({ id: 1 });
    mockRepositories.clientes.findByCnpj.mockResolvedValue(null);
    mockRepositories.clientes.create.mockResolvedValue({ id: 1 });
    mockRepositories.embarcadores.findByCnpj.mockResolvedValue(null);
    mockRepositories.embarcadores.create.mockResolvedValue({ id: 1 });
    mockRepositories.notas.findByChaveNF.mockResolvedValue(null);
    mockRepositories.notas.create.mockResolvedValue({ id: 1 });

    const response = await request(app)
      .post('/external/notas-fiscais')
      .send(validPayload);

    expect(response.status).toBe(200);
    expect(response.body.success).toBe(true);
    expect(response.body.data.summary.processed).toBe(1);
    expect(response.body.data.summary.created).toBe(1);
  });

  test('deve retornar erro para payload inv√°lido', async () => {
    const invalidPayload = {
      notfis: [{
        // Faltando campos obrigat√≥rios
        nro: 123
      }]
    };

    const response = await request(app)
      .post('/external/notas-fiscais')
      .send(invalidPayload);

    expect(response.status).toBe(400);
    expect(response.body.success).toBe(false);
  });
});



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\tests\external\test-external-apis.js
================================================================================

// ==========================================
// 3. SCRIPT DE TESTES DE API
// ==========================================
// backend/scripts/test-external-apis.js

const axios = require('axios');
const logger = require('../src/config/logger');

class ExternalAPITester {
  constructor(baseURL = 'http://localhost:3001', token = null) {
    this.baseURL = baseURL;
    this.token = token;
    this.client = axios.create({
      baseURL: `${baseURL}/api/external`,
      headers: token ? { 'Authorization': `Bearer ${token}` } : {},
      timeout: 30000
    });
  }

  async runAllTests() {
    logger.info('=== INICIANDO TESTES DAS APIS EXTERNAS ===');

    const tests = [
      { name: 'Health Check', test: () => this.testHealthCheck() },
      { name: 'Notas Fiscais - Envio', test: () => this.testNotasFiscaisEnvio() },
      { name: 'Notas Fiscais - Consulta Status', test: () => this.testConsultaStatus() },
      { name: 'Ocorr√™ncias - Envio', test: () => this.testOcorrenciasEnvio() },
      { name: 'Webhook', test: () => this.testWebhook() }
    ];

    const results = {
      passed: 0,
      failed: 0,
      total: tests.length
    };

    for (const testCase of tests) {
      try {
        logger.info(`\nüß™ Testando: ${testCase.name}`);
        await testCase.test();
        results.passed++;
        logger.info(`‚úÖ ${testCase.name} - PASSOU`);
      } catch (error) {
        results.failed++;
        logger.error(`‚ùå ${testCase.name} - FALHOU:`, error.message);
      }
    }

    logger.info('\n=== RESULTADO DOS TESTES ===');
    logger.info(`Total: ${results.total}`);
    logger.info(`Passou: ${results.passed}`);
    logger.info(`Falhou: ${results.failed}`);
    logger.info(`Taxa de sucesso: ${Math.round((results.passed / results.total) * 100)}%`);

    return results;
  }

  async testHealthCheck() {
    const response = await this.client.get('/health');
    
    if (response.status !== 200) {
      throw new Error(`Expected status 200, got ${response.status}`);
    }

    if (!response.data.success) {
      throw new Error('Health check returned success: false');
    }
  }

  async testNotasFiscaisEnvio() {
    if (!this.token) {
      throw new Error('Token necess√°rio para teste de notas fiscais');
    }

    const payload = {
      notfis: [{
        chave_nf: "12345678901234567890123456789012345678901234",
        nro: 123456,
        ser: 1,
        emi_nf: "2025-01-15T00:00:00.000Z",
        peso_real: 1.5,
        qtd_volumes: 1,
        valor: 100.00,
        recebedor: [{
          documento: "12345678000195",
          nome: "Empresa Teste Ltda",
          endereco: "Rua Teste, 123",
          cidade: "S√£o Paulo",
          uf: "SP"
        }],
        remetente: [{
          documento: "98765432000198",
          nome: "Remetente Teste Ltda"
        }],
        transportadora: [{
          cnpj: "11223344000156",
          nome: "Transportadora Teste"
        }]
      }]
    };

    const response = await this.client.post('/notas-fiscais', payload);
    
    if (![200, 206].includes(response.status)) {
      throw new Error(`Expected status 200 or 206, got ${response.status}`);
    }

    if (!response.data.success) {
      throw new Error('Request failed: ' + response.data.message);
    }
  }

  async testConsultaStatus() {
    if (!this.token) {
      throw new Error('Token necess√°rio para consulta de status');
    }

    // Usar chave de exemplo
    const chaveNF = "12345678901234567890123456789012345678901234";
    
    const response = await this.client.get(`/notas-fiscais/${chaveNF}/status`);
    
    // Aceitar 404 (n√£o encontrada) ou 200 (encontrada)
    if (![200, 404].includes(response.status)) {
      throw new Error(`Expected status 200 or 404, got ${response.status}`);
    }
  }

  async testOcorrenciasEnvio() {
    if (!this.token) {
      throw new Error('Token necess√°rio para teste de ocorr√™ncias');
    }

    const payload = {
      ocorrencias: [{
        nro_nf: 123456,
        codigo: "ENTREGUE",
        descricao: "Mercadoria entregue ao destinat√°rio",
        data_evento: "2025-01-15T14:30:00.000Z",
        recebedor: "Jo√£o Silva"
      }]
    };

    const response = await this.client.post('/ocorrencias', payload);
    
    if (![200, 206].includes(response.status)) {
      throw new Error(`Expected status 200 or 206, got ${response.status}`);
    }
  }

  async testWebhook() {
    if (!this.token) {
      throw new Error('Token necess√°rio para teste de webhook');
    }

    const payload = {
      evento: "ocorrencia",
      dados: {
        nro_nf: 123456,
        codigo: "EM_TRANSITO",
        descricao: "Mercadoria em tr√¢nsito"
      }
    };

    const response = await this.client.post('/webhook', payload);
    
    if (response.status !== 200) {
      throw new Error(`Expected status 200, got ${response.status}`);
    }
  }
}

async function runTests() {
  const baseURL = process.env.BASE_URL || 'http://localhost:3001';
  const token = process.argv[2];

  if (!token) {
    logger.warn('Executando testes limitados (sem token)');
    logger.warn('Para testes completos: npm run external:test TOKEN');
  }

  const tester = new ExternalAPITester(baseURL, token);
  const results = await tester.runAllTests();

  if (results.failed > 0) {
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runTests().catch(error => {
    logger.error('Erro nos testes:', error);
    process.exit(1);
  });
}

module.exports = { ExternalAPITester };



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\tests\external\upsert-manager.service.test.js
================================================================================


// ==========================================
// 1. TESTES UNIT√ÅRIOS - UPSERT MANAGER
// ==========================================
// backend/tests/external/upsert-manager.service.test.js

const UpsertManagerService = require('../../src/services/external/upsert-manager.service');

describe('UpsertManagerService', () => {
  let service;
  let mockRepositories;

  beforeEach(() => {
    mockRepositories = {
      clientes: {
        findByCnpj: jest.fn(),
        create: jest.fn(),
        update: jest.fn()
      },
      embarcadores: {
        findByCnpj: jest.fn(),
        create: jest.fn(),
        update: jest.fn()
      },
      transportadoras: {
        findByCnpj: jest.fn(),
        create: jest.fn(),
        update: jest.fn()
      },
      enderecoEntrega: {
        findSimilar: jest.fn(),
        create: jest.fn(),
        update: jest.fn()
      }
    };

    service = new UpsertManagerService(mockRepositories);
  });

  describe('upsertCliente', () => {
    const validRecebedor = {
      documento: '12345678000195',
      nome: 'Empresa Teste Ltda',
      endereco: 'Rua Teste, 123',
      cidade: 'S√£o Paulo',
      uf: 'SP'
    };

    test('deve criar novo cliente quando n√£o existe', async () => {
      mockRepositories.clientes.findByCnpj.mockResolvedValue(null);
      mockRepositories.clientes.create.mockResolvedValue({
        id: 1,
        ...validRecebedor,
        cnpj: '12345678000195'
      });

      const result = await service.upsertCliente(validRecebedor);

      expect(result.action).toBe('created');
      expect(result.cliente.id).toBe(1);
      expect(mockRepositories.clientes.create).toHaveBeenCalledWith(
        expect.objectContaining({
          cnpj: '12345678000195',
          nome: 'EMPRESA TESTE LTDA'
        })
      );
    });

    test('deve atualizar cliente existente quando h√° diferen√ßas', async () => {
      const existingCliente = {
        id: 1,
        cnpj: '12345678000195',
        nome: 'EMPRESA TESTE LTDA',
        cidade: 'Rio de Janeiro' // Diferente
      };

      mockRepositories.clientes.findByCnpj.mockResolvedValue(existingCliente);
      mockRepositories.clientes.update.mockResolvedValue({
        ...existingCliente,
        cidade: 'S√ÉO PAULO'
      });

      const result = await service.upsertCliente(validRecebedor);

      expect(result.action).toBe('updated');
      expect(mockRepositories.clientes.update).toHaveBeenCalledWith(1, {
        cidade: 'S√£o Paulo'
      });
    });

    test('deve retornar no_changes quando n√£o h√° diferen√ßas', async () => {
      const existingCliente = {
        id: 1,
        cnpj: '12345678000195',
        nome: 'EMPRESA TESTE LTDA',
        endereco: 'RUA TESTE, 123',
        cidade: 'S√ÉO PAULO',
        uf: 'SP'
      };

      mockRepositories.clientes.findByCnpj.mockResolvedValue(existingCliente);

      const result = await service.upsertCliente(validRecebedor);

      expect(result.action).toBe('no_changes');
      expect(mockRepositories.clientes.update).not.toHaveBeenCalled();
    });

    test('deve rejeitar CNPJ inv√°lido', async () => {
      const invalidRecebedor = {
        ...validRecebedor,
        documento: '12345678000199' // CNPJ inv√°lido
      };

      await expect(service.upsertCliente(invalidRecebedor))
        .rejects.toThrow('Documento inv√°lido');
    });
  });

  describe('getDataChanges', () => {
    test('deve identificar corretamente as diferen√ßas', () => {
      const existing = {
        nome: 'EMPRESA TESTE',
        cidade: 'S√ÉO PAULO',
        uf: 'SP'
      };

      const newData = {
        nome: 'Empresa Teste Ltda', // Diferente ap√≥s normaliza√ß√£o
        cidade: 'S√£o Paulo', // Igual ap√≥s normaliza√ß√£o
        uf: 'RJ' // Diferente
      };

      const changes = service.getDataChanges(existing, newData);

      expect(changes).toEqual({
        nome: 'Empresa Teste Ltda',
        uf: 'RJ'
      });
    });

    test('deve tratar valores null/undefined', () => {
      const existing = {
        nome: 'TESTE',
        endereco: null
      };

      const newData = {
        nome: 'TESTE',
        endereco: 'Rua Nova'
      };

      const changes = service.getDataChanges(existing, newData);

      expect(changes).toEqual({
        endereco: 'Rua Nova'
      });
    });
  });
});



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\tests\webhook-test.js
================================================================================

// =====================================
// TESTE R√ÅPIDO - webhook-test.js
// =====================================

const axios = require('axios');

// Payload m√≠nimo para testar
const testPayload = {
  "notfis": [
    {
      "nro": 12345,
      "valor": 1000.50,
      "recebedor": [
        {
          "documento": "12345678000195",
          "nome": "EMPRESA TESTE LTDA"
        }
      ],
      "remetente": [
        {
          "documento": "98765432000198",
          "nome": "FORNECEDOR TESTE LTDA"
        }
      ],
      "transportadora": [
        {
          "cnpj": "11111111000111",
          "nome": "TRANSPORTADORA TESTE LTDA"
        }
      ]
    }
  ]
};

async function testarWebhook() {
  try {
    console.log('üß™ Testando webhook...');
    
    const response = await axios.post('http://localhost:3001/api/webhook/notafiscal', testPayload, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ Sucesso!');
    console.log('Status:', response.status);
    console.log('Dados:', JSON.stringify(response.data, null, 2));

  } catch (error) {
    console.error('‚ùå Erro!');
    console.error('Status:', error.response?.status);
    console.error('Dados:', JSON.stringify(error.response?.data, null, 2));
  }
}

testarWebhook();

// =====================================
// COMO USAR:
// =====================================
// 1. Salve como webhook-test.js na pasta backend
// 2. Execute: node webhook-test.js
// 3. Veja se funciona com payload simples

// =====================================
// VERIFICAR LOGS DO SERVIDOR
// =====================================
// No terminal do servidor, voc√™ deve ver logs como:
// [INFO] Webhook request received - quantidade_notas: 1
// [INFO] Processando nota fiscal 1/1 - nro: 12345
// [WARN] M√©todo findByDocumento n√£o existe em ClientesRepository
// [INFO] Novo cliente criado - id: X, documento: 12345678000195


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\utils\constants.js
================================================================================

// HTTP Status Codes
const HTTP_STATUS = {
  OK: 200,
  CREATED: 201,
  NO_CONTENT: 204,
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  CONFLICT: 409,
  UNPROCESSABLE_ENTITY: 422,
  TOO_MANY_REQUESTS: 429,
  INTERNAL_SERVER_ERROR: 500,
  SERVICE_UNAVAILABLE: 503
};

// User Roles
const USER_ROLES = {
  ADMIN: 'admin',
  GESTOR: 'gestor',
  OPERADOR: 'operador',
  VIEWER: 'viewer'
};

// Estados brasileiros
const BRAZILIAN_STATES = [
  'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO',
  'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI',
  'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'
];

// Status de notas fiscais
const NOTA_FISCAL_STATUS = {
  PENDENTE: 'pendente',
  EM_TRANSITO: 'em_transito',
  ENTREGUE: 'entregue',
  DEVOLVIDA: 'devolvida',
  CANCELADA: 'cancelada'
};

// Tipos de ocorr√™ncia
const OCORRENCIA_TIPOS = {
  ENTREGA: 'entrega',
  COLETA: 'coleta',
  TENTATIVA: 'tentativa',
  AVARIA: 'avaria',
  EXTRAVIO: 'extravio'
};

// Status de romaneio
const ROMANEIO_STATUS = {
  CRIADO: 'criado',
  EM_ROTA: 'em_rota',
  FINALIZADO: 'finalizado',
  CANCELADO: 'cancelado'
};

// Tipos de ve√≠culo
const VEICULO_TIPOS = {
  TRUCK: 'truck',
  CARRETA: 'carreta',
  VUC: 'vuc',
  MOTO: 'moto'
};

// Prioridades de descarregamento
const PRIORIDADE_DESCARREGAMENTO = {
  ALTA: 'alta',
  MEDIA: 'media',
  BAIXA: 'baixa'
};

// Tipos de integra√ß√£o
const INTEGRACAO_TIPOS = {
  API: 'api',
  WEBHOOK: 'webhook',
  FTP: 'ftp',
  EMAIL: 'email'
};

// Formatos de data
const DATE_FORMATS = {
  ISO: 'YYYY-MM-DDTHH:mm:ss.SSSZ',
  DATE_ONLY: 'YYYY-MM-DD',
  TIME_ONLY: 'HH:mm:ss',
  BRAZILIAN: 'DD/MM/YYYY',
  BRAZILIAN_WITH_TIME: 'DD/MM/YYYY HH:mm:ss'
};

// Regex patterns
const REGEX_PATTERNS = {
  CNPJ: /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/,
  CPF: /^\d{3}\.\d{3}\.\d{3}-\d{2}$/,
  CEP: /^\d{5}-\d{3}$/,
  PHONE: /^\(\d{2}\)\s\d{4,5}-\d{4}$/,
  EMAIL: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
  PLATE_OLD: /^[A-Z]{3}-\d{4}$/,
  PLATE_MERCOSUL: /^[A-Z]{3}\d[A-Z]\d{2}$/
};

// Mensagens de erro padr√£o
const ERROR_MESSAGES = {
  REQUIRED_FIELD: 'Campo obrigat√≥rio',
  INVALID_FORMAT: 'Formato inv√°lido',
  NOT_FOUND: 'Registro n√£o encontrado',
  UNAUTHORIZED: 'N√£o autorizado',
  FORBIDDEN: 'Acesso negado',
  CONFLICT: 'Conflito de dados',
  INTERNAL_ERROR: 'Erro interno do servidor',
  VALIDATION_ERROR: 'Dados inv√°lidos',
  TOKEN_EXPIRED: 'Token expirado',
  TOKEN_INVALID: 'Token inv√°lido'
};

// Configura√ß√µes de pagina√ß√£o
const PAGINATION = {
  DEFAULT_PAGE: 1,
  DEFAULT_LIMIT: 20,
  MAX_LIMIT: 100,
  DEFAULT_ORDER: 'created_at',
  DEFAULT_DIRECTION: 'DESC'
};

// Tamanhos de arquivo
const FILE_SIZES = {
  KB: 1024,
  MB: 1024 * 1024,
  GB: 1024 * 1024 * 1024,
  MAX_UPLOAD: 5 * 1024 * 1024 // 5MB
};

// Tipos de arquivo permitidos
const ALLOWED_FILE_TYPES = {
  IMAGES: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
  DOCUMENTS: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
  SPREADSHEETS: ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],
  ALL: ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'application/pdf']
};

// Configura√ß√µes de cache
const CACHE = {
  TTL_SHORT: 5 * 60, // 5 minutos
  TTL_MEDIUM: 30 * 60, // 30 minutos
  TTL_LONG: 60 * 60, // 1 hora
  TTL_VERY_LONG: 24 * 60 * 60 // 24 horas
};

// Eventos do sistema
const SYSTEM_EVENTS = {
  USER_CREATED: 'user.created',
  USER_UPDATED: 'user.updated',
  USER_DELETED: 'user.deleted',
  LOGIN_SUCCESS: 'auth.login.success',
  LOGIN_FAILED: 'auth.login.failed',
  TRANSPORTADORA_CREATED: 'transportadora.created',
  TRANSPORTADORA_UPDATED: 'transportadora.updated',
  NOTA_FISCAL_CREATED: 'nota_fiscal.created',
  ROMANEIO_CREATED: 'romaneio.created',
  OCORRENCIA_CREATED: 'ocorrencia.created'
};
// Adicionar em utils/constants.js
const CODIGO_OCORRENCIA_TIPOS = {
  ENTREGA: 'entrega',
  COLETA: 'coleta',
  INCIDENTE: 'incidente',
  INFORMATIVO: 'informativo'
};

const CODIGO_OCORRENCIA_PROCESSOS = {
  PRE_ENTREGA: 'pre-entrega',
  EM_ENTREGA: 'em-entrega',
  POS_ENTREGA: 'pos-entrega',
  ADMINISTRATIVO: 'administrativo'
};
module.exports = {
  HTTP_STATUS,
  USER_ROLES,
  BRAZILIAN_STATES,
  NOTA_FISCAL_STATUS,
  OCORRENCIA_TIPOS,
  ROMANEIO_STATUS,
  VEICULO_TIPOS,
  PRIORIDADE_DESCARREGAMENTO,
  INTEGRACAO_TIPOS,
  DATE_FORMATS,
  REGEX_PATTERNS,
  ERROR_MESSAGES,
  PAGINATION,
  FILE_SIZES,
  ALLOWED_FILE_TYPES,
  CACHE,
  SYSTEM_EVENTS,
  CODIGO_OCORRENCIA_TIPOS,
  CODIGO_OCORRENCIA_PROCESSOS
};






================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\utils\crypto.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\utils\formatters.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\utils\helpers.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\utils\validators.js
================================================================================

// backend/src/utils/validators.js

// Se voc√™ j√° tem regex prontos no constants.js, vamos reaproveitar.
// Ex.: REGEX_PATTERNS.EMAIL = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
let REGEX_PATTERNS = {};
try {
  REGEX_PATTERNS = require('./constants').REGEX_PATTERNS || {};
} catch (_) {
  // fallback simples para email se constants n√£o estiver dispon√≠vel por algum motivo
  REGEX_PATTERNS.EMAIL = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
}

/**
 * Lista oficial de UFs do Brasil (27)
 */
const UF_LIST = new Set([
  'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA',
  'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN',
  'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'
]);

/**
 * Valida√ß√£o de CPF
 */
function validateCPF(cpf) {
  if (!cpf) return false;
  cpf = String(cpf).replace(/\D/g, '');
  if (cpf.length !== 11) return false;
  if (/^(\d)\1{10}$/.test(cpf)) return false;

  let sum = 0;
  for (let i = 0; i < 9; i++) sum += parseInt(cpf.charAt(i), 10) * (10 - i);
  let remainder = 11 - (sum % 11);
  if (remainder >= 10) remainder = 0;
  if (remainder !== parseInt(cpf.charAt(9), 10)) return false;

  sum = 0;
  for (let i = 0; i < 10; i++) sum += parseInt(cpf.charAt(i), 10) * (11 - i);
  remainder = 11 - (sum % 11);
  if (remainder >= 10) remainder = 0;
  return remainder === parseInt(cpf.charAt(10), 10);
}

/**
 * Valida√ß√£o de CNPJ
 */
function validateCNPJ(cnpj) {
  if (!cnpj) return false;
  cnpj = String(cnpj).replace(/\D/g, '');
  if (cnpj.length !== 14) return false;
  if (/^(\d)\1{13}$/.test(cnpj)) return false;

  let length = cnpj.length - 2;
  let numbers = cnpj.substring(0, length);
  let digits = cnpj.substring(length);
  let sum = 0;
  let pos = length - 7;

  for (let i = length; i >= 1; i--) {
    sum += parseInt(numbers.charAt(length - i), 10) * pos--;
    if (pos < 2) pos = 9;
  }

  let result = sum % 11 < 2 ? 0 : 11 - (sum % 11);
  if (result !== parseInt(digits.charAt(0), 10)) return false;

  length = length + 1;
  numbers = cnpj.substring(0, length);
  sum = 0;
  pos = length - 7;
  for (let i = length; i >= 1; i--) {
    sum += parseInt(numbers.charAt(length - i), 10) * pos--;
    if (pos < 2) pos = 9;
  }
  result = sum % 11 < 2 ? 0 : 11 - (sum % 11);
  return result === parseInt(digits.charAt(1), 10);
}

/**
 * Valida√ß√£o de Email
 */
function validateEmail(email) {
  if (!email) return false;
  const regex = REGEX_PATTERNS.EMAIL || /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return regex.test(String(email).toLowerCase());
}

/**
 * Valida√ß√£o de Senha Forte
 * - m√≠nimo 8 caracteres
 * - pelo menos 1 min√∫scula, 1 mai√∫scula, 1 n√∫mero, 1 caractere especial
 */
function validateStrongPassword(password) {
  if (!password) return false;
  const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
  return regex.test(password);
}

/**
 * Valida√ß√£o de UF
 */
function validateUF(uf) {
  if (!uf) return false;
  const v = String(uf).trim().toUpperCase();
  return UF_LIST.has(v);
}

module.exports = {
  validateCPF,
  validateCNPJ,
  validateEmail,
  validateStrongPassword,
  validateUF
};



================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\auth.validation.js
================================================================================

const Joi = require('joi');
const { validateEmail, validateStrongPassword } = require('../utils/validators');

// Validador personalizado para email
const emailValidator = (value, helpers) => {
  if (!validateEmail(value)) {
    return helpers.error('any.invalid');
  }
  return value.toLowerCase().trim();
};

// Validador personalizado para senha forte
const passwordValidator = (value, helpers) => {
  if (!validateStrongPassword(value)) {
    return helpers.error('any.invalid');
  }
  return value;
};

// Schema para login
const loginSchema = Joi.object({
  email: Joi.string()
    .required()
    .custom(emailValidator)
    .messages({
      'any.required': 'Email √© obrigat√≥rio',
      'any.invalid': 'Email inv√°lido',
      'string.base': 'Email deve ser uma string',
      'string.empty': 'Email n√£o pode estar vazio'
    }),

  password: Joi.string()
    .required()
    .min(6)
    .messages({
      'any.required': 'Senha √© obrigat√≥ria',
      'string.min': 'Senha deve ter pelo menos 6 caracteres',
      'string.base': 'Senha deve ser uma string',
      'string.empty': 'Senha n√£o pode estar vazia'
    })
});

// Schema para registro
const registerSchema = Joi.object({
  name: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Nome √© obrigat√≥rio',
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Nome n√£o pode estar vazio'
    }),

  email: Joi.string()
    .required()
    .custom(emailValidator)
    .messages({
      'any.required': 'Email √© obrigat√≥rio',
      'any.invalid': 'Email inv√°lido',
      'string.base': 'Email deve ser uma string',
      'string.empty': 'Email n√£o pode estar vazio'
    }),

  password: Joi.string()
    .required()
    .custom(passwordValidator)
    .messages({
      'any.required': 'Senha √© obrigat√≥ria',
      'any.invalid': 'Senha deve ter pelo menos 8 caracteres, incluindo mai√∫scula, min√∫scula, n√∫mero e caractere especial',
      'string.base': 'Senha deve ser uma string'
    }),

  password_confirmation: Joi.string()
    .required()
    .valid(Joi.ref('password'))
    .messages({
      'any.required': 'Confirma√ß√£o de senha √© obrigat√≥ria',
      'any.only': 'Confirma√ß√£o de senha deve ser igual √† senha',
      'string.base': 'Confirma√ß√£o de senha deve ser uma string'
    })
});

// Schema para refresh de token
const refreshSchema = Joi.object({
  token: Joi.string()
    .required()
    .messages({
      'any.required': 'Token √© obrigat√≥rio',
      'string.base': 'Token deve ser uma string',
      'string.empty': 'Token n√£o pode estar vazio'
    })
});

// Schema para altera√ß√£o de senha
const changePasswordSchema = Joi.object({
  oldPassword: Joi.string()
    .required()
    .messages({
      'any.required': 'Senha atual √© obrigat√≥ria',
      'string.base': 'Senha atual deve ser uma string',
      'string.empty': 'Senha atual n√£o pode estar vazia'
    }),

  newPassword: Joi.string()
    .required()
    .custom(passwordValidator)
    .messages({
      'any.required': 'Nova senha √© obrigat√≥ria',
      'any.invalid': 'Nova senha deve ter pelo menos 8 caracteres, incluindo mai√∫scula, min√∫scula, n√∫mero e caractere especial',
      'string.base': 'Nova senha deve ser uma string'
    }),

  confirmPassword: Joi.string()
    .required()
    .valid(Joi.ref('newPassword'))
    .messages({
      'any.required': 'Confirma√ß√£o da nova senha √© obrigat√≥ria',
      'any.only': 'Confirma√ß√£o deve ser igual √† nova senha',
      'string.base': 'Confirma√ß√£o deve ser uma string'
    })
});

// Schema para esqueci minha senha
const forgotPasswordSchema = Joi.object({
  email: Joi.string()
    .required()
    .custom(emailValidator)
    .messages({
      'any.required': 'Email √© obrigat√≥rio',
      'any.invalid': 'Email inv√°lido',
      'string.base': 'Email deve ser uma string',
      'string.empty': 'Email n√£o pode estar vazio'
    })
});

// Schema para redefinir senha
const resetPasswordSchema = Joi.object({
  resetToken: Joi.string()
    .required()
    .messages({
      'any.required': 'Token de recupera√ß√£o √© obrigat√≥rio',
      'string.base': 'Token deve ser uma string',
      'string.empty': 'Token n√£o pode estar vazio'
    }),

  newPassword: Joi.string()
    .required()
    .custom(passwordValidator)
    .messages({
      'any.required': 'Nova senha √© obrigat√≥ria',
      'any.invalid': 'Nova senha deve ter pelo menos 8 caracteres, incluindo mai√∫scula, min√∫scula, n√∫mero e caractere especial',
      'string.base': 'Nova senha deve ser uma string'
    }),

  confirmPassword: Joi.string()
    .required()
    .valid(Joi.ref('newPassword'))
    .messages({
      'any.required': 'Confirma√ß√£o da nova senha √© obrigat√≥ria',
      'any.only': 'Confirma√ß√£o deve ser igual √† nova senha',
      'string.base': 'Confirma√ß√£o deve ser uma string'
    })
});

module.exports = {
  loginSchema,
  registerSchema,
  refreshSchema,
  changePasswordSchema,
  forgotPasswordSchema,
  resetPasswordSchema
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\clientes.validation.js
================================================================================

const Joi = require('joi');
const { validateCPF, validateCNPJ, validateUF } = require('../utils/validators');

// Validador personalizado para documento (CPF ou CNPJ)
const documentoValidator = (value, helpers) => {
  if (!value) return helpers.error('any.required');
  
  const documento = value.replace(/\D/g, '');
  
  if (documento.length === 11) {
    if (!validateCPF(value)) {
      return helpers.error('any.invalid');
    }
  } else if (documento.length === 14) {
    if (!validateCNPJ(value)) {
      return helpers.error('any.invalid');
    }
  } else {
    return helpers.error('any.invalid');
  }
  
  return documento;
};

// Validador personalizado para UF
const ufValidator = (value, helpers) => {
  if (!validateUF(value)) {
    return helpers.error('any.invalid');
  }
  return value.toUpperCase();
};

// Schema para cria√ß√£o de cliente
const createCliente = Joi.object({
  documento: Joi.string()
    .required()
    .custom(documentoValidator)
    .messages({
      'any.required': 'Documento √© obrigat√≥rio',
      'any.invalid': 'CPF ou CNPJ inv√°lido',
      'string.base': 'Documento deve ser uma string'
    }),

  cod_cliente: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'C√≥digo do cliente √© obrigat√≥rio',
      'number.base': 'C√≥digo do cliente deve ser um n√∫mero',
      'number.integer': 'C√≥digo do cliente deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo do cliente deve ser positivo'
    }),

  nome: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Nome √© obrigat√≥rio',
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Nome n√£o pode estar vazio'
    }),

  endereco: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Endere√ßo deve ter no m√°ximo 255 caracteres'
    }),

  bairro: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Bairro deve ter no m√°ximo 255 caracteres'
    }),

  cep: Joi.string()
    .allow(null, '')
    .pattern(/^\d{5}-?\d{3}$/)
    .messages({
      'string.pattern.base': 'CEP deve ter o formato 00000-000'
    }),

  cidade: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    }),

  uf: Joi.string()
    .allow(null, '')
    .custom(ufValidator)
    .messages({
      'any.invalid': 'UF inv√°lida',
      'string.base': 'UF deve ser uma string'
    }),

  contato: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Contato deve ter no m√°ximo 255 caracteres'
    }),

  inscricao_estadual: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Inscri√ß√£o estadual deve ter no m√°ximo 255 caracteres'
    }),

  cnpj: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'CNPJ deve ter no m√°ximo 255 caracteres'
    })
});

// Schema para atualiza√ß√£o de cliente
const updateCliente = Joi.object({
  documento: Joi.string()
    .custom(documentoValidator)
    .messages({
      'any.invalid': 'CPF ou CNPJ inv√°lido',
      'string.base': 'Documento deve ser uma string'
    }),

  cod_cliente: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'C√≥digo do cliente deve ser um n√∫mero',
      'number.integer': 'C√≥digo do cliente deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo do cliente deve ser positivo'
    }),

  nome: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Nome n√£o pode estar vazio'
    }),

  endereco: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Endere√ßo deve ter no m√°ximo 255 caracteres'
    }),

  bairro: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Bairro deve ter no m√°ximo 255 caracteres'
    }),

  cep: Joi.string()
    .allow(null, '')
    .pattern(/^\d{5}-?\d{3}$/)
    .messages({
      'string.pattern.base': 'CEP deve ter o formato 00000-000'
    }),

  cidade: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    }),

  uf: Joi.string()
    .allow(null, '')
    .custom(ufValidator)
    .messages({
      'any.invalid': 'UF inv√°lida',
      'string.base': 'UF deve ser uma string'
    }),

  contato: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Contato deve ter no m√°ximo 255 caracteres'
    }),

  inscricao_estadual: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Inscri√ß√£o estadual deve ter no m√°ximo 255 caracteres'
    }),

  cnpj: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'CNPJ deve ter no m√°ximo 255 caracteres'
    })
}).min(1); // Pelo menos um campo deve ser fornecido

// Schema para listagem com filtros
const listClientes = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser maior que 0'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(20)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 100'
    }),

  orderBy: Joi.string()
    .valid('id', 'nome', 'documento', 'cod_cliente', 'cidade', 'uf', 'created_at', 'updated_at')
    .default('created_at')
    .messages({
      'any.only': 'Campo de ordena√ß√£o inv√°lido'
    }),

  orderDirection: Joi.string()
    .valid('ASC', 'DESC', 'asc', 'desc')
    .default('DESC')
    .messages({
      'any.only': 'Dire√ß√£o de ordena√ß√£o deve ser ASC ou DESC'
    }),

  nome: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres'
    }),

  documento: Joi.string()
    .custom(documentoValidator)
    .messages({
      'any.invalid': 'CPF ou CNPJ inv√°lido'
    }),

  cidade: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Cidade deve ter pelo menos 2 caracteres',
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    }),

  uf: Joi.string()
    .custom(ufValidator)
    .messages({
      'any.invalid': 'UF inv√°lida'
    }),

  cod_cliente: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'C√≥digo do cliente deve ser um n√∫mero',
      'number.integer': 'C√≥digo do cliente deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo do cliente deve ser positivo'
    })
});

// Schema para busca por nome
const searchClientes = Joi.object({
  q: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Termo de busca √© obrigat√≥rio',
      'string.min': 'Termo de busca deve ter pelo menos 2 caracteres',
      'string.max': 'Termo de busca deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Termo de busca n√£o pode estar vazio'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(50)
    .default(10)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 50'
    })
});

// Schema para par√¢metros de rota
const clienteParams = Joi.object({
  id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'ID √© obrigat√≥rio',
      'number.base': 'ID deve ser um n√∫mero',
      'number.integer': 'ID deve ser um n√∫mero inteiro',
      'number.positive': 'ID deve ser um n√∫mero positivo'
    })
});

// Schema para busca por documento
const documentoParams = Joi.object({
  documento: Joi.string()
    .required()
    .custom(documentoValidator)
    .messages({
      'any.required': 'Documento √© obrigat√≥rio',
      'any.invalid': 'CPF ou CNPJ inv√°lido'
    })
});

// Schema para busca por c√≥digo do cliente
const codClienteParams = Joi.object({
  codCliente: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'C√≥digo do cliente √© obrigat√≥rio',
      'number.base': 'C√≥digo do cliente deve ser um n√∫mero',
      'number.integer': 'C√≥digo do cliente deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo do cliente deve ser positivo'
    })
});

// Schema para busca por UF
const ufParams = Joi.object({
  uf: Joi.string()
    .required()
    .custom(ufValidator)
    .messages({
      'any.required': 'UF √© obrigat√≥ria',
      'any.invalid': 'UF inv√°lida'
    })
});

// Schema para busca por cidade
const cidadeParams = Joi.object({
  cidade: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Cidade √© obrigat√≥ria',
      'string.min': 'Cidade deve ter pelo menos 2 caracteres',
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    })
});

module.exports = {
  createCliente,
  updateCliente,
  listClientes,
  searchClientes,
  clienteParams,
  documentoParams,
  codClienteParams,
  ufParams,
  cidadeParams
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\codigo-ocorrencias.validation.js
================================================================================

const Joi = require('joi');

// Valores enum baseados na estrutura da tabela
const TIPOS_OCORRENCIA = ['entrega', 'coleta', 'incidente', 'informativo'];
const PROCESSOS_OCORRENCIA = ['pre-entrega', 'em-entrega', 'pos-entrega', 'administrativo'];

// Schema para cria√ß√£o de c√≥digo de ocorr√™ncia
const createCodigoOcorrencia = Joi.object({
  codigo: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'C√≥digo √© obrigat√≥rio',
      'number.base': 'C√≥digo deve ser um n√∫mero',
      'number.integer': 'C√≥digo deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo deve ser um n√∫mero positivo'
    }),

  descricao: Joi.string()
    .required()
    .min(5)
    .max(1000)
    .trim()
    .messages({
      'any.required': 'Descri√ß√£o √© obrigat√≥ria',
      'string.min': 'Descri√ß√£o deve ter pelo menos 5 caracteres',
      'string.max': 'Descri√ß√£o deve ter no m√°ximo 1000 caracteres',
      'string.empty': 'Descri√ß√£o n√£o pode estar vazia'
    }),

  tipo: Joi.string()
    .valid(...TIPOS_OCORRENCIA)
    .required()
    .messages({
      'any.required': 'Tipo √© obrigat√≥rio',
      'any.only': `Tipo deve ser um dos valores: ${TIPOS_OCORRENCIA.join(', ')}`
    }),

  processo: Joi.string()
    .valid(...PROCESSOS_OCORRENCIA)
    .required()
    .messages({
      'any.required': 'Processo √© obrigat√≥rio',
      'any.only': `Processo deve ser um dos valores: ${PROCESSOS_OCORRENCIA.join(', ')}`
    }),

  finalizadora: Joi.boolean()
    .default(false)
    .messages({
      'boolean.base': 'Finalizadora deve ser verdadeiro ou falso'
    }),

  api: Joi.boolean()
    .default(true)
    .messages({
      'boolean.base': 'API deve ser verdadeiro ou falso'
    })
});

// Schema para atualiza√ß√£o de c√≥digo de ocorr√™ncia
const updateCodigoOcorrencia = Joi.object({
  codigo: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'C√≥digo deve ser um n√∫mero',
      'number.integer': 'C√≥digo deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo deve ser um n√∫mero positivo'
    }),

  descricao: Joi.string()
    .min(5)
    .max(1000)
    .trim()
    .messages({
      'string.min': 'Descri√ß√£o deve ter pelo menos 5 caracteres',
      'string.max': 'Descri√ß√£o deve ter no m√°ximo 1000 caracteres',
      'string.empty': 'Descri√ß√£o n√£o pode estar vazia'
    }),

  tipo: Joi.string()
    .valid(...TIPOS_OCORRENCIA)
    .messages({
      'any.only': `Tipo deve ser um dos valores: ${TIPOS_OCORRENCIA.join(', ')}`
    }),

  processo: Joi.string()
    .valid(...PROCESSOS_OCORRENCIA)
    .messages({
      'any.only': `Processo deve ser um dos valores: ${PROCESSOS_OCORRENCIA.join(', ')}`
    }),

  finalizadora: Joi.boolean()
    .messages({
      'boolean.base': 'Finalizadora deve ser verdadeiro ou falso'
    }),

  api: Joi.boolean()
    .messages({
      'boolean.base': 'API deve ser verdadeiro ou falso'
    })
}).min(1); // Pelo menos um campo deve ser fornecido

// Schema para listagem com filtros
const listCodigoOcorrencias = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser maior que 0'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(20)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 100'
    }),

  orderBy: Joi.string()
    .valid('id', 'codigo', 'tipo', 'processo', 'created_at', 'updated_at')
    .default('codigo')
    .messages({
      'any.only': 'Campo de ordena√ß√£o inv√°lido'
    }),

  orderDirection: Joi.string()
    .valid('ASC', 'DESC', 'asc', 'desc')
    .default('ASC')
    .messages({
      'any.only': 'Dire√ß√£o de ordena√ß√£o deve ser ASC ou DESC'
    }),

  tipo: Joi.string()
    .valid(...TIPOS_OCORRENCIA)
    .messages({
      'any.only': `Tipo deve ser um dos valores: ${TIPOS_OCORRENCIA.join(', ')}`
    }),

  processo: Joi.string()
    .valid(...PROCESSOS_OCORRENCIA)
    .messages({
      'any.only': `Processo deve ser um dos valores: ${PROCESSOS_OCORRENCIA.join(', ')}`
    }),

  finalizadora: Joi.string()
    .valid('true', 'false')
    .messages({
      'any.only': 'Finalizadora deve ser true ou false'
    }),

  api: Joi.string()
    .valid('true', 'false')
    .messages({
      'any.only': 'API deve ser true ou false'
    }),

  search: Joi.string()
    .min(2)
    .max(100)
    .trim()
    .messages({
      'string.min': 'Busca deve ter pelo menos 2 caracteres',
      'string.max': 'Busca deve ter no m√°ximo 100 caracteres'
    })
});

// Schema para par√¢metros de rota
const codigoOcorrenciaParams = Joi.object({
  id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'ID √© obrigat√≥rio',
      'number.base': 'ID deve ser um n√∫mero',
      'number.integer': 'ID deve ser um n√∫mero inteiro',
      'number.positive': 'ID deve ser um n√∫mero positivo'
    })
});

module.exports = {
  createCodigoOcorrencia,
  updateCodigoOcorrencia,
  listCodigoOcorrencias,
  codigoOcorrenciaParams,
  TIPOS_OCORRENCIA,
  PROCESSOS_OCORRENCIA
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\embarcadores.validation.js
================================================================================

const Joi = require('joi');
const { validateCNPJ, validateUF } = require('../utils/validators');

// Validador personalizado para CNPJ
const cnpjValidator = (value, helpers) => {
  if (!validateCNPJ(value)) {
    return helpers.error('any.invalid');
  }
  return value.replace(/\D/g, ''); // Retorna apenas n√∫meros
};

// Validador personalizado para UF
const ufValidator = (value, helpers) => {
  if (!validateUF(value)) {
    return helpers.error('any.invalid');
  }
  return value.toUpperCase();
};

// Schema para cria√ß√£o de embarcador
const createEmbarcador = Joi.object({
  documento: Joi.string()
    .required()
    .custom(cnpjValidator)
    .messages({
      'any.required': 'CNPJ √© obrigat√≥rio',
      'any.invalid': 'CNPJ inv√°lido',
      'string.base': 'CNPJ deve ser uma string'
    }),

  nome: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Nome √© obrigat√≥rio',
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Nome n√£o pode estar vazio'
    }),

  inscricao_estadual: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Inscri√ß√£o estadual deve ter no m√°ximo 255 caracteres'
    }),

  cnpj: Joi.string()
    .allow(null, '')
    .custom(cnpjValidator)
    .messages({
      'any.invalid': 'CNPJ inv√°lido',
      'string.base': 'CNPJ deve ser uma string'
    }),

  endereco: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Endere√ßo deve ter no m√°ximo 255 caracteres'
    }),

  bairro: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Bairro deve ter no m√°ximo 255 caracteres'
    }),

  cidade: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    }),

  cep: Joi.string()
    .allow(null, '')
    .pattern(/^\d{5}-?\d{3}$/)
    .messages({
      'string.pattern.base': 'CEP deve ter o formato 00000-000'
    }),

  uf: Joi.string()
    .allow(null, '')
    .custom(ufValidator)
    .messages({
      'any.invalid': 'UF inv√°lida',
      'string.base': 'UF deve ser uma string'
    })
});

// Schema para atualiza√ß√£o de embarcador
const updateEmbarcador = Joi.object({
  documento: Joi.string()
    .custom(cnpjValidator)
    .messages({
      'any.invalid': 'CNPJ inv√°lido',
      'string.base': 'CNPJ deve ser uma string'
    }),

  nome: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Nome n√£o pode estar vazio'
    }),

  inscricao_estadual: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Inscri√ß√£o estadual deve ter no m√°ximo 255 caracteres'
    }),

  cnpj: Joi.string()
    .allow(null, '')
    .custom(cnpjValidator)
    .messages({
      'any.invalid': 'CNPJ inv√°lido',
      'string.base': 'CNPJ deve ser uma string'
    }),

  endereco: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Endere√ßo deve ter no m√°ximo 255 caracteres'
    }),

  bairro: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Bairro deve ter no m√°ximo 255 caracteres'
    }),

  cidade: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    }),

  cep: Joi.string()
    .allow(null, '')
    .pattern(/^\d{5}-?\d{3}$/)
    .messages({
      'string.pattern.base': 'CEP deve ter o formato 00000-000'
    }),

  uf: Joi.string()
    .allow(null, '')
    .custom(ufValidator)
    .messages({
      'any.invalid': 'UF inv√°lida',
      'string.base': 'UF deve ser uma string'
    })
}).min(1); // Pelo menos um campo deve ser fornecido

// Schema para listagem com filtros
const listEmbarcadores = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser maior que 0'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(20)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 100'
    }),

  orderBy: Joi.string()
    .valid('id', 'nome', 'documento', 'cidade', 'uf', 'created_at', 'updated_at')
    .default('created_at')
    .messages({
      'any.only': 'Campo de ordena√ß√£o inv√°lido'
    }),

  orderDirection: Joi.string()
    .valid('ASC', 'DESC', 'asc', 'desc')
    .default('DESC')
    .messages({
      'any.only': 'Dire√ß√£o de ordena√ß√£o deve ser ASC ou DESC'
    }),

  nome: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres'
    }),

  documento: Joi.string()
    .custom(cnpjValidator)
    .messages({
      'any.invalid': 'CNPJ inv√°lido'
    }),

  cidade: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Cidade deve ter pelo menos 2 caracteres',
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    }),

  uf: Joi.string()
    .custom(ufValidator)
    .messages({
      'any.invalid': 'UF inv√°lida'
    })
});

// Schema para busca por nome
const searchEmbarcadores = Joi.object({
  q: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Termo de busca √© obrigat√≥rio',
      'string.min': 'Termo de busca deve ter pelo menos 2 caracteres',
      'string.max': 'Termo de busca deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Termo de busca n√£o pode estar vazio'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(50)
    .default(10)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 50'
    })
});

// Schema para par√¢metros de rota
const embarcadorParams = Joi.object({
  id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'ID √© obrigat√≥rio',
      'number.base': 'ID deve ser um n√∫mero',
      'number.integer': 'ID deve ser um n√∫mero inteiro',
      'number.positive': 'ID deve ser um n√∫mero positivo'
    })
});

// Schema para busca por documento
const documentoParams = Joi.object({
  documento: Joi.string()
    .required()
    .custom(cnpjValidator)
    .messages({
      'any.required': 'CNPJ √© obrigat√≥rio',
      'any.invalid': 'CNPJ inv√°lido'
    })
});

// Schema para busca por UF
const ufParams = Joi.object({
  uf: Joi.string()
    .required()
    .custom(ufValidator)
    .messages({
      'any.required': 'UF √© obrigat√≥ria',
      'any.invalid': 'UF inv√°lida'
    })
});

// Schema para busca por cidade
const cidadeParams = Joi.object({
  cidade: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Cidade √© obrigat√≥ria',
      'string.min': 'Cidade deve ter pelo menos 2 caracteres',
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    })
});

module.exports = {
  createEmbarcador,
  updateEmbarcador,
  listEmbarcadores,
  searchEmbarcadores,
  embarcadorParams,
  documentoParams,
  ufParams,
  cidadeParams
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\endereco-entrega.validation.js
================================================================================

const Joi = require('joi');

// Validador personalizado para CEP brasileiro
const cepValidator = (value, helpers) => {
  if (!value) return value;
  
  const cleanValue = String(value).replace(/\D/g, '');
  if (cleanValue.length !== 8) {
    return helpers.error('any.invalid');
  }
  return cleanValue;
};

// Schema para cria√ß√£o de endere√ßo de entrega
const createEnderecoEntrega = Joi.object({
  cliente_id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'Cliente √© obrigat√≥rio',
      'number.base': 'Cliente deve ser um n√∫mero',
      'number.integer': 'Cliente deve ser um n√∫mero inteiro',
      'number.positive': 'Cliente deve ser um n√∫mero positivo'
    }),

  endereco: Joi.string()
    .required()
    .max(255)
    .trim()
    .messages({
      'any.required': 'Endere√ßo √© obrigat√≥rio',
      'string.max': 'Endere√ßo deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Endere√ßo n√£o pode estar vazio'
    }),

  bairro: Joi.string()
    .required()
    .max(255)
    .trim()
    .messages({
      'any.required': 'Bairro √© obrigat√≥rio',
      'string.max': 'Bairro deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Bairro n√£o pode estar vazio'
    }),

  cidade: Joi.string()
    .required()
    .max(255)
    .trim()
    .messages({
      'any.required': 'Cidade √© obrigat√≥ria',
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Cidade n√£o pode estar vazia'
    }),

  uf: Joi.string()
    .required()
    .length(2)
    .uppercase()
    .messages({
      'any.required': 'UF √© obrigat√≥ria',
      'string.length': 'UF deve ter 2 caracteres',
      'string.empty': 'UF n√£o pode estar vazia'
    }),

  cep: Joi.string()
    .required()
    .custom(cepValidator)
    .messages({
      'any.required': 'CEP √© obrigat√≥rio',
      'any.invalid': 'CEP deve ter 8 d√≠gitos'
    }),

  doca: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Doca deve ter no m√°ximo 255 caracteres'
    }),

  lat: Joi.number()
    .precision(6)
    .allow(null)
    .messages({
      'number.base': 'Latitude deve ser um n√∫mero',
      'number.precision': 'Latitude deve ter no m√°ximo 6 casas decimais'
    }),

  lon: Joi.number()
    .precision(6)
    .allow(null)
    .messages({
      'number.base': 'Longitude deve ser um n√∫mero',
      'number.precision': 'Longitude deve ter no m√°ximo 6 casas decimais'
    }),

  restricao_logistica_id: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'Restri√ß√£o log√≠stica deve ser um n√∫mero',
      'number.integer': 'Restri√ß√£o log√≠stica deve ser um n√∫mero inteiro',
      'number.positive': 'Restri√ß√£o log√≠stica deve ser um n√∫mero positivo'
    }),

  restrito: Joi.boolean()
    .default(false)
    .messages({
      'boolean.base': 'Restrito deve ser verdadeiro ou falso'
    }),

  rota: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Rota deve ter no m√°ximo 255 caracteres'
    }),

  janela1: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 1 deve ter no m√°ximo 50 caracteres'
    }),

  janela2: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 2 deve ter no m√°ximo 50 caracteres'
    }),

  janela3: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 3 deve ter no m√°ximo 50 caracteres'
    }),

  janela4: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 4 deve ter no m√°ximo 50 caracteres'
    })
});

// Schema para atualiza√ß√£o de endere√ßo de entrega
const updateEnderecoEntrega = Joi.object({
  cliente_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Cliente deve ser um n√∫mero',
      'number.integer': 'Cliente deve ser um n√∫mero inteiro',
      'number.positive': 'Cliente deve ser um n√∫mero positivo'
    }),

  endereco: Joi.string()
    .max(255)
    .trim()
    .messages({
      'string.max': 'Endere√ßo deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Endere√ßo n√£o pode estar vazio'
    }),

  bairro: Joi.string()
    .max(255)
    .trim()
    .messages({
      'string.max': 'Bairro deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Bairro n√£o pode estar vazio'
    }),

  cidade: Joi.string()
    .max(255)
    .trim()
    .messages({
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Cidade n√£o pode estar vazia'
    }),

  uf: Joi.string()
    .length(2)
    .uppercase()
    .messages({
      'string.length': 'UF deve ter 2 caracteres',
      'string.empty': 'UF n√£o pode estar vazia'
    }),

  cep: Joi.string()
    .custom(cepValidator)
    .messages({
      'any.invalid': 'CEP deve ter 8 d√≠gitos'
    }),

  doca: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Doca deve ter no m√°ximo 255 caracteres'
    }),

  lat: Joi.number()
    .precision(6)
    .allow(null)
    .messages({
      'number.base': 'Latitude deve ser um n√∫mero',
      'number.precision': 'Latitude deve ter no m√°ximo 6 casas decimais'
    }),

  lon: Joi.number()
    .precision(6)
    .allow(null)
    .messages({
      'number.base': 'Longitude deve ser um n√∫mero',
      'number.precision': 'Longitude deve ter no m√°ximo 6 casas decimais'
    }),

  restricao_logistica_id: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'Restri√ß√£o log√≠stica deve ser um n√∫mero',
      'number.integer': 'Restri√ß√£o log√≠stica deve ser um n√∫mero inteiro',
      'number.positive': 'Restri√ß√£o log√≠stica deve ser um n√∫mero positivo'
    }),

  restrito: Joi.boolean()
    .messages({
      'boolean.base': 'Restrito deve ser verdadeiro ou falso'
    }),

  rota: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Rota deve ter no m√°ximo 255 caracteres'
    }),

  janela1: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 1 deve ter no m√°ximo 50 caracteres'
    }),

  janela2: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 2 deve ter no m√°ximo 50 caracteres'
    }),

  janela3: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 3 deve ter no m√°ximo 50 caracteres'
    }),

  janela4: Joi.string()
    .allow(null, '')
    .max(50)
    .trim()
    .messages({
      'string.max': 'Janela 4 deve ter no m√°ximo 50 caracteres'
    })
}).min(1); // Pelo menos um campo deve ser fornecido

// Schema para listagem com filtros
const listEnderecosEntrega = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser maior que 0'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(20)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 100'
    }),

  cliente_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Cliente deve ser um n√∫mero',
      'number.integer': 'Cliente deve ser um n√∫mero inteiro',
      'number.positive': 'Cliente deve ser um n√∫mero positivo'
    }),

  cidade: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Cidade deve ter pelo menos 2 caracteres',
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    }),

  uf: Joi.string()
    .length(2)
    .uppercase()
    .messages({
      'string.length': 'UF deve ter 2 caracteres',
      'string.base': 'UF deve ser uma string'
    }),

  restrito: Joi.boolean()
    .messages({
      'boolean.base': 'Restrito deve ser verdadeiro ou falso'
    })
});

// Schema para par√¢metros de rota
const enderecoEntregaParams = Joi.object({
  id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'ID √© obrigat√≥rio',
      'number.base': 'ID deve ser um n√∫mero',
      'number.integer': 'ID deve ser um n√∫mero inteiro',
      'number.positive': 'ID deve ser um n√∫mero positivo'
    })
});

// Schema para atualiza√ß√£o de coordenadas
const updateCoordenadasSchema = Joi.object({
  lat: Joi.number()
    .required()
    .precision(6)
    .messages({
      'any.required': 'Latitude √© obrigat√≥ria',
      'number.base': 'Latitude deve ser um n√∫mero',
      'number.precision': 'Latitude deve ter no m√°ximo 6 casas decimais'
    }),

  lon: Joi.number()
    .required()
    .precision(6)
    .messages({
      'any.required': 'Longitude √© obrigat√≥ria',
      'number.base': 'Longitude deve ser um n√∫mero',
      'number.precision': 'Longitude deve ter no m√°ximo 6 casas decimais'
    })
});

module.exports = {
  createEnderecoEntrega,
  updateEnderecoEntrega,
  listEnderecosEntrega,
  enderecoEntregaParams,
  updateCoordenadasSchema
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\external-notas.validation.js
================================================================================

// ==========================================
// 4. EXTERNAL NOTAS VALIDATIONS
// ==========================================
// backend/src/validations/external-notas.validation.js

const Joi = require('joi');

// Schema para recebedor
const recebedorSchema = Joi.object({
  cod_cliente: Joi.string().optional(),
  documento: Joi.string()
    .pattern(/^\d{11}$|^\d{14}$/)
    .required()
    .messages({
      'string.pattern.base': 'Documento deve conter 11 (CPF) ou 14 (CNPJ) d√≠gitos',
      'any.required': 'Documento do recebedor √© obrigat√≥rio'
    }),
  nome: Joi.string()
    .min(2)
    .max(255)
    .required()
    .messages({
      'any.required': 'Nome do recebedor √© obrigat√≥rio'
    }),
  endereco: Joi.string().max(500).optional(),
  bairro: Joi.string().max(100).optional(),
  cep: Joi.string()
    .pattern(/^\d{5}-?\d{3}$/)
    .optional()
    .messages({
      'string.pattern.base': 'CEP deve estar no formato 00000-000 ou 00000000'
    }),
  cidade: Joi.string().max(100).optional(),
  uf: Joi.string()
    .length(2)
    .uppercase()
    .optional()
    .messages({
      'string.length': 'UF deve conter exatamente 2 caracteres'
    }),
  contato: Joi.string().max(50).optional()
});

// Schema para remetente
const remetenteSchema = Joi.object({
  documento: Joi.string()
    .pattern(/^\d{14}$/)
    .required()
    .messages({
      'string.pattern.base': 'CNPJ do remetente deve conter 14 d√≠gitos',
      'any.required': 'CNPJ do remetente √© obrigat√≥rio'
    }),
  nome: Joi.string()
    .min(2)
    .max(255)
    .required()
    .messages({
      'any.required': 'Nome do remetente √© obrigat√≥rio'
    }),
  endereco: Joi.string().max(500).optional(),
  municipio: Joi.string().max(100).optional(),
  uf: Joi.string().length(2).uppercase().optional(),
  contato: Joi.string().max(50).optional()
});

// Schema para transportadora
const transportadoraSchema = Joi.object({
  cnpj: Joi.string()
    .pattern(/^\d{14}$/)
    .required()
    .messages({
      'string.pattern.base': 'CNPJ da transportadora deve conter 14 d√≠gitos',
      'any.required': 'CNPJ da transportadora √© obrigat√≥rio'
    }),
  nome: Joi.string()
    .min(2)
    .max(255)
    .required()
    .messages({
      'any.required': 'Nome da transportadora √© obrigat√≥rio'
    }),
  endereco: Joi.string().max(500).optional(),
  municipio: Joi.string().max(100).optional(),
  uf: Joi.string().length(2).uppercase().optional()
});

// Schema para endere√ßo de entrega
const enderecoEntregaSchema = Joi.object({
  endereco: Joi.string().max(500).optional(),
  bairro: Joi.string().max(100).optional(),
  cidade: Joi.string().max(100).optional(),
  uf: Joi.string().length(2).uppercase().optional(),
  cep: Joi.string()
    .pattern(/^\d{5}-?\d{3}$/)
    .optional()
    .messages({
      'string.pattern.base': 'CEP deve estar no formato 00000-000 ou 00000000'
    }),
  doca: Joi.string().max(20).optional(),
  rota: Joi.string().max(50).optional()
});

// Schema para nota fiscal individual
const notaFiscalSchema = Joi.object({
  peso_calculo: Joi.number().min(0).optional(),
  observacoes: Joi.string().max(1000).optional(),
  previsao_entrega: Joi.date().iso().optional(),
  chave_nf: Joi.string()
    .length(44)
    .pattern(/^\d{44}$/)
    .required()
    .messages({
      'string.length': 'Chave da NF deve conter exatamente 44 d√≠gitos',
      'string.pattern.base': 'Chave da NF deve conter apenas n√∫meros',
      'any.required': 'Chave da NF √© obrigat√≥ria'
    }),
  ser: Joi.number().integer().min(1).max(999).optional(),
  emi_nf: Joi.date().iso().required().messages({
    'any.required': 'Data de emiss√£o da NF √© obrigat√≥ria'
  }),
  nro: Joi.number().integer().min(1).required().messages({
    'any.required': 'N√∫mero da NF √© obrigat√≥rio'
  }),
  nro_pedido: Joi.number().integer().min(1).optional(),
  peso_real: Joi.number().min(0).optional(),
  cod_rep: Joi.number().integer().min(0).optional(),
  nome_rep: Joi.string().max(255).optional(),
  qtd_volumes: Joi.number().integer().min(1).optional(),
  metro_cubico: Joi.number().min(0).optional(),
  mensagem: Joi.string().max(500).optional(),
  valor: Joi.number().min(0).optional(),
  data_entrega: Joi.date().iso().optional(),
  status_nf: Joi.string().max(50).optional(),
  nf_retida: Joi.boolean().optional(),
  valor_frete: Joi.number().min(0).optional(),
  
  // Arrays obrigat√≥rios
  recebedor: Joi.array()
    .items(recebedorSchema)
    .min(1)
    .max(1)
    .required()
    .messages({
      'array.min': 'Dados do recebedor s√£o obrigat√≥rios',
      'any.required': 'Dados do recebedor s√£o obrigat√≥rios'
    }),
  
  remetente: Joi.array()
    .items(remetenteSchema)
    .min(1)
    .max(1)
    .required()
    .messages({
      'array.min': 'Dados do remetente s√£o obrigat√≥rios',
      'any.required': 'Dados do remetente s√£o obrigat√≥rios'
    }),
  
  transportadora: Joi.array()
    .items(transportadoraSchema)
    .min(1)
    .max(1)
    .required()
    .messages({
      'array.min': 'Dados da transportadora s√£o obrigat√≥rios',
      'any.required': 'Dados da transportadora s√£o obrigat√≥rios'
    }),
  
  endereco_entrega: Joi.array()
    .items(enderecoEntregaSchema)
    .max(1)
    .optional()
});

// Schema principal para o body da requisi√ß√£o
const receiveNotasFiscaisSchema = Joi.object({
  notfis: Joi.array()
    .items(notaFiscalSchema)
    .min(1)
    .max(100)
    .required()
    .messages({
      'array.min': 'Pelo menos uma nota fiscal √© obrigat√≥ria',
      'array.max': 'M√°ximo de 100 notas fiscais por requisi√ß√£o',
      'any.required': 'Array de notas fiscais √© obrigat√≥rio'
    })
});

// Schema para consulta de status
const consultarStatusSchema = Joi.object({
  chave_nf: Joi.string()
    .length(44)
    .pattern(/^\d{44}$/)
    .required()
    .messages({
      'string.length': 'Chave da NF deve conter exatamente 44 d√≠gitos',
      'string.pattern.base': 'Chave da NF deve conter apenas n√∫meros',
      'any.required': 'Chave da NF √© obrigat√≥ria'
    })
});

// Schema para busca de notas fiscais
const buscarNotasSchema = Joi.object({
  nro_pedido: Joi.number().integer().min(1).optional(),
  data_inicio: Joi.date().iso().optional(),
  data_fim: Joi.date().iso().min(Joi.ref('data_inicio')).optional(),
  status: Joi.string().max(50).optional(),
  transportadora: Joi.number().integer().min(1).optional(),
  limite: Joi.number().integer().min(1).max(100).default(50)
});

module.exports = {
  receiveNotasFiscaisSchema,
  consultarStatusSchema,
  buscarNotasSchema
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\external-ocorrencias.validation.js
================================================================================

// ==========================================
// 5. EXTERNAL OCORRENCIAS VALIDATIONS
// ==========================================
// backend/src/validations/external-ocorrencias.validation.js

const Joi = require('joi');

// Schema para ocorr√™ncia individual
const ocorrenciaSchema = Joi.object({
  nro_nf: Joi.number()
    .integer()
    .min(1)
    .required()
    .messages({
      'any.required': 'N√∫mero da NF √© obrigat√≥rio',
      'number.integer': 'N√∫mero da NF deve ser um inteiro',
      'number.min': 'N√∫mero da NF deve ser maior que 0'
    }),
  
  codigo: Joi.string()
    .min(1)
    .max(50)
    .required()
    .messages({
      'any.required': 'C√≥digo da ocorr√™ncia √© obrigat√≥rio',
      'string.max': 'C√≥digo da ocorr√™ncia deve ter no m√°ximo 50 caracteres'
    }),
  
  descricao: Joi.string()
    .max(500)
    .optional()
    .messages({
      'string.max': 'Descri√ß√£o deve ter no m√°ximo 500 caracteres'
    }),
  
  data_evento: Joi.date()
    .iso()
    .max('now')
    .optional()
    .messages({
      'date.max': 'Data do evento n√£o pode ser futura'
    }),
  
  dataHoraEvento: Joi.date()
    .iso()
    .max('now')
    .optional()
    .messages({
      'date.max': 'Data/hora do evento n√£o pode ser futura'
    }),
  
  recebedor: Joi.string()
    .max(255)
    .optional()
    .messages({
      'string.max': 'Nome do recebedor deve ter no m√°ximo 255 caracteres'
    }),
  
  documento_recebedor: Joi.string()
    .pattern(/^\d{11}$|^\d{14}$/)
    .optional()
    .messages({
      'string.pattern.base': 'Documento do recebedor deve conter 11 (CPF) ou 14 (CNPJ) d√≠gitos'
    }),
  
  latitude: Joi.number()
    .min(-90)
    .max(90)
    .optional()
    .messages({
      'number.min': 'Latitude deve estar entre -90 e 90',
      'number.max': 'Latitude deve estar entre -90 e 90'
    }),
  
  longitude: Joi.number()
    .min(-180)
    .max(180)
    .optional()
    .messages({
      'number.min': 'Longitude deve estar entre -180 e 180',
      'number.max': 'Longitude deve estar entre -180 e 180'
    }),
  
  comprovante_url: Joi.string()
    .uri()
    .max(500)
    .optional()
    .messages({
      'string.uri': 'URL do comprovante deve ser v√°lida',
      'string.max': 'URL do comprovante deve ter no m√°ximo 500 caracteres'
    })
})
.custom((value, helpers) => {
  // Validar que pelo menos uma data foi fornecida
  if (!value.data_evento && !value.dataHoraEvento) {
    return helpers.error('custom.missingDate');
  }
  return value;
}, 'Data validation')
.messages({
  'custom.missingDate': 'Data do evento ou dataHoraEvento √© obrigat√≥ria'
});

// Schema para o body da requisi√ß√£o
const receiveOcorrenciasSchema = Joi.object({
  ocorrencias: Joi.array()
    .items(ocorrenciaSchema)
    .min(1)
    .max(200)
    .required()
    .messages({
      'array.min': 'Pelo menos uma ocorr√™ncia √© obrigat√≥ria',
      'array.max': 'M√°ximo de 200 ocorr√™ncias por requisi√ß√£o',
      'any.required': 'Array de ocorr√™ncias √© obrigat√≥rio'
    })
});

// Schema para consulta de ocorr√™ncias
const consultarOcorrenciasSchema = Joi.object({
  nro_nf: Joi.number()
    .integer()
    .min(1)
    .required()
    .messages({
      'any.required': 'N√∫mero da NF √© obrigat√≥rio',
      'number.integer': 'N√∫mero da NF deve ser um inteiro'
    })
});

// Schema para query parameters
const consultarOcorrenciasQuerySchema = Joi.object({
  limite: Joi.number()
    .integer()
    .min(1)
    .max(200)
    .default(50)
    .messages({
      'number.max': 'Limite m√°ximo de 200 ocorr√™ncias'
    })
});

// Schema para webhook
const webhookSchema = Joi.object({
  evento: Joi.string()
    .valid('ocorrencia', 'status_alterado', 'nf_criada', 'nf_atualizada')
    .required()
    .messages({
      'any.only': 'Evento deve ser: ocorrencia, status_alterado, nf_criada ou nf_atualizada',
      'any.required': 'Evento √© obrigat√≥rio'
    }),
  
  dados: Joi.object()
    .required()
    .messages({
      'any.required': 'Dados do evento s√£o obrigat√≥rios'
    }),
  
  timestamp: Joi.date()
    .iso()
    .optional(),
  
  origem: Joi.string()
    .max(100)
    .optional()
});

module.exports = {
  receiveOcorrenciasSchema,
  consultarOcorrenciasSchema,
  consultarOcorrenciasQuerySchema,
  webhookSchema
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\jobs.validation.js
================================================================================

// ==========================================
// 3. JOBS VALIDATIONS
// ==========================================
// backend/src/validations/jobs.validation.js

const Joi = require('joi');

const runJobValidation = Joi.object({
  // Corpo vazio para job manual
});

const apiTokenValidation = Joi.object({
  integracao: Joi.string()
    .valid('jamef', 'braspress', 'tnt', 'correios')
    .required()
    .messages({
      'string.base': 'Integra√ß√£o deve ser uma string',
      'any.required': 'Integra√ß√£o √© obrigat√≥ria',
      'any.only': 'Integra√ß√£o deve ser uma das op√ß√µes v√°lidas'
    }),
  
  token: Joi.string()
    .min(10)
    .max(500)
    .required()
    .messages({
      'string.base': 'Token deve ser uma string',
      'string.min': 'Token deve ter pelo menos 10 caracteres',
      'string.max': 'Token deve ter no m√°ximo 500 caracteres',
      'any.required': 'Token √© obrigat√≥rio'
    }),
  
  expiresAt: Joi.date()
    .iso()
    .min('now')
    .optional()
    .messages({
      'date.base': 'Data de expira√ß√£o deve ser uma data v√°lida',
      'date.format': 'Data deve estar no formato ISO',
      'date.min': 'Data de expira√ß√£o deve ser futura'
    })
});

const integrationLogsValidation = {
  params: Joi.object({
    integracaoId: Joi.number()
      .integer()
      .positive()
      .required()
      .messages({
        'number.base': 'ID da integra√ß√£o deve ser um n√∫mero',
        'number.integer': 'ID da integra√ß√£o deve ser um n√∫mero inteiro',
        'number.positive': 'ID da integra√ß√£o deve ser positivo',
        'any.required': 'ID da integra√ß√£o √© obrigat√≥rio'
      })
  }),
  
  query: Joi.object({
    page: Joi.number()
      .integer()
      .min(1)
      .default(1)
      .messages({
        'number.base': 'P√°gina deve ser um n√∫mero',
        'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
        'number.min': 'P√°gina deve ser pelo menos 1'
      }),
    
    limit: Joi.number()
      .integer()
      .min(1)
      .max(100)
      .default(50)
      .messages({
        'number.base': 'Limite deve ser um n√∫mero',
        'number.integer': 'Limite deve ser um n√∫mero inteiro',
        'number.min': 'Limite deve ser pelo menos 1',
        'number.max': 'Limite deve ser no m√°ximo 100'
      }),
    
    dias: Joi.number()
      .integer()
      .min(1)
      .max(365)
      .default(7)
      .messages({
        'number.base': 'Dias deve ser um n√∫mero',
        'number.integer': 'Dias deve ser um n√∫mero inteiro',
        'number.min': 'Dias deve ser pelo menos 1',
        'number.max': 'Dias deve ser no m√°ximo 365'
      })
  })
};

const processTransportadoraValidation = Joi.object({
  transportadoraId: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'number.base': 'ID da transportadora deve ser um n√∫mero',
      'number.integer': 'ID da transportadora deve ser um n√∫mero inteiro',
      'number.positive': 'ID da transportadora deve ser positivo',
      'any.required': 'ID da transportadora √© obrigat√≥rio'
    })
});

const queueValidation = Joi.object({
  transportadoraId: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'number.base': 'ID da transportadora deve ser um n√∫mero',
      'number.integer': 'ID da transportadora deve ser um n√∫mero inteiro',
      'number.positive': 'ID da transportadora deve ser positivo',
      'any.required': 'ID da transportadora √© obrigat√≥rio'
    })
});

module.exports = {
  runJobValidation,
  apiTokenValidation,
  integrationLogsValidation,
  processTransportadoraValidation,
  queueValidation
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\monitoring.validation.js
================================================================================

// ==========================================
// 4. MONITORING VALIDATIONS
// ==========================================
// backend/src/validations/monitoring.validation.js

const Joi = require('joi');

const dashboardValidation = Joi.object({
  periodo: Joi.number()
    .integer()
    .min(1)
    .max(365)
    .default(7)
    .messages({
      'number.base': 'Per√≠odo deve ser um n√∫mero',
      'number.integer': 'Per√≠odo deve ser um n√∫mero inteiro',
      'number.min': 'Per√≠odo deve ser pelo menos 1 dia',
      'number.max': 'Per√≠odo deve ser no m√°ximo 365 dias'
    })
});

const transportadoraMetricsValidation = {
  params: Joi.object({
    transportadoraId: Joi.number()
      .integer()
      .positive()
      .required()
      .messages({
        'number.base': 'ID da transportadora deve ser um n√∫mero',
        'number.integer': 'ID da transportadora deve ser um n√∫mero inteiro',
        'number.positive': 'ID da transportadora deve ser positivo',
        'any.required': 'ID da transportadora √© obrigat√≥rio'
      })
  }),
  
  query: Joi.object({
    periodo: Joi.number()
      .integer()
      .min(1)
      .max(365)
      .default(30)
      .messages({
        'number.base': 'Per√≠odo deve ser um n√∫mero',
        'number.integer': 'Per√≠odo deve ser um n√∫mero inteiro',
        'number.min': 'Per√≠odo deve ser pelo menos 1 dia',
        'number.max': 'Per√≠odo deve ser no m√°ximo 365 dias'
      })
  })
};

const performanceStatsValidation = Joi.object({
  periodo: Joi.number()
    .integer()
    .min(1)
    .max(365)
    .default(7)
    .messages({
      'number.base': 'Per√≠odo deve ser um n√∫mero',
      'number.integer': 'Per√≠odo deve ser um n√∫mero inteiro',
      'number.min': 'Per√≠odo deve ser pelo menos 1 dia',
      'number.max': 'Per√≠odo deve ser no m√°ximo 365 dias'
    }),
  
  agrupamento: Joi.string()
    .valid('hora', 'dia', 'mes')
    .default('dia')
    .messages({
      'string.base': 'Agrupamento deve ser uma string',
      'any.only': 'Agrupamento deve ser: hora, dia ou mes'
    })
});

const logsFilterValidation = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser pelo menos 1'
    }),
  
  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(50)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser pelo menos 1',
      'number.max': 'Limite deve ser no m√°ximo 100'
    }),
  
  integracao: Joi.string()
    .valid('jamef', 'braspress', 'tnt', 'correios', 'transportadoras_api')
    .optional()
    .messages({
      'string.base': 'Integra√ß√£o deve ser uma string',
      'any.only': 'Integra√ß√£o deve ser uma das op√ß√µes v√°lidas'
    }),
  
  nivel: Joi.string()
    .valid('erro', 'sucesso', 'info')
    .optional()
    .messages({
      'string.base': 'N√≠vel deve ser uma string',
      'any.only': 'N√≠vel deve ser: erro, sucesso ou info'
    }),
  
  dataInicio: Joi.date()
    .iso()
    .optional()
    .messages({
      'date.base': 'Data de in√≠cio deve ser uma data v√°lida',
      'date.format': 'Data deve estar no formato ISO'
    }),
  
  dataFim: Joi.date()
    .iso()
    .min(Joi.ref('dataInicio'))
    .optional()
    .messages({
      'date.base': 'Data de fim deve ser uma data v√°lida',
      'date.format': 'Data deve estar no formato ISO',
      'date.min': 'Data de fim deve ser posterior √† data de in√≠cio'
    }),
  
  nro: Joi.number()
    .integer()
    .positive()
    .optional()
    .messages({
      'number.base': 'N√∫mero deve ser um n√∫mero',
      'number.integer': 'N√∫mero deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero deve ser positivo'
    }),
  
  busca: Joi.string()
    .min(3)
    .max(100)
    .optional()
    .messages({
      'string.base': 'Busca deve ser uma string',
      'string.min': 'Busca deve ter pelo menos 3 caracteres',
      'string.max': 'Busca deve ter no m√°ximo 100 caracteres'
    })
});

const exportReportValidation = Joi.object({
  tipo: Joi.string()
    .valid('performance', 'transportadoras', 'ocorrencias')
    .default('performance')
    .messages({
      'string.base': 'Tipo deve ser uma string',
      'any.only': 'Tipo deve ser: performance, transportadoras ou ocorrencias'
    }),
  
  formato: Joi.string()
    .valid('json', 'csv')
    .default('json')
    .messages({
      'string.base': 'Formato deve ser uma string',
      'any.only': 'Formato deve ser: json ou csv'
    }),
  
  periodo: Joi.number()
    .integer()
    .min(1)
    .max(365)
    .default(30)
    .messages({
      'number.base': 'Per√≠odo deve ser um n√∫mero',
      'number.integer': 'Per√≠odo deve ser um n√∫mero inteiro',
      'number.min': 'Per√≠odo deve ser pelo menos 1 dia',
      'number.max': 'Per√≠odo deve ser no m√°ximo 365 dias'
    }),
  
  transportadoraId: Joi.number()
    .integer()
    .positive()
    .optional()
    .messages({
      'number.base': 'ID da transportadora deve ser um n√∫mero',
      'number.integer': 'ID da transportadora deve ser um n√∫mero inteiro',
      'number.positive': 'ID da transportadora deve ser positivo'
    })
});

const monitoringConfigValidation = Joi.object({
  alertas: Joi.object({
    erro_threshold: Joi.number()
      .integer()
      .min(1)
      .max(100)
      .default(5)
      .messages({
        'number.base': 'Limite de erros deve ser um n√∫mero',
        'number.integer': 'Limite de erros deve ser um n√∫mero inteiro',
        'number.min': 'Limite de erros deve ser pelo menos 1',
        'number.max': 'Limite de erros deve ser no m√°ximo 100'
      }),
    
    inatividade_hours: Joi.number()
      .integer()
      .min(1)
      .max(48)
      .default(4)
      .messages({
        'number.base': 'Horas de inatividade deve ser um n√∫mero',
        'number.integer': 'Horas de inatividade deve ser um n√∫mero inteiro',
        'number.min': 'Horas de inatividade deve ser pelo menos 1',
        'number.max': 'Horas de inatividade deve ser no m√°ximo 48'
      })
  }).optional(),
  
  dashboard: Joi.object({
    periodo_padrao: Joi.number()
      .integer()
      .min(1)
      .max(365)
      .default(7)
      .messages({
        'number.base': 'Per√≠odo padr√£o deve ser um n√∫mero',
        'number.integer': 'Per√≠odo padr√£o deve ser um n√∫mero inteiro',
        'number.min': 'Per√≠odo padr√£o deve ser pelo menos 1',
        'number.max': 'Per√≠odo padr√£o deve ser no m√°ximo 365'
      }),
    
    refresh_interval: Joi.number()
      .integer()
      .min(10)
      .max(300)
      .default(30)
      .messages({
        'number.base': 'Intervalo de refresh deve ser um n√∫mero',
        'number.integer': 'Intervalo de refresh deve ser um n√∫mero inteiro',
        'number.min': 'Intervalo de refresh deve ser pelo menos 10 segundos',
        'number.max': 'Intervalo de refresh deve ser no m√°ximo 300 segundos'
      })
  }).optional()
});

module.exports = {
  dashboardValidation,
  transportadoraMetricsValidation,
  performanceStatsValidation,
  logsFilterValidation,
  exportReportValidation,
  monitoringConfigValidation
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\motoristas.validation.js
================================================================================

const Joi = require('joi');
const { validateCPF, validateEmail, validateUF } = require('../utils/validators');

// Validador personalizado para CPF
const cpfValidator = (value, helpers) => {
  if (!validateCPF(value)) {
    return helpers.error('any.invalid');
  }
  return value.replace(/\D/g, ''); // Retorna apenas n√∫meros
};

// Validador personalizado para email
const emailValidator = (value, helpers) => {
  if (!validateEmail(value)) {
    return helpers.error('any.invalid');
  }
  return value.toLowerCase().trim();
};

// Validador personalizado para UF - aceita apenas siglas de 2 caracteres
const ufValidator = (value, helpers) => {
  if (!value) return value; // Permite vazio
  
  // Aceita apenas siglas de 2 caracteres
  if (value.length !== 2) {
    return helpers.error('string.length', { limit: 2, value });
  }
  
  if (!validateUF(value)) {
    return helpers.error('any.invalid');
  }
  return value.toUpperCase();
};

// Schema para cria√ß√£o de motorista
const createMotorista = Joi.object({
  nome: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Nome √© obrigat√≥rio',
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Nome n√£o pode estar vazio'
    }),

  sobrenome: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Sobrenome deve ter no m√°ximo 255 caracteres'
    }),

  cpf: Joi.string()
    .required()
    .custom(cpfValidator)
    .messages({
      'any.required': 'CPF √© obrigat√≥rio',
      'any.invalid': 'CPF inv√°lido - deve conter 11 d√≠gitos v√°lidos',
      'string.base': 'CPF deve ser uma string'
    }),

  email: Joi.string()
    .allow(null, '')
    .custom(emailValidator)
    .messages({
      'any.invalid': 'Email inv√°lido',
      'string.base': 'Email deve ser uma string'
    }),

  contato: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Contato deve ter no m√°ximo 255 caracteres'
    }),

  send_mensagem: Joi.boolean()
    .default(true)
    .messages({
      'boolean.base': 'Send mensagem deve ser verdadeiro ou falso'
    }),

  legislacao_id: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'Legisla√ß√£o ID deve ser um n√∫mero',
      'number.integer': 'Legisla√ß√£o ID deve ser um n√∫mero inteiro',
      'number.positive': 'Legisla√ß√£o ID deve ser um n√∫mero positivo'
    }),

  // Campos de endere√ßo
  pais: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Pa√≠s deve ter no m√°ximo 255 caracteres'
    }),

  estado: Joi.string()
    .allow(null, '')
    .length(2)
    .custom(ufValidator)
    .messages({
      'string.length': 'Estado deve ser a sigla da UF com 2 caracteres (ex: SP, RJ, MG)',
      'any.invalid': 'Estado deve ser uma UF v√°lida (ex: SP, RJ, MG, etc.)',
      'string.base': 'Estado deve ser uma string'
    }),

  cidade: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    }),

  bairro: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Bairro deve ter no m√°ximo 255 caracteres'
    }),

  rua: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Rua deve ter no m√°ximo 255 caracteres'
    }),

  numero: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'N√∫mero deve ter no m√°ximo 255 caracteres'
    }),

  cep: Joi.string()
    .allow(null, '')
    .pattern(/^\d{5}-?\d{3}$/)
    .messages({
      'string.pattern.base': 'CEP deve estar no formato 00000-000 ou 00000000'
    }),

  unidade: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Unidade deve ter no m√°ximo 255 caracteres'
    }),

  foto_perfil: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Foto perfil deve ter no m√°ximo 255 caracteres'
    })
});

// Schema para atualiza√ß√£o de motorista
const updateMotorista = Joi.object({
  nome: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Nome n√£o pode estar vazio'
    }),

  sobrenome: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Sobrenome deve ter no m√°ximo 255 caracteres'
    }),

  cpf: Joi.string()
    .custom(cpfValidator)
    .messages({
      'any.invalid': 'CPF inv√°lido - deve conter 11 d√≠gitos v√°lidos',
      'string.base': 'CPF deve ser uma string'
    }),

  email: Joi.string()
    .allow(null, '')
    .custom(emailValidator)
    .messages({
      'any.invalid': 'Email inv√°lido',
      'string.base': 'Email deve ser uma string'
    }),

  contato: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Contato deve ter no m√°ximo 255 caracteres'
    }),

  send_mensagem: Joi.boolean()
    .messages({
      'boolean.base': 'Send mensagem deve ser verdadeiro ou falso'
    }),

  legislacao_id: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'Legisla√ß√£o ID deve ser um n√∫mero',
      'number.integer': 'Legisla√ß√£o ID deve ser um n√∫mero inteiro',
      'number.positive': 'Legisla√ß√£o ID deve ser um n√∫mero positivo'
    }),

  // Campos de endere√ßo
  pais: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Pa√≠s deve ter no m√°ximo 255 caracteres'
    }),

  estado: Joi.string()
    .allow(null, '')
    .length(2)
    .custom(ufValidator)
    .messages({
      'string.length': 'Estado deve ser a sigla da UF com 2 caracteres (ex: SP, RJ, MG)',
      'any.invalid': 'Estado deve ser uma UF v√°lida (ex: SP, RJ, MG, etc.)',
      'string.base': 'Estado deve ser uma string'
    }),

  cidade: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    }),

  bairro: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Bairro deve ter no m√°ximo 255 caracteres'
    }),

  rua: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Rua deve ter no m√°ximo 255 caracteres'
    }),

  numero: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'N√∫mero deve ter no m√°ximo 255 caracteres'
    }),

  cep: Joi.string()
    .allow(null, '')
    .pattern(/^\d{5}-?\d{3}$/)
    .messages({
      'string.pattern.base': 'CEP deve estar no formato 00000-000 ou 00000000'
    }),

  unidade: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Unidade deve ter no m√°ximo 255 caracteres'
    }),

  foto_perfil: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Foto perfil deve ter no m√°ximo 255 caracteres'
    })
}).min(1); // Pelo menos um campo deve ser fornecido

// Schema para listagem com filtros
const listMotoristas = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser maior que 0'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(20)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 100'
    }),

  orderBy: Joi.string()
    .valid('id', 'nome', 'sobrenome', 'cpf', 'email', 'cidade', 'estado', 'created_at', 'updated_at')
    .default('created_at')
    .messages({
      'any.only': 'Campo de ordena√ß√£o inv√°lido'
    }),

  orderDirection: Joi.string()
    .valid('ASC', 'DESC', 'asc', 'desc')
    .default('DESC')
    .messages({
      'any.only': 'Dire√ß√£o de ordena√ß√£o deve ser ASC ou DESC'
    }),

  nome: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres'
    }),

  cpf: Joi.string()
    .custom(cpfValidator)
    .messages({
      'any.invalid': 'CPF inv√°lido'
    }),

  cidade: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Cidade deve ter pelo menos 2 caracteres',
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    }),

  estado: Joi.string()
    .length(2)
    .custom(ufValidator)
    .messages({
      'string.length': 'Estado deve ser a sigla da UF com 2 caracteres',
      'any.invalid': 'Estado deve ser uma UF v√°lida'
    }),

  legislacao_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Legisla√ß√£o ID deve ser um n√∫mero',
      'number.integer': 'Legisla√ß√£o ID deve ser um n√∫mero inteiro',
      'number.positive': 'Legisla√ß√£o ID deve ser um n√∫mero positivo'
    }),

  send_mensagem: Joi.boolean()
    .messages({
      'boolean.base': 'Send mensagem deve ser verdadeiro ou falso'
    })
});

// Schema para busca por nome
const searchMotoristas = Joi.object({
  q: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Termo de busca √© obrigat√≥rio',
      'string.min': 'Termo de busca deve ter pelo menos 2 caracteres',
      'string.max': 'Termo de busca deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Termo de busca n√£o pode estar vazio'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(50)
    .default(10)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 50'
    })
});

// Schema para par√¢metros de rota
const motoristaParams = Joi.object({
  id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'ID √© obrigat√≥rio',
      'number.base': 'ID deve ser um n√∫mero',
      'number.integer': 'ID deve ser um n√∫mero inteiro',
      'number.positive': 'ID deve ser um n√∫mero positivo'
    })
});

// Schema para busca por CPF
const cpfParams = Joi.object({
  cpf: Joi.string()
    .required()
    .custom(cpfValidator)
    .messages({
      'any.required': 'CPF √© obrigat√≥rio',
      'any.invalid': 'CPF inv√°lido'
    })
});

// Schema para busca por cidade
const cidadeParams = Joi.object({
  cidade: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Cidade √© obrigat√≥ria',
      'string.min': 'Cidade deve ter pelo menos 2 caracteres',
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    })
});

module.exports = {
  createMotorista,
  updateMotorista,
  listMotoristas,
  searchMotoristas,
  motoristaParams,
  cpfParams,
  cidadeParams
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\nota-fiscal-ocorrencias.validation.js
================================================================================

// validations/nota-fiscal-ocorrencias.validation.js
const Joi = require('joi');

// Schema para listagem de ocorr√™ncias de nota fiscal
const listOcorrenciasNotaFiscal = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser maior que zero'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(20)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que zero',
      'number.max': 'Limite deve ser menor ou igual a 100'
    }),

  orderBy: Joi.string()
    .valid('id', 'dataHoraEvento', 'dataHoraEnvio', 'codigo', 'created_at')
    .default('dataHoraEvento')
    .messages({
      'any.only': 'OrderBy deve ser: id, dataHoraEvento, dataHoraEnvio, codigo ou created_at'
    }),

  orderDirection: Joi.string()
    .valid('ASC', 'DESC', 'asc', 'desc')
    .default('DESC')
    .messages({
      'any.only': 'OrderDirection deve ser ASC ou DESC'
    })
});

// Schema para cria√ß√£o de ocorr√™ncia para nota fiscal
const createOcorrenciaNotaFiscal = Joi.object({
  // Campos obrigat√≥rios
  codigo: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'C√≥digo da ocorr√™ncia √© obrigat√≥rio',
      'number.base': 'C√≥digo deve ser um n√∫mero',
      'number.integer': 'C√≥digo deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo deve ser positivo'
    }),

  descricao: Joi.string()
    .required()
    .min(1)
    .max(65535)
    .trim()
    .messages({
      'any.required': 'Descri√ß√£o √© obrigat√≥ria',
      'string.empty': 'Descri√ß√£o n√£o pode estar vazia',
      'string.min': 'Descri√ß√£o deve ter pelo menos 1 caractere',
      'string.max': 'Descri√ß√£o √© muito longa'
    }),

  dataHoraEnvio: Joi.date()
    .iso()
    .required()
    .messages({
      'any.required': 'Data/hora de envio √© obrigat√≥ria',
      'date.base': 'Data/hora de envio deve ser uma data v√°lida',
      'date.format': 'Data/hora de envio deve estar no formato ISO'
    }),

  // Campos opcionais
  dataHoraEvento: Joi.date()
    .iso()
    .optional()
    .allow(null)
    .messages({
      'date.base': 'Data/hora do evento deve ser uma data v√°lida',
      'date.format': 'Data/hora do evento deve estar no formato ISO'
    }),

  complemento: Joi.string()
    .optional()
    .max(255)
    .trim()
    .allow(null, '')
    .messages({
      'string.max': 'Complemento deve ter no m√°ximo 255 caracteres'
    }),

  nomeRecebedor: Joi.string()
    .optional()
    .max(255)
    .trim()
    .allow(null, '')
    .messages({
      'string.max': 'Nome do recebedor deve ter no m√°ximo 255 caracteres'
    }),

  docRecebedor: Joi.string()
    .optional()
    .max(20)
    .trim()
    .allow(null, '')
    .messages({
      'string.max': 'Documento do recebedor deve ter no m√°ximo 20 caracteres'
    }),

  latitude: Joi.number()
    .precision(2)
    .min(-90)
    .max(90)
    .optional()
    .allow(null)
    .messages({
      'number.base': 'Latitude deve ser um n√∫mero',
      'number.precision': 'Latitude deve ter no m√°ximo 2 casas decimais',
      'number.min': 'Latitude deve estar entre -90 e 90',
      'number.max': 'Latitude deve estar entre -90 e 90'
    }),

  longitude: Joi.number()
    .precision(2)
    .min(-180)
    .max(180)
    .optional()
    .allow(null)
    .messages({
      'number.base': 'Longitude deve ser um n√∫mero',
      'number.precision': 'Longitude deve ter no m√°ximo 2 casas decimais',
      'number.min': 'Longitude deve estar entre -180 e 180',
      'number.max': 'Longitude deve estar entre -180 e 180'
    }),

  linkComprovante: Joi.string()
    .uri()
    .optional()
    .allow(null, '')
    .messages({
      'string.uri': 'Link do comprovante deve ser uma URL v√°lida'
    }),

  zaapId: Joi.string()
    .optional()
    .max(255)
    .allow(null, '')
    .messages({
      'string.max': 'ZaapId deve ter no m√°ximo 255 caracteres'
    }),

  messageId: Joi.string()
    .optional()
    .max(255)
    .allow(null, '')
    .messages({
      'string.max': 'MessageId deve ter no m√°ximo 255 caracteres'
    }),

  id_z_api: Joi.string()
    .optional()
    .max(255)
    .allow(null, '')
    .messages({
      'string.max': 'ID Z-API deve ter no m√°ximo 255 caracteres'
    }),

  enviado_zap: Joi.boolean()
    .optional()
    .default(false)
    .messages({
      'boolean.base': 'Enviado ZAP deve ser verdadeiro ou falso'
    }),

  enviado_date: Joi.date()
    .iso()
    .optional()
    .allow(null)
    .messages({
      'date.base': 'Data de envio deve ser uma data v√°lida',
      'date.format': 'Data de envio deve estar no formato ISO'
    }),

  status: Joi.string()
    .valid('waiting', 'running', 'finished')
    .optional()
    .default('waiting')
    .messages({
      'any.only': 'Status deve ser: waiting, running ou finished'
    }),

  link_comprovante_sistema: Joi.string()
    .uri()
    .optional()
    .allow(null, '')
    .messages({
      'string.uri': 'Link do comprovante do sistema deve ser uma URL v√°lida'
    }),

  status_download_comprovante: Joi.number()
    .integer()
    .optional()
    .allow(null)
    .messages({
      'number.base': 'Status download comprovante deve ser um n√∫mero',
      'number.integer': 'Status download comprovante deve ser um n√∫mero inteiro'
    }),

  tipo_comprovante_download: Joi.string()
    .optional()
    .max(255)
    .allow(null, '')
    .messages({
      'string.max': 'Tipo comprovante download deve ter no m√°ximo 255 caracteres'
    })
});

// Schema para atualiza√ß√£o de ocorr√™ncia
const updateOcorrenciaNotaFiscal = Joi.object({
  codigo: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'C√≥digo deve ser um n√∫mero',
      'number.integer': 'C√≥digo deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo deve ser positivo'
    }),

  descricao: Joi.string()
    .min(1)
    .max(65535)
    .trim()
    .messages({
      'string.empty': 'Descri√ß√£o n√£o pode estar vazia',
      'string.min': 'Descri√ß√£o deve ter pelo menos 1 caractere',
      'string.max': 'Descri√ß√£o √© muito longa'
    }),

  dataHoraEnvio: Joi.date()
    .iso()
    .messages({
      'date.base': 'Data/hora de envio deve ser uma data v√°lida',
      'date.format': 'Data/hora de envio deve estar no formato ISO'
    }),

  dataHoraEvento: Joi.date()
    .iso()
    .allow(null)
    .messages({
      'date.base': 'Data/hora do evento deve ser uma data v√°lida',
      'date.format': 'Data/hora do evento deve estar no formato ISO'
    }),

  complemento: Joi.string()
    .max(255)
    .trim()
    .allow(null, '')
    .messages({
      'string.max': 'Complemento deve ter no m√°ximo 255 caracteres'
    }),

  nomeRecebedor: Joi.string()
    .max(255)
    .trim()
    .allow(null, '')
    .messages({
      'string.max': 'Nome do recebedor deve ter no m√°ximo 255 caracteres'
    }),

  docRecebedor: Joi.string()
    .max(20)
    .trim()
    .allow(null, '')
    .messages({
      'string.max': 'Documento do recebedor deve ter no m√°ximo 20 caracteres'
    }),

  latitude: Joi.number()
    .precision(2)
    .min(-90)
    .max(90)
    .allow(null)
    .messages({
      'number.base': 'Latitude deve ser um n√∫mero',
      'number.precision': 'Latitude deve ter no m√°ximo 2 casas decimais',
      'number.min': 'Latitude deve estar entre -90 e 90',
      'number.max': 'Latitude deve estar entre -90 e 90'
    }),

  longitude: Joi.number()
    .precision(2)
    .min(-180)
    .max(180)
    .allow(null)
    .messages({
      'number.base': 'Longitude deve ser um n√∫mero',
      'number.precision': 'Longitude deve ter no m√°ximo 2 casas decimais',
      'number.min': 'Longitude deve estar entre -180 e 180',
      'number.max': 'Longitude deve estar entre -180 e 180'
    }),

  linkComprovante: Joi.string()
    .uri()
    .allow(null, '')
    .messages({
      'string.uri': 'Link do comprovante deve ser uma URL v√°lida'
    }),

  zaapId: Joi.string()
    .max(255)
    .allow(null, '')
    .messages({
      'string.max': 'ZaapId deve ter no m√°ximo 255 caracteres'
    }),

  messageId: Joi.string()
    .max(255)
    .allow(null, '')
    .messages({
      'string.max': 'MessageId deve ter no m√°ximo 255 caracteres'
    }),

  id_z_api: Joi.string()
    .max(255)
    .allow(null, '')
    .messages({
      'string.max': 'ID Z-API deve ter no m√°ximo 255 caracteres'
    }),

  enviado_zap: Joi.boolean()
    .messages({
      'boolean.base': 'Enviado ZAP deve ser verdadeiro ou falso'
    }),

  enviado_date: Joi.date()
    .iso()
    .allow(null)
    .messages({
      'date.base': 'Data de envio deve ser uma data v√°lida',
      'date.format': 'Data de envio deve estar no formato ISO'
    }),

  status: Joi.string()
    .valid('waiting', 'running', 'finished')
    .messages({
      'any.only': 'Status deve ser: waiting, running ou finished'
    }),

  link_comprovante_sistema: Joi.string()
    .uri()
    .allow(null, '')
    .messages({
      'string.uri': 'Link do comprovante do sistema deve ser uma URL v√°lida'
    }),

  status_download_comprovante: Joi.number()
    .integer()
    .allow(null)
    .messages({
      'number.base': 'Status download comprovante deve ser um n√∫mero',
      'number.integer': 'Status download comprovante deve ser um n√∫mero inteiro'
    }),

  tipo_comprovante_download: Joi.string()
    .max(255)
    .allow(null, '')
    .messages({
      'string.max': 'Tipo comprovante download deve ter no m√°ximo 255 caracteres'
    })
});

// Schema para par√¢metros de rota - Nota Fiscal
const notaFiscalParams = Joi.object({
  nroNf: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'N√∫mero da nota fiscal √© obrigat√≥rio',
      'number.base': 'N√∫mero da nota fiscal deve ser um n√∫mero',
      'number.integer': 'N√∫mero da nota fiscal deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero da nota fiscal deve ser positivo'
    })
});

// Schema para par√¢metros de rota - Nota Fiscal e C√≥digo
const notaFiscalCodigoParams = Joi.object({
  nroNf: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'N√∫mero da nota fiscal √© obrigat√≥rio',
      'number.base': 'N√∫mero da nota fiscal deve ser um n√∫mero',
      'number.integer': 'N√∫mero da nota fiscal deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero da nota fiscal deve ser positivo'
    }),

  codigo: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'C√≥digo da ocorr√™ncia √© obrigat√≥rio',
      'number.base': 'C√≥digo deve ser um n√∫mero',
      'number.integer': 'C√≥digo deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo deve ser positivo'
    })
});

// Schema para par√¢metros de rota - Nota Fiscal e Ocorr√™ncia
const notaFiscalOcorrenciaParams = Joi.object({
  nroNf: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'N√∫mero da nota fiscal √© obrigat√≥rio',
      'number.base': 'N√∫mero da nota fiscal deve ser um n√∫mero',
      'number.integer': 'N√∫mero da nota fiscal deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero da nota fiscal deve ser positivo'
    }),

  ocorrenciaId: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'ID da ocorr√™ncia √© obrigat√≥rio',
      'number.base': 'ID da ocorr√™ncia deve ser um n√∫mero',
      'number.integer': 'ID da ocorr√™ncia deve ser um n√∫mero inteiro',
      'number.positive': 'ID da ocorr√™ncia deve ser positivo'
    })
});

module.exports = {
  listOcorrenciasNotaFiscal,
  createOcorrenciaNotaFiscal,
  updateOcorrenciaNotaFiscal,
  notaFiscalParams,
  notaFiscalCodigoParams,
  notaFiscalOcorrenciaParams
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\notas-fiscais.validation.js
================================================================================

const Joi = require('joi');
const { NOTA_FISCAL_STATUS } = require('../utils/constants');

// Validador personalizado para chave de nota fiscal (44 d√≠gitos)
const chaveValidator = (value, helpers) => {
  if (!value) return value;
  
  const cleanValue = String(value).replace(/\D/g, '');
  if (cleanValue.length !== 44) {
    return helpers.error('any.invalid');
  }
  return cleanValue;
};

// Validador personalizado para data n√£o futura
const dateNotFutureValidator = (value, helpers) => {
  const date = new Date(value);
  const today = new Date();
  today.setHours(23, 59, 59, 999);
  
  if (date > today) {
    return helpers.error('date.max', { limit: today });
  }
  return value;
};

// Schema para cria√ß√£o de nota fiscal
const createNotaFiscal = Joi.object({
  cliente_id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'Cliente √© obrigat√≥rio',
      'number.base': 'Cliente deve ser um n√∫mero',
      'number.integer': 'Cliente deve ser um n√∫mero inteiro',
      'number.positive': 'Cliente deve ser um n√∫mero positivo'
    }),

  embarcador_id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'Embarcador √© obrigat√≥rio',
      'number.base': 'Embarcador deve ser um n√∫mero',
      'number.integer': 'Embarcador deve ser um n√∫mero inteiro',
      'number.positive': 'Embarcador deve ser um n√∫mero positivo'
    }),

  transportadora_id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'Transportadora √© obrigat√≥ria',
      'number.base': 'Transportadora deve ser um n√∫mero',
      'number.integer': 'Transportadora deve ser um n√∫mero inteiro',
      'number.positive': 'Transportadora deve ser um n√∫mero positivo'
    }),

  endereco_entrega_id: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'Endere√ßo de entrega deve ser um n√∫mero',
      'number.integer': 'Endere√ßo de entrega deve ser um n√∫mero inteiro',
      'number.positive': 'Endere√ßo de entrega deve ser um n√∫mero positivo'
    }),

  chave_cte: Joi.string()
    .allow(null, '')
    .custom(chaveValidator)
    .messages({
      'string.base': 'Chave CTE deve ser uma string',
      'any.invalid': 'Chave CTE deve ter 44 d√≠gitos'
    }),

  cod_rep: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'C√≥digo do representante √© obrigat√≥rio',
      'number.base': 'C√≥digo do representante deve ser um n√∫mero',
      'number.integer': 'C√≥digo do representante deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo do representante deve ser um n√∫mero positivo'
    }),

  nome_rep: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Nome do representante √© obrigat√≥rio',
      'string.min': 'Nome do representante deve ter pelo menos 2 caracteres',
      'string.max': 'Nome do representante deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Nome do representante n√£o pode estar vazio'
    }),

  contato_rep: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Contato do representante deve ter no m√°ximo 255 caracteres'
    }),

  emi_nf: Joi.date()
    .required()
    .max('now')
    .messages({
      'any.required': 'Data de emiss√£o √© obrigat√≥ria',
      'date.base': 'Data de emiss√£o deve ser uma data v√°lida',
      'date.max': 'Data de emiss√£o n√£o pode ser futura'
    }),

  ser_ctrc: Joi.string()
    .allow(null, '')
    .max(10)
    .trim()
    .messages({
      'string.max': 'S√©rie CTRC deve ter no m√°ximo 10 caracteres'
    }),

  nro_ctrc: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'N√∫mero CTRC deve ser um n√∫mero',
      'number.integer': 'N√∫mero CTRC deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero CTRC deve ser um n√∫mero positivo'
    }),

  peso_calculo: Joi.number()
    .positive()
    .precision(2)
    .required()
    .messages({
      'any.required': 'Peso de c√°lculo √© obrigat√≥rio',
      'number.base': 'Peso de c√°lculo deve ser um n√∫mero',
      'number.positive': 'Peso de c√°lculo deve ser positivo'
    }),

  peso_real: Joi.number()
    .positive()
    .precision(2)
    .allow(null)
    .messages({
      'number.base': 'Peso real deve ser um n√∫mero',
      'number.positive': 'Peso real deve ser positivo'
    }),

  peso_liquido: Joi.number()
    .positive()
    .precision(2)
    .allow(null)
    .messages({
      'number.base': 'Peso l√≠quido deve ser um n√∫mero',
      'number.positive': 'Peso l√≠quido deve ser positivo'
    }),

  ordem: Joi.number()
    .integer()
    .min(0)
    .default(0)
    .messages({
      'number.base': 'Ordem deve ser um n√∫mero',
      'number.integer': 'Ordem deve ser um n√∫mero inteiro',
      'number.min': 'Ordem deve ser maior ou igual a 0'
    }),

  observacoes: Joi.string()
    .allow(null, '')
    .max(1000)
    .trim()
    .messages({
      'string.max': 'Observa√ß√µes devem ter no m√°ximo 1000 caracteres'
    }),

  previsao_entrega: Joi.date()
    .allow(null)
    .messages({
      'date.base': 'Previs√£o de entrega deve ser uma data v√°lida'
    }),

  chave_nf: Joi.string()
    .allow(null, '')
    .custom(chaveValidator)
    .messages({
      'string.base': 'Chave NF deve ser uma string',
      'any.invalid': 'Chave NF deve ter 44 d√≠gitos'
    }),

  ser: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'S√©rie deve ser um n√∫mero',
      'number.integer': 'S√©rie deve ser um n√∫mero inteiro',
      'number.positive': 'S√©rie deve ser um n√∫mero positivo'
    }),

  nro: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'N√∫mero deve ser um n√∫mero',
      'number.integer': 'N√∫mero deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero deve ser um n√∫mero positivo'
    }),

  nro_pedido: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'N√∫mero do pedido deve ser um n√∫mero',
      'number.integer': 'N√∫mero do pedido deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero do pedido deve ser um n√∫mero positivo'
    }),

  qtd_volumes: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'Quantidade de volumes deve ser um n√∫mero',
      'number.integer': 'Quantidade de volumes deve ser um n√∫mero inteiro',
      'number.positive': 'Quantidade de volumes deve ser positiva'
    }),

  mensagem: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Mensagem deve ter no m√°ximo 255 caracteres'
    }),

  valor: Joi.number()
    .positive()
    .precision(2)
    .allow(null)
    .messages({
      'number.base': 'Valor deve ser um n√∫mero',
      'number.positive': 'Valor deve ser positivo'
    }),

  valor_frete: Joi.number()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'Valor do frete deve ser um n√∫mero',
      'number.positive': 'Valor do frete deve ser positivo'
    }),

  metro_cubico: Joi.number()
    .positive()
    .precision(2)
    .allow(null)
    .messages({
      'number.base': 'Metro c√∫bico deve ser um n√∫mero',
      'number.positive': 'Metro c√∫bico deve ser positivo'
    }),

  status_nf: Joi.string()
    .valid(...Object.values(NOTA_FISCAL_STATUS))
    .default(NOTA_FISCAL_STATUS.PENDENTE)
    .messages({
      'any.only': `Status deve ser um dos valores: ${Object.values(NOTA_FISCAL_STATUS).join(', ')}`
    }),

  nf_retida: Joi.boolean()
    .default(false)
    .messages({
      'boolean.base': 'NF retida deve ser verdadeiro ou falso'
    }),

  roteirizada: Joi.boolean()
    .default(false)
    .messages({
      'boolean.base': 'Roteirizada deve ser verdadeiro ou falso'
    })
});

// Schema para atualiza√ß√£o de nota fiscal
const updateNotaFiscal = Joi.object({
  cliente_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Cliente deve ser um n√∫mero',
      'number.integer': 'Cliente deve ser um n√∫mero inteiro',
      'number.positive': 'Cliente deve ser um n√∫mero positivo'
    }),

  embarcador_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Embarcador deve ser um n√∫mero',
      'number.integer': 'Embarcador deve ser um n√∫mero inteiro',
      'number.positive': 'Embarcador deve ser um n√∫mero positivo'
    }),

  transportadora_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Transportadora deve ser um n√∫mero',
      'number.integer': 'Transportadora deve ser um n√∫mero inteiro',
      'number.positive': 'Transportadora deve ser um n√∫mero positivo'
    }),

  endereco_entrega_id: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'Endere√ßo de entrega deve ser um n√∫mero',
      'number.integer': 'Endere√ßo de entrega deve ser um n√∫mero inteiro',
      'number.positive': 'Endere√ßo de entrega deve ser um n√∫mero positivo'
    }),

  cod_rep: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'C√≥digo do representante deve ser um n√∫mero',
      'number.integer': 'C√≥digo do representante deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo do representante deve ser um n√∫mero positivo'
    }),

  nome_rep: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Nome do representante deve ter pelo menos 2 caracteres',
      'string.max': 'Nome do representante deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Nome do representante n√£o pode estar vazio'
    }),

  contato_rep: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Contato do representante deve ter no m√°ximo 255 caracteres'
    }),

  peso_calculo: Joi.number()
    .positive()
    .precision(2)
    .messages({
      'number.base': 'Peso de c√°lculo deve ser um n√∫mero',
      'number.positive': 'Peso de c√°lculo deve ser positivo'
    }),

  peso_real: Joi.number()
    .positive()
    .precision(2)
    .allow(null)
    .messages({
      'number.base': 'Peso real deve ser um n√∫mero',
      'number.positive': 'Peso real deve ser positivo'
    }),

  peso_liquido: Joi.number()
    .positive()
    .precision(2)
    .allow(null)
    .messages({
      'number.base': 'Peso l√≠quido deve ser um n√∫mero',
      'number.positive': 'Peso l√≠quido deve ser positivo'
    }),

  qtd_volumes: Joi.number()
    .integer()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'Quantidade de volumes deve ser um n√∫mero',
      'number.integer': 'Quantidade de volumes deve ser um n√∫mero inteiro',
      'number.positive': 'Quantidade de volumes deve ser positiva'
    }),

  valor: Joi.number()
    .positive()
    .precision(2)
    .allow(null)
    .messages({
      'number.base': 'Valor deve ser um n√∫mero',
      'number.positive': 'Valor deve ser positivo'
    }),

  valor_frete: Joi.number()
    .positive()
    .allow(null)
    .messages({
      'number.base': 'Valor do frete deve ser um n√∫mero',
      'number.positive': 'Valor do frete deve ser positivo'
    }),

  metro_cubico: Joi.number()
    .positive()
    .precision(2)
    .allow(null)
    .messages({
      'number.base': 'Metro c√∫bico deve ser um n√∫mero',
      'number.positive': 'Metro c√∫bico deve ser positivo'
    }),

  previsao_entrega: Joi.date()
    .allow(null)
    .messages({
      'date.base': 'Previs√£o de entrega deve ser uma data v√°lida'
    }),

  observacoes: Joi.string()
    .allow(null, '')
    .max(1000)
    .trim()
    .messages({
      'string.max': 'Observa√ß√µes devem ter no m√°ximo 1000 caracteres'
    }),

  status_nf: Joi.string()
    .valid(...Object.values(NOTA_FISCAL_STATUS))
    .messages({
      'any.only': `Status deve ser um dos valores: ${Object.values(NOTA_FISCAL_STATUS).join(', ')}`
    }),

  nf_retida: Joi.boolean()
    .messages({
      'boolean.base': 'NF retida deve ser verdadeiro ou falso'
    }),

  roteirizada: Joi.boolean()
    .messages({
      'boolean.base': 'Roteirizada deve ser verdadeiro ou falso'
    })
}).min(1); // Pelo menos um campo deve ser fornecido

// Schema para listagem com filtros
const listNotasFiscais = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser maior que 0'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(20)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 100'
    }),

  orderBy: Joi.string()
    .valid(
      'id', 'nro', 'emi_nf', 'previsao_entrega', 'valor', 
      'peso_calculo', 'created_at', 'updated_at'
    )
    .default('created_at')
    .messages({
      'any.only': 'Campo de ordena√ß√£o inv√°lido'
    }),

  orderDirection: Joi.string()
    .valid('ASC', 'DESC', 'asc', 'desc')
    .default('DESC')
    .messages({
      'any.only': 'Dire√ß√£o de ordena√ß√£o deve ser ASC ou DESC'
    }),

  chave_nf: Joi.string()
    .custom(chaveValidator)
    .messages({
      'any.invalid': 'Chave NF deve ter 44 d√≠gitos'
    }),

  nro: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'N√∫mero deve ser um n√∫mero',
      'number.integer': 'N√∫mero deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero deve ser um n√∫mero positivo'
    }),

  cliente_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Cliente deve ser um n√∫mero',
      'number.integer': 'Cliente deve ser um n√∫mero inteiro',
      'number.positive': 'Cliente deve ser um n√∫mero positivo'
    }),

  embarcador_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Embarcador deve ser um n√∫mero',
      'number.integer': 'Embarcador deve ser um n√∫mero inteiro',
      'number.positive': 'Embarcador deve ser um n√∫mero positivo'
    }),

  transportadora_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Transportadora deve ser um n√∫mero',
      'number.integer': 'Transportadora deve ser um n√∫mero inteiro',
      'number.positive': 'Transportadora deve ser um n√∫mero positivo'
    }),

  romaneio_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Romaneio deve ser um n√∫mero',
      'number.integer': 'Romaneio deve ser um n√∫mero inteiro',
      'number.positive': 'Romaneio deve ser um n√∫mero positivo'
    }),

  status_nf: Joi.string()
    .valid(...Object.values(NOTA_FISCAL_STATUS))
    .messages({
      'any.only': `Status deve ser um dos valores: ${Object.values(NOTA_FISCAL_STATUS).join(', ')}`
    }),

  finalizada: Joi.string()
    .valid('true', 'false')
    .messages({
      'any.only': 'Finalizada deve ser true ou false'
    }),

  data_inicio: Joi.date()
    .messages({
      'date.base': 'Data de in√≠cio deve ser uma data v√°lida'
    }),

  data_fim: Joi.date()
    .min(Joi.ref('data_inicio'))
    .messages({
      'date.base': 'Data de fim deve ser uma data v√°lida',
      'date.min': 'Data de fim deve ser maior ou igual √† data de in√≠cio'
    }),

  cidade: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Cidade deve ter pelo menos 2 caracteres',
      'string.max': 'Cidade deve ter no m√°ximo 255 caracteres'
    }),

  uf: Joi.string()
    .length(2)
    .uppercase()
    .messages({
      'string.length': 'UF deve ter 2 caracteres',
      'string.base': 'UF deve ser uma string'
    })
});

// Schema para atualizar status
const updateStatusSchema = Joi.object({
  status: Joi.string()
    .valid(...Object.values(NOTA_FISCAL_STATUS))
    .required()
    .messages({
      'any.required': 'Status √© obrigat√≥rio',
      'any.only': `Status deve ser um dos valores: ${Object.values(NOTA_FISCAL_STATUS).join(', ')}`
    }),

  observacoes: Joi.string()
    .allow(null, '')
    .max(1000)
    .trim()
    .messages({
      'string.max': 'Observa√ß√µes devem ter no m√°ximo 1000 caracteres'
    })
});

// Schema para finalizar nota fiscal
const finalizarSchema = Joi.object({
  data_entrega: Joi.date()
    .required()
    .custom(dateNotFutureValidator)
    .messages({
      'any.required': 'Data de entrega √© obrigat√≥ria',
      'date.base': 'Data de entrega deve ser uma data v√°lida',
      'date.max': 'Data de entrega n√£o pode ser futura'
    }),

  hora_entrega: Joi.string()
    .pattern(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/)
    .allow(null, '')
    .messages({
      'string.pattern.base': 'Hora de entrega deve estar no formato HH:mm:ss'
    }),

  observacoes: Joi.string()
    .allow(null, '')
    .max(1000)
    .trim()
    .messages({
      'string.max': 'Observa√ß√µes devem ter no m√°ximo 1000 caracteres'
    })
});

// Schema para associa√ß√£o com romaneio
const romaneioAssociationSchema = Joi.object({
  notaIds: Joi.array()
    .items(
      Joi.number()
        .integer()
        .positive()
        .messages({
          'number.base': 'ID da nota deve ser um n√∫mero',
          'number.integer': 'ID da nota deve ser um n√∫mero inteiro',
          'number.positive': 'ID da nota deve ser um n√∫mero positivo'
        })
    )
    .min(1)
    .required()
    .messages({
      'any.required': 'Lista de IDs das notas √© obrigat√≥ria',
      'array.base': 'Lista de IDs deve ser um array',
      'array.min': 'Pelo menos uma nota deve ser informada'
    })
});

// Schema para par√¢metros de rota
const notaFiscalParams = Joi.object({
  id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'ID √© obrigat√≥rio',
      'number.base': 'ID deve ser um n√∫mero',
      'number.integer': 'ID deve ser um n√∫mero inteiro',
      'number.positive': 'ID deve ser um n√∫mero positivo'
    })
});

// Schema para chaves (NF e CTE)
const chaveParams = Joi.object({
  chave: Joi.string()
    .required()
    .custom(chaveValidator)
    .messages({
      'any.required': 'Chave √© obrigat√≥ria',
      'any.invalid': 'Chave deve ter 44 d√≠gitos'
    })
});

// Schema para n√∫mero e s√©rie
const numeroSerieParams = Joi.object({
  numero: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'N√∫mero √© obrigat√≥rio',
      'number.base': 'N√∫mero deve ser um n√∫mero',
      'number.integer': 'N√∫mero deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero deve ser um n√∫mero positivo'
    }),

  serie: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'S√©rie √© obrigat√≥ria',
      'number.base': 'S√©rie deve ser um n√∫mero',
      'number.integer': 'S√©rie deve ser um n√∫mero inteiro',
      'number.positive': 'S√©rie deve ser um n√∫mero positivo'
    })
});

// Schema para estat√≠sticas por per√≠odo
const statsByPeriodQuery = Joi.object({
  data_inicio: Joi.date()
    .required()
    .messages({
      'any.required': 'Data de in√≠cio √© obrigat√≥ria',
      'date.base': 'Data de in√≠cio deve ser uma data v√°lida'
    }),

  data_fim: Joi.date()
    .required()
    .min(Joi.ref('data_inicio'))
    .messages({
      'any.required': 'Data de fim √© obrigat√≥ria',
      'date.base': 'Data de fim deve ser uma data v√°lida',
      'date.min': 'Data de fim deve ser maior ou igual √† data de in√≠cio'
    })
});

module.exports = {
  createNotaFiscal,
  updateNotaFiscal,
  listNotasFiscais,
  updateStatusSchema,
  finalizarSchema,
  romaneioAssociationSchema, // ‚Üê CERTIFIQUE-SE DE QUE EST√Å AQUI
  notaFiscalParams,
  chaveParams,
  numeroSerieParams,
  statsByPeriodQuery
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\ocorrencias.validation.js
================================================================================

// validations/ocorrencias.validation.js
const Joi = require('joi');

// Tipos v√°lidos
const TIPOS_VALIDOS = ['entrega', 'coleta', 'ocorrencia', 'status', 'informativo'];
const PROCESSOS_VALIDOS = ['transporte', 'entrega', 'coleta', 'finalizacao', 'cancelamento', 'informativo'];

// Schema para cria√ß√£o
const createOcorrencia = Joi.object({
  codigo: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'C√≥digo √© obrigat√≥rio',
      'number.base': 'C√≥digo deve ser um n√∫mero',
      'number.integer': 'C√≥digo deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo deve ser positivo'
    }),

  descricao: Joi.string()
    .required()
    .min(5)
    .max(1000)
    .trim()
    .messages({
      'any.required': 'Descri√ß√£o √© obrigat√≥ria',
      'string.min': 'Descri√ß√£o deve ter pelo menos 5 caracteres',
      'string.max': 'Descri√ß√£o deve ter no m√°ximo 1000 caracteres',
      'string.empty': 'Descri√ß√£o n√£o pode estar vazia'
    }),

  tipo: Joi.string()
    .required()
    .valid(...TIPOS_VALIDOS)
    .messages({
      'any.required': 'Tipo √© obrigat√≥rio',
      'any.only': `Tipo deve ser um dos: ${TIPOS_VALIDOS.join(', ')}`
    }),

  processo: Joi.string()
    .required()
    .valid(...PROCESSOS_VALIDOS)
    .messages({
      'any.required': 'Processo √© obrigat√≥rio',
      'any.only': `Processo deve ser um dos: ${PROCESSOS_VALIDOS.join(', ')}`
    }),

  finalizadora: Joi.boolean()
    .default(false)
    .messages({
      'boolean.base': 'Finalizadora deve ser verdadeiro ou falso'
    }),

  api: Joi.boolean()
    .default(true)
    .messages({
      'boolean.base': 'API deve ser verdadeiro ou falso'
    })
});

// Schema para atualiza√ß√£o
const updateOcorrencia = Joi.object({
  codigo: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'C√≥digo deve ser um n√∫mero',
      'number.integer': 'C√≥digo deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo deve ser positivo'
    }),

  descricao: Joi.string()
    .min(5)
    .max(1000)
    .trim()
    .messages({
      'string.min': 'Descri√ß√£o deve ter pelo menos 5 caracteres',
      'string.max': 'Descri√ß√£o deve ter no m√°ximo 1000 caracteres'
    }),

  tipo: Joi.string()
    .valid(...TIPOS_VALIDOS)
    .messages({
      'any.only': `Tipo deve ser um dos: ${TIPOS_VALIDOS.join(', ')}`
    }),

  processo: Joi.string()
    .valid(...PROCESSOS_VALIDOS)
    .messages({
      'any.only': `Processo deve ser um dos: ${PROCESSOS_VALIDOS.join(', ')}`
    }),

  finalizadora: Joi.boolean()
    .messages({
      'boolean.base': 'Finalizadora deve ser verdadeiro ou falso'
    }),

  api: Joi.boolean()
    .messages({
      'boolean.base': 'API deve ser verdadeiro ou falso'
    })
});

// Schema para listagem (query parameters)
const listOcorrencias = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser maior que zero'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(20)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que zero',
      'number.max': 'Limite deve ser no m√°ximo 100'
    }),

  orderBy: Joi.string()
    .valid('id', 'codigo', 'descricao', 'tipo', 'processo', 'created_at')
    .default('id')
    .messages({
      'any.only': 'OrderBy deve ser: id, codigo, descricao, tipo, processo ou created_at'
    }),

  orderDirection: Joi.string()
    .valid('ASC', 'DESC', 'asc', 'desc')
    .default('DESC')
    .messages({
      'any.only': 'OrderDirection deve ser ASC ou DESC'
    }),

  tipo: Joi.string()
    .valid(...TIPOS_VALIDOS)
    .messages({
      'any.only': `Tipo deve ser um dos: ${TIPOS_VALIDOS.join(', ')}`
    }),

  processo: Joi.string()
    .valid(...PROCESSOS_VALIDOS)
    .messages({
      'any.only': `Processo deve ser um dos: ${PROCESSOS_VALIDOS.join(', ')}`
    }),

  finalizadora: Joi.string()
    .valid('true', 'false')
    .messages({
      'any.only': 'Finalizadora deve ser true ou false'
    }),

  api: Joi.string()
    .valid('true', 'false')
    .messages({
      'any.only': 'API deve ser true ou false'
    })
});

// Schema para par√¢metros de rota
const ocorrenciaParams = Joi.object({
  id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'ID √© obrigat√≥rio',
      'number.base': 'ID deve ser um n√∫mero',
      'number.integer': 'ID deve ser um n√∫mero inteiro',
      'number.positive': 'ID deve ser um n√∫mero positivo'
    })
});

const codigoParams = Joi.object({
  codigo: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'C√≥digo √© obrigat√≥rio',
      'number.base': 'C√≥digo deve ser um n√∫mero',
      'number.integer': 'C√≥digo deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo deve ser um n√∫mero positivo'
    })
});

const tipoParams = Joi.object({
  tipo: Joi.string()
    .valid(...TIPOS_VALIDOS)
    .required()
    .messages({
      'any.required': 'Tipo √© obrigat√≥rio',
      'any.only': `Tipo deve ser um dos: ${TIPOS_VALIDOS.join(', ')}`
    })
});

const processoParams = Joi.object({
  processo: Joi.string()
    .valid(...PROCESSOS_VALIDOS)
    .required()
    .messages({
      'any.required': 'Processo √© obrigat√≥rio',
      'any.only': `Processo deve ser um dos: ${PROCESSOS_VALIDOS.join(', ')}`
    })
});

module.exports = {
  createOcorrencia,
  updateOcorrencia,
  listOcorrencias,
  ocorrenciaParams,
  codigoParams,
  tipoParams,
  processoParams
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\romaneios.validation.js
================================================================================

const Joi = require('joi');

// Schema para cria√ß√£o de romaneio
const createRomaneioSchema = Joi.object({
  numero: Joi.number()
    .integer()
    .positive()
    .max(999999999)
    .messages({
      'number.base': 'N√∫mero deve ser um valor num√©rico',
      'number.integer': 'N√∫mero deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero deve ser positivo',
      'number.max': 'N√∫mero deve ter no m√°ximo 9 d√≠gitos'
    }),

  unidade: Joi.string()
    .trim()
    .max(255)
    .messages({
      'string.base': 'Unidade deve ser um texto',
      'string.max': 'Unidade deve ter no m√°ximo 255 caracteres'
    }),

  placa_cavalo: Joi.string()
    .trim()
    .required()
    .pattern(/^[A-Z]{3}[0-9][A-Z0-9][0-9]{2}$|^[A-Z]{3}[0-9]{4}$/)
    .messages({
      'string.base': 'Placa do cavalo deve ser um texto',
      'string.empty': 'Placa do cavalo √© obrigat√≥ria',
      'any.required': 'Placa do cavalo √© obrigat√≥ria',
      'string.pattern.base': 'Formato de placa inv√°lido (ex: ABC1234 ou ABC1D23)'
    }),

  placa_carreta: Joi.string()
    .trim()
    .pattern(/^[A-Z]{3}[0-9][A-Z0-9][0-9]{2}$|^[A-Z]{3}[0-9]{4}$/)
    .allow('')
    .messages({
      'string.base': 'Placa da carreta deve ser um texto',
      'string.pattern.base': 'Formato de placa inv√°lido (ex: ABC1234 ou ABC1D23)'
    }),

  emissao: Joi.date()
    .required()
    .messages({
      'date.base': 'Data de emiss√£o deve ser uma data v√°lida',
      'any.required': 'Data de emiss√£o √© obrigat√≥ria'
    }),

  motorista_id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'number.base': 'ID do motorista deve ser um n√∫mero',
      'number.integer': 'ID do motorista deve ser um n√∫mero inteiro',
      'number.positive': 'ID do motorista deve ser positivo',
      'any.required': 'ID do motorista √© obrigat√≥rio'
    }),

  capacidade_veiculo: Joi.number()
    .positive()
    .precision(2)
    .messages({
      'number.base': 'Capacidade do ve√≠culo deve ser um n√∫mero',
      'number.positive': 'Capacidade do ve√≠culo deve ser positiva'
    }),

  roteirizacao: Joi.string()
    .valid('manual', 'automatica', 'otimizada')
    .default('manual')
    .messages({
      'string.base': 'Roteiriza√ß√£o deve ser um texto',
      'any.only': 'Roteiriza√ß√£o deve ser: manual, automatica ou otimizada'
    }),

  roteirizacao_id: Joi.string()
    .trim()
    .max(255)
    .messages({
      'string.base': 'ID da roteiriza√ß√£o deve ser um texto',
      'string.max': 'ID da roteiriza√ß√£o deve ter no m√°ximo 255 caracteres'
    }),

  rotas: Joi.object()
    .messages({
      'object.base': 'Rotas deve ser um objeto JSON v√°lido'
    }),

  markers: Joi.object()
    .messages({
      'object.base': 'Markers deve ser um objeto JSON v√°lido'
    }),

  maplink_info: Joi.object()
    .messages({
      'object.base': 'Informa√ß√µes do Maplink deve ser um objeto JSON v√°lido'
    }),

  peso: Joi.number()
    .positive()
    .precision(2)
    .messages({
      'number.base': 'Peso deve ser um n√∫mero',
      'number.positive': 'Peso deve ser positivo'
    }),

  cubagem: Joi.number()
    .positive()
    .precision(2)
    .messages({
      'number.base': 'Cubagem deve ser um n√∫mero',
      'number.positive': 'Cubagem deve ser positiva'
    }),

  doca: Joi.string()
    .trim()
    .max(255)
    .messages({
      'string.base': 'Doca deve ser um texto',
      'string.max': 'Doca deve ter no m√°ximo 255 caracteres'
    }),

  roteirizar: Joi.boolean()
    .default(false)
    .messages({
      'boolean.base': 'Roteirizar deve ser verdadeiro ou falso'
    })
});

// Schema para atualiza√ß√£o de romaneio
const updateRomaneioSchema = Joi.object({
  numero: Joi.number()
    .integer()
    .positive()
    .max(999999999)
    .messages({
      'number.base': 'N√∫mero deve ser um valor num√©rico',
      'number.integer': 'N√∫mero deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero deve ser positivo',
      'number.max': 'N√∫mero deve ter no m√°ximo 9 d√≠gitos'
    }),

  unidade: Joi.string()
    .trim()
    .max(255)
    .messages({
      'string.base': 'Unidade deve ser um texto',
      'string.max': 'Unidade deve ter no m√°ximo 255 caracteres'
    }),

  placa_cavalo: Joi.string()
    .trim()
    .pattern(/^[A-Z]{3}[0-9][A-Z0-9][0-9]{2}$|^[A-Z]{3}[0-9]{4}$/)
    .messages({
      'string.base': 'Placa do cavalo deve ser um texto',
      'string.pattern.base': 'Formato de placa inv√°lido (ex: ABC1234 ou ABC1D23)'
    }),

  placa_carreta: Joi.string()
    .trim()
    .pattern(/^[A-Z]{3}[0-9][A-Z0-9][0-9]{2}$|^[A-Z]{3}[0-9]{4}$/)
    .allow('')
    .messages({
      'string.base': 'Placa da carreta deve ser um texto',
      'string.pattern.base': 'Formato de placa inv√°lido (ex: ABC1234 ou ABC1D23)'
    }),

  emissao: Joi.date()
    .messages({
      'date.base': 'Data de emiss√£o deve ser uma data v√°lida'
    }),

  motorista_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'ID do motorista deve ser um n√∫mero',
      'number.integer': 'ID do motorista deve ser um n√∫mero inteiro',
      'number.positive': 'ID do motorista deve ser positivo'
    }),

  capacidade_veiculo: Joi.number()
    .positive()
    .precision(2)
    .messages({
      'number.base': 'Capacidade do ve√≠culo deve ser um n√∫mero',
      'number.positive': 'Capacidade do ve√≠culo deve ser positiva'
    }),

  roteirizacao: Joi.string()
    .valid('manual', 'automatica', 'otimizada')
    .messages({
      'string.base': 'Roteiriza√ß√£o deve ser um texto',
      'any.only': 'Roteiriza√ß√£o deve ser: manual, automatica ou otimizada'
    }),

  roteirizacao_id: Joi.string()
    .trim()
    .max(255)
    .messages({
      'string.base': 'ID da roteiriza√ß√£o deve ser um texto',
      'string.max': 'ID da roteiriza√ß√£o deve ter no m√°ximo 255 caracteres'
    }),

  rotas: Joi.object()
    .messages({
      'object.base': 'Rotas deve ser um objeto JSON v√°lido'
    }),

  markers: Joi.object()
    .messages({
      'object.base': 'Markers deve ser um objeto JSON v√°lido'
    }),

  maplink_info: Joi.object()
    .messages({
      'object.base': 'Informa√ß√µes do Maplink deve ser um objeto JSON v√°lido'
    }),

  peso: Joi.number()
    .positive()
    .precision(2)
    .messages({
      'number.base': 'Peso deve ser um n√∫mero',
      'number.positive': 'Peso deve ser positivo'
    }),

  cubagem: Joi.number()
    .positive()
    .precision(2)
    .messages({
      'number.base': 'Cubagem deve ser um n√∫mero',
      'number.positive': 'Cubagem deve ser positiva'
    }),

  doca: Joi.string()
    .trim()
    .max(255)
    .messages({
      'string.base': 'Doca deve ser um texto',
      'string.max': 'Doca deve ter no m√°ximo 255 caracteres'
    }),

  roteirizar: Joi.boolean()
    .messages({
      'boolean.base': 'Roteirizar deve ser verdadeiro ou falso'
    })
}).min(1).messages({
  'object.min': 'Pelo menos um campo deve ser fornecido para atualiza√ß√£o'
});

// Schema para atualiza√ß√£o de rotas
const updateRotasSchema = Joi.object({
  rotas: Joi.object()
    .messages({
      'object.base': 'Rotas deve ser um objeto JSON v√°lido'
    }),

  markers: Joi.object()
    .messages({
      'object.base': 'Markers deve ser um objeto JSON v√°lido'
    }),

  maplink_info: Joi.object()
    .messages({
      'object.base': 'Informa√ß√µes do Maplink deve ser um objeto JSON v√°lido'
    })
}).min(1).messages({
  'object.min': 'Pelo menos um campo deve ser fornecido'
});

// Schema para query parameters
const queryRomaneiosSchema = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser maior que 0'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(20)
    .messages({
      'number.base': 'Limit deve ser um n√∫mero',
      'number.integer': 'Limit deve ser um n√∫mero inteiro',
      'number.min': 'Limit deve ser maior que 0',
      'number.max': 'Limit deve ser no m√°ximo 100'
    }),

  orderBy: Joi.string()
    .valid('id', 'numero', 'emissao', 'created_at', 'updated_at')
    .default('created_at')
    .messages({
      'string.base': 'OrderBy deve ser um texto',
      'any.only': 'OrderBy deve ser: id, numero, emissao, created_at ou updated_at'
    }),

  orderDirection: Joi.string()
    .valid('asc', 'desc')
    .default('desc')
    .messages({
      'string.base': 'OrderDirection deve ser um texto',
      'any.only': 'OrderDirection deve ser: asc ou desc'
    }),

  numero: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'N√∫mero deve ser um valor num√©rico',
      'number.integer': 'N√∫mero deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero deve ser positivo'
    }),

  motorista_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'ID do motorista deve ser um n√∫mero',
      'number.integer': 'ID do motorista deve ser um n√∫mero inteiro',
      'number.positive': 'ID do motorista deve ser positivo'
    }),

  placa_cavalo: Joi.string()
    .trim()
    .messages({
      'string.base': 'Placa do cavalo deve ser um texto'
    }),

  roteirizacao: Joi.string()
    .valid('manual', 'automatica', 'otimizada')
    .messages({
      'string.base': 'Roteiriza√ß√£o deve ser um texto',
      'any.only': 'Roteiriza√ß√£o deve ser: manual, automatica ou otimizada'
    }),

  roteirizar: Joi.boolean()
    .messages({
      'boolean.base': 'Roteirizar deve ser verdadeiro ou falso'
    }),

  unidade: Joi.string()
    .trim()
    .messages({
      'string.base': 'Unidade deve ser um texto'
    }),

  doca: Joi.string()
    .trim()
    .messages({
      'string.base': 'Doca deve ser um texto'
    }),

  data_inicio: Joi.date()
    .messages({
      'date.base': 'Data in√≠cio deve ser uma data v√°lida'
    }),

  data_fim: Joi.date()
    .messages({
      'date.base': 'Data fim deve ser uma data v√°lida'
    })
});

// Schema para par√¢metros de rota
const paramsRomaneioSchema = Joi.object({
  id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'number.base': 'ID deve ser um n√∫mero',
      'number.integer': 'ID deve ser um n√∫mero inteiro',
      'number.positive': 'ID deve ser positivo',
      'any.required': 'ID √© obrigat√≥rio'
    })
});

const numeroParamSchema = Joi.object({
  numero: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'number.base': 'N√∫mero deve ser um valor num√©rico',
      'number.integer': 'N√∫mero deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero deve ser positivo',
      'any.required': 'N√∫mero √© obrigat√≥rio'
    })
});

const placaParamSchema = Joi.object({
  placa: Joi.string()
    .trim()
    .required()
    .messages({
      'string.base': 'Placa deve ser um texto',
      'string.empty': 'Placa √© obrigat√≥ria',
      'any.required': 'Placa √© obrigat√≥ria'
    })
});

const motoristaParamSchema = Joi.object({
  motorista_id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'number.base': 'ID do motorista deve ser um n√∫mero',
      'number.integer': 'ID do motorista deve ser um n√∫mero inteiro',
      'number.positive': 'ID do motorista deve ser positivo',
      'any.required': 'ID do motorista √© obrigat√≥rio'
    })
});

const roteirizacaoParamSchema = Joi.object({
  status: Joi.string()
    .valid('manual', 'automatica', 'otimizada')
    .required()
    .messages({
      'string.base': 'Status deve ser um texto',
      'any.only': 'Status deve ser: manual, automatica ou otimizada',
      'any.required': 'Status √© obrigat√≥rio'
    })
});

module.exports = {
  createRomaneioSchema,
  updateRomaneioSchema,
  updateRotasSchema,
  queryRomaneiosSchema,
  paramsRomaneioSchema,
  numeroParamSchema,
  placaParamSchema,
  motoristaParamSchema,
  roteirizacaoParamSchema
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\transportadora-codigo-ocorrencia.validation.js
================================================================================

// validations/transportadora-codigo-ocorrencia.validation.js
const Joi = require('joi');

// Schema para cria√ß√£o de v√≠nculo
const createVinculo = Joi.object({
  transportadora_id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'Transportadora √© obrigat√≥ria',
      'number.base': 'Transportadora deve ser um n√∫mero',
      'number.integer': 'Transportadora deve ser um n√∫mero inteiro',
      'number.positive': 'Transportadora deve ser um n√∫mero positivo'
    }),

  codigo_ocorrencia_codigo: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'C√≥digo de ocorr√™ncia √© obrigat√≥rio',
      'number.base': 'C√≥digo de ocorr√™ncia deve ser um n√∫mero',
      'number.integer': 'C√≥digo de ocorr√™ncia deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo de ocorr√™ncia deve ser um n√∫mero positivo'
    }),

  codigo: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'C√≥digo √© obrigat√≥rio',
      'number.base': 'C√≥digo deve ser um n√∫mero',
      'number.integer': 'C√≥digo deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo deve ser um n√∫mero positivo'
    }),

  descricao: Joi.string()
    .allow(null, '')
    .max(1000)
    .trim()
    .messages({
      'string.max': 'Descri√ß√£o deve ter no m√°ximo 1000 caracteres'
    })
});

// Schema para cria√ß√£o m√∫ltipla
const createMultipleVinculos = Joi.object({
  vinculos: Joi.array()
    .items(createVinculo)
    .min(1)
    .required()
    .messages({
      'any.required': 'Lista de v√≠nculos √© obrigat√≥ria',
      'array.base': 'V√≠nculos deve ser um array',
      'array.min': 'Pelo menos um v√≠nculo deve ser informado'
    })
});

// Schema para listagem
const listVinculos = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser maior que 0'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(20)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 100'
    }),

  transportadora_id: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'Transportadora deve ser um n√∫mero',
      'number.integer': 'Transportadora deve ser um n√∫mero inteiro',
      'number.positive': 'Transportadora deve ser um n√∫mero positivo'
    }),

  codigo_ocorrencia_codigo: Joi.number()
    .integer()
    .positive()
    .messages({
      'number.base': 'C√≥digo de ocorr√™ncia deve ser um n√∫mero',
      'number.integer': 'C√≥digo de ocorr√™ncia deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo de ocorr√™ncia deve ser um n√∫mero positivo'
    })
});

// Schema para par√¢metros de rota
const vinculoParams = Joi.object({
  id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'ID √© obrigat√≥rio',
      'number.base': 'ID deve ser um n√∫mero',
      'number.integer': 'ID deve ser um n√∫mero inteiro',
      'number.positive': 'ID deve ser um n√∫mero positivo'
    })
});

const transportadoraParams = Joi.object({
  transportadoraId: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'ID da transportadora √© obrigat√≥rio',
      'number.base': 'Transportadora deve ser um n√∫mero',
      'number.integer': 'Transportadora deve ser um n√∫mero inteiro',
      'number.positive': 'Transportadora deve ser um n√∫mero positivo'
    })
});

const codigoOcorrenciaParams = Joi.object({
  codigoOcorrencia: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'C√≥digo de ocorr√™ncia √© obrigat√≥rio',
      'number.base': 'C√≥digo de ocorr√™ncia deve ser um n√∫mero',
      'number.integer': 'C√≥digo de ocorr√™ncia deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo de ocorr√™ncia deve ser um n√∫mero positivo'
    })
});

module.exports = {
  createVinculo,
  createMultipleVinculos,
  listVinculos,
  vinculoParams,
  transportadoraParams,
  codigoOcorrenciaParams
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\transportadoras.validation.js
================================================================================

// backend/src/validations/transportadoras.validation.js
const Joi = require('joi');
const { validateCNPJ, validateUF } = require('../utils/validators');

// Validador personalizado para CNPJ
const cnpjValidator = (value, helpers) => {
  if (!validateCNPJ(value)) {
    return helpers.error('any.invalid');
  }
  return value.replace(/\D/g, ''); // Retorna apenas n√∫meros
};

// Validador personalizado para UF
const ufValidator = (value, helpers) => {
  if (!validateUF(value)) {
    return helpers.error('any.invalid');
  }
  return value.toUpperCase();
};

// Schema para cria√ß√£o de transportadora
const createTransportadora = Joi.object({
  cnpj: Joi.string()
    .required()
    .custom(cnpjValidator)
    .messages({
      'any.required': 'CNPJ √© obrigat√≥rio',
      'any.invalid': 'CNPJ inv√°lido',
      'string.base': 'CNPJ deve ser uma string'
    }),

  nome: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Nome √© obrigat√≥rio',
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Nome n√£o pode estar vazio'
    }),

  endereco: Joi.string()
    .required()
    .min(5)
    .max(500)
    .trim()
    .messages({
      'any.required': 'Endere√ßo √© obrigat√≥rio',
      'string.min': 'Endere√ßo deve ter pelo menos 5 caracteres',
      'string.max': 'Endere√ßo deve ter no m√°ximo 500 caracteres'
    }),

  municipio: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Munic√≠pio √© obrigat√≥rio',
      'string.min': 'Munic√≠pio deve ter pelo menos 2 caracteres',
      'string.max': 'Munic√≠pio deve ter no m√°ximo 255 caracteres'
    }),

  uf: Joi.string()
    .required()
    .custom(ufValidator)
    .messages({
      'any.required': 'UF √© obrigat√≥ria',
      'any.invalid': 'UF inv√°lida',
      'string.base': 'UF deve ser uma string'
    }),

  integracao_ocorrencia: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Integra√ß√£o de ocorr√™ncia deve ter no m√°ximo 255 caracteres'
    }),

  romaneio_auto: Joi.boolean()
    .default(false)
    .messages({
      'boolean.base': 'Romaneio autom√°tico deve ser verdadeiro ou falso'
    }),

  roterizacao_automatica: Joi.boolean()
    .default(false)
    .messages({
      'boolean.base': 'Roteiriza√ß√£o autom√°tica deve ser verdadeiro ou falso'
    })
});

// Schema para atualiza√ß√£o de transportadora
const updateTransportadora = Joi.object({
  cnpj: Joi.string()
    .custom(cnpjValidator)
    .messages({
      'any.invalid': 'CNPJ inv√°lido',
      'string.base': 'CNPJ deve ser uma string'
    }),

  nome: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Nome n√£o pode estar vazio'
    }),

  endereco: Joi.string()
    .min(5)
    .max(500)
    .trim()
    .messages({
      'string.min': 'Endere√ßo deve ter pelo menos 5 caracteres',
      'string.max': 'Endere√ßo deve ter no m√°ximo 500 caracteres'
    }),

  municipio: Joi.string()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'string.min': 'Munic√≠pio deve ter pelo menos 2 caracteres',
      'string.max': 'Munic√≠pio deve ter no m√°ximo 255 caracteres'
    }),

  uf: Joi.string()
    .custom(ufValidator)
    .messages({
      'any.invalid': 'UF inv√°lida',
      'string.base': 'UF deve ser uma string'
    }),

  integracao_ocorrencia: Joi.string()
    .allow(null, '')
    .max(255)
    .trim()
    .messages({
      'string.max': 'Integra√ß√£o de ocorr√™ncia deve ter no m√°ximo 255 caracteres'
    }),

  romaneio_auto: Joi.boolean()
    .messages({
      'boolean.base': 'Romaneio autom√°tico deve ser verdadeiro ou falso'
    }),

  roterizacao_automatica: Joi.boolean()
    .messages({
      'boolean.base': 'Roteiriza√ß√£o autom√°tica deve ser verdadeiro ou falso'
    })
}).min(1); // Pelo menos um campo deve ser fornecido

// Schema para listagem com filtros (CORRIGIDO)
const listTransportadoras = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.base': 'P√°gina deve ser um n√∫mero',
      'number.integer': 'P√°gina deve ser um n√∫mero inteiro',
      'number.min': 'P√°gina deve ser maior que 0'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(100)
    .default(20)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 100'
    }),

  orderBy: Joi.string()
    .valid('id', 'nome', 'cnpj', 'municipio', 'uf', 'created_at', 'updated_at')
    .default('created_at')
    .messages({
      'any.only': 'Campo de ordena√ß√£o inv√°lido'
    }),

  orderDirection: Joi.string()
    .valid('ASC', 'DESC', 'asc', 'desc')
    .default('DESC')
    .messages({
      'any.only': 'Dire√ß√£o de ordena√ß√£o deve ser ASC ou DESC'
    }),

  // ‚úÖ CORRE√á√ÉO: Permitir valores vazios para filtros
  nome: Joi.string()
    .allow('') // Permitir string vazia
    .max(255)
    .trim()
    .messages({
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres'
    }),

  cnpj: Joi.string()
    .allow('') // Permitir string vazia
    .custom((value, helpers) => {
      if (value && value !== '' && !validateCNPJ(value)) {
        return helpers.error('any.invalid');
      }
      return value ? value.replace(/\D/g, '') : value;
    })
    .messages({
      'any.invalid': 'CNPJ inv√°lido'
    }),

  municipio: Joi.string()
    .allow('') // Permitir string vazia
    .max(255)
    .trim()
    .messages({
      'string.max': 'Munic√≠pio deve ter no m√°ximo 255 caracteres'
    }),

  uf: Joi.string()
    .allow('') // Permitir string vazia
    .custom((value, helpers) => {
      if (value && value !== '' && !validateUF(value)) {
        return helpers.error('any.invalid');
      }
      return value ? value.toUpperCase() : value;
    })
    .messages({
      'any.invalid': 'UF inv√°lida'
    }),

  romaneio_auto: Joi.boolean()
    .messages({
      'boolean.base': 'Romaneio autom√°tico deve ser verdadeiro ou falso'
    }),

  roterizacao_automatica: Joi.boolean()
    .messages({
      'boolean.base': 'Roteiriza√ß√£o autom√°tica deve ser verdadeiro ou falso'
    })
});

// Schema para busca por nome
const searchTransportadoras = Joi.object({
  q: Joi.string()
    .required()
    .min(2)
    .max(255)
    .trim()
    .messages({
      'any.required': 'Termo de busca √© obrigat√≥rio',
      'string.min': 'Termo de busca deve ter pelo menos 2 caracteres',
      'string.max': 'Termo de busca deve ter no m√°ximo 255 caracteres',
      'string.empty': 'Termo de busca n√£o pode estar vazio'
    }),

  limit: Joi.number()
    .integer()
    .min(1)
    .max(50)
    .default(10)
    .messages({
      'number.base': 'Limite deve ser um n√∫mero',
      'number.integer': 'Limite deve ser um n√∫mero inteiro',
      'number.min': 'Limite deve ser maior que 0',
      'number.max': 'Limite deve ser menor ou igual a 50'
    })
});

// Schema para par√¢metros de rota
const transportadoraParams = Joi.object({
  id: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'ID √© obrigat√≥rio',
      'number.base': 'ID deve ser um n√∫mero',
      'number.integer': 'ID deve ser um n√∫mero inteiro',
      'number.positive': 'ID deve ser um n√∫mero positivo'
    })
});

// Schema para busca por CNPJ
const cnpjParams = Joi.object({
  cnpj: Joi.string()
    .required()
    .custom(cnpjValidator)
    .messages({
      'any.required': 'CNPJ √© obrigat√≥rio',
      'any.invalid': 'CNPJ inv√°lido'
    })
});

// Schema para busca por UF
const ufParams = Joi.object({
  uf: Joi.string()
    .required()
    .custom(ufValidator)
    .messages({
      'any.required': 'UF √© obrigat√≥ria',
      'any.invalid': 'UF inv√°lida'
    })
});

module.exports = {
  createTransportadora,
  updateTransportadora,
  listTransportadoras,
  searchTransportadoras,
  transportadoraParams,
  cnpjParams,
  ufParams
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\users.validation.js
================================================================================




================================================================================
ARQUIVO: C:\web\rw-nv\backend\src\validations\webhook.validation.js
================================================================================

// validations/webhook.validation.js - Schema de ocorr√™ncias baseado no schema real
const Joi = require('joi');

// Schema para uma ocorr√™ncia individual baseado no schema real da tabela
const ocorrenciaSchema = Joi.object({
  // Campos obrigat√≥rios (NOT NULL no banco)
  nro_nf: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'N√∫mero da NF √© obrigat√≥rio',
      'number.base': 'N√∫mero da NF deve ser um n√∫mero',
      'number.integer': 'N√∫mero da NF deve ser um n√∫mero inteiro',
      'number.positive': 'N√∫mero da NF deve ser positivo'
    }),

  dataHoraEnvio: Joi.date()
    .iso()
    .required()
    .messages({
      'any.required': 'Data/hora de envio √© obrigat√≥ria',
      'date.base': 'Data/hora de envio deve ser uma data v√°lida',
      'date.format': 'Data/hora de envio deve estar no formato ISO (YYYY-MM-DDTHH:mm:ss.sssZ)'
    }),

  codigo: Joi.number()
    .integer()
    .positive()
    .required()
    .messages({
      'any.required': 'C√≥digo da ocorr√™ncia √© obrigat√≥rio',
      'number.base': 'C√≥digo deve ser um n√∫mero',
      'number.integer': 'C√≥digo deve ser um n√∫mero inteiro',
      'number.positive': 'C√≥digo deve ser positivo'
    }),

  descricao: Joi.string()
    .required()
    .min(1)
    .max(65535) // text no PostgreSQL
    .trim()
    .messages({
      'any.required': 'Descri√ß√£o √© obrigat√≥ria',
      'string.empty': 'Descri√ß√£o n√£o pode estar vazia',
      'string.min': 'Descri√ß√£o deve ter pelo menos 1 caractere',
      'string.max': 'Descri√ß√£o √© muito longa'
    }),

  // Campos opcionais (nullable no banco)
  dataHoraEvento: Joi.date()
    .iso()
    .optional()
    .allow(null)
    .messages({
      'date.base': 'Data/hora do evento deve ser uma data v√°lida',
      'date.format': 'Data/hora do evento deve estar no formato ISO'
    }),

  complemento: Joi.string()
    .optional()
    .max(255)
    .trim()
    .allow(null, '')
    .messages({
      'string.max': 'Complemento deve ter no m√°ximo 255 caracteres'
    }),

  nomeRecebedor: Joi.string()
    .optional()
    .max(255)
    .trim()
    .allow(null, '')
    .messages({
      'string.max': 'Nome do recebedor deve ter no m√°ximo 255 caracteres'
    }),

  docRecebedor: Joi.string()
    .optional()
    .max(20)
    .trim()
    .allow(null, '')
    .messages({
      'string.max': 'Documento do recebedor deve ter no m√°ximo 20 caracteres'
    }),

  latitude: Joi.number()
    .precision(2)
    .min(-90)
    .max(90)
    .optional()
    .allow(null)
    .messages({
      'number.base': 'Latitude deve ser um n√∫mero',
      'number.precision': 'Latitude deve ter no m√°ximo 2 casas decimais',
      'number.min': 'Latitude deve estar entre -90 e 90',
      'number.max': 'Latitude deve estar entre -90 e 90'
    }),

  longitude: Joi.number()
    .precision(2)
    .min(-180)
    .max(180)
    .optional()
    .allow(null)
    .messages({
      'number.base': 'Longitude deve ser um n√∫mero',
      'number.precision': 'Longitude deve ter no m√°ximo 2 casas decimais',
      'number.min': 'Longitude deve estar entre -180 e 180',
      'number.max': 'Longitude deve estar entre -180 e 180'
    }),

  linkComprovante: Joi.string()
    .uri()
    .optional()
    .allow(null, '')
    .messages({
      'string.uri': 'Link do comprovante deve ser uma URL v√°lida'
    }),

  zaapId: Joi.string()
    .optional()
    .max(255)
    .allow(null, '')
    .messages({
      'string.max': 'ZaapId deve ter no m√°ximo 255 caracteres'
    }),

  messageId: Joi.string()
    .optional()
    .max(255)
    .allow(null, '')
    .messages({
      'string.max': 'MessageId deve ter no m√°ximo 255 caracteres'
    }),

  id_z_api: Joi.string()
    .optional()
    .max(255)
    .allow(null, '')
    .messages({
      'string.max': 'ID Z-API deve ter no m√°ximo 255 caracteres'
    }),

  enviado_zap: Joi.boolean()
    .optional()
    .default(false)
    .messages({
      'boolean.base': 'Enviado ZAP deve ser verdadeiro ou falso'
    }),

  enviado_date: Joi.date()
    .iso()
    .optional()
    .allow(null)
    .messages({
      'date.base': 'Data de envio deve ser uma data v√°lida',
      'date.format': 'Data de envio deve estar no formato ISO'
    }),

  status: Joi.string()
    .valid('waiting', 'running', 'finished')
    .optional()
    .default('waiting')
    .messages({
      'any.only': 'Status deve ser: waiting, running ou finished'
    }),

  link_comprovante_sistema: Joi.string()
    .uri()
    .optional()
    .allow(null, '')
    .messages({
      'string.uri': 'Link do comprovante do sistema deve ser uma URL v√°lida'
    }),

  status_download_comprovante: Joi.number()
    .integer()
    .optional()
    .allow(null)
    .messages({
      'number.base': 'Status download comprovante deve ser um n√∫mero',
      'number.integer': 'Status download comprovante deve ser um n√∫mero inteiro'
    }),

  tipo_comprovante_download: Joi.string()
    .optional()
    .max(255)
    .allow(null, '')
    .messages({
      'string.max': 'Tipo comprovante download deve ter no m√°ximo 255 caracteres'
    })
});

// Schema principal para webhook de ocorr√™ncias
const webhookOcorrenciasSchema = Joi.object({
  ocorrencias: Joi.array()
    .items(ocorrenciaSchema)
    .min(1)
    .max(100)
    .required()
    .messages({
      'any.required': 'Campo "ocorrencias" √© obrigat√≥rio',
      'array.base': 'Campo "ocorrencias" deve ser um array',
      'array.min': 'Deve conter pelo menos uma ocorr√™ncia',
      'array.max': 'M√°ximo de 100 ocorr√™ncias por requisi√ß√£o'
    })
});

// Schemas de notas fiscais (mantidos do c√≥digo original)
const recebedorSchema = Joi.object({
  cod_cliente: Joi.string()
    .allow('', null)
    .messages({
      'string.base': 'C√≥digo do cliente deve ser uma string'
    }),

  documento: Joi.string()
    .required()
    .messages({
      'any.required': 'Documento do recebedor √© obrigat√≥rio',
      'string.base': 'Documento deve ser uma string'
    }),

  nome: Joi.string()
    .required()
    .trim()
    .min(2)
    .max(255)
    .messages({
      'any.required': 'Nome do recebedor √© obrigat√≥rio',
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres'
    }),

  endereco: Joi.string()
    .allow('', null)
    .max(255)
    .messages({
      'string.max': 'Endere√ßo deve ter no m√°ximo 255 caracteres'
    }),

  bairro: Joi.string()
    .allow('', null)
    .max(100)
    .messages({
      'string.max': 'Bairro deve ter no m√°ximo 100 caracteres'
    }),

  cep: Joi.string()
    .allow('', null)
    .pattern(/^\d{5}-?\d{3}$/)
    .messages({
      'string.pattern.base': 'CEP deve estar no formato 00000-000 ou 00000000'
    }),

  cidade: Joi.string()
    .allow('', null)
    .max(100)
    .messages({
      'string.max': 'Cidade deve ter no m√°ximo 100 caracteres'
    }),

  uf: Joi.string()
    .allow('', null)
    .length(2)
    .uppercase()
    .messages({
      'string.length': 'UF deve ter 2 caracteres'
    }),

  contato: Joi.string()
    .allow('', null)
    .max(50)
    .messages({
      'string.max': 'Contato deve ter no m√°ximo 50 caracteres'
    })
});

const enderecoEntregaSchema = Joi.object({
  endereco: Joi.string()
    .allow('', null)
    .max(255)
    .messages({
      'string.max': 'Endere√ßo deve ter no m√°ximo 255 caracteres'
    }),

  bairro: Joi.string()
    .allow('', null)
    .max(100)
    .messages({
      'string.max': 'Bairro deve ter no m√°ximo 100 caracteres'
    }),

  cep: Joi.string()
    .allow('', null)
    .pattern(/^\d{5}-?\d{3}$/)
    .messages({
      'string.pattern.base': 'CEP deve estar no formato 00000-000 ou 00000000'
    }),

  cidade: Joi.string()
    .allow('', null)
    .max(100)
    .messages({
      'string.max': 'Cidade deve ter no m√°ximo 100 caracteres'
    }),

  uf: Joi.string()
    .allow('', null)
    .length(2)
    .uppercase()
    .messages({
      'string.length': 'UF deve ter 2 caracteres'
    }),

  doca: Joi.string()
    .allow('', null)
    .max(20)
    .messages({
      'string.max': 'Doca deve ter no m√°ximo 20 caracteres'
    }),

  rota: Joi.string()
    .allow('', null)
    .max(50)
    .messages({
      'string.max': 'Rota deve ter no m√°ximo 50 caracteres'
    })
});

const remetenteSchema = Joi.object({
  documento: Joi.string()
    .required()
    .messages({
      'any.required': 'Documento do remetente √© obrigat√≥rio',
      'string.base': 'Documento deve ser uma string'
    }),

  nome: Joi.string()
    .required()
    .trim()
    .min(2)
    .max(255)
    .messages({
      'any.required': 'Nome do remetente √© obrigat√≥rio',
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres'
    })
});

const transportadoraSchema = Joi.object({
  cnpj: Joi.string()
    .required()
    .messages({
      'any.required': 'CNPJ da transportadora √© obrigat√≥rio',
      'string.base': 'CNPJ deve ser uma string'
    }),

  nome: Joi.string()
    .required()
    .trim()
    .min(2)
    .max(255)
    .messages({
      'any.required': 'Nome da transportadora √© obrigat√≥rio',
      'string.min': 'Nome deve ter pelo menos 2 caracteres',
      'string.max': 'Nome deve ter no m√°ximo 255 caracteres'
    }),

  endereco: Joi.string()
    .allow('', null)
    .max(255)
    .messages({
      'string.max': 'Endere√ßo deve ter no m√°ximo 255 caracteres'
    }),

  municipio: Joi.string()
    .allow('', null)
    .max(100)
    .messages({
      'string.max': 'Munic√≠pio deve ter no m√°ximo 100 caracteres'
    }),

  uf: Joi.string()
    .allow('', null)
    .length(2)
    .uppercase()
    .messages({
      'string.length': 'UF deve ter 2 caracteres'
    })
});

const notaFiscalSchema = Joi.object({
  peso_calculo: Joi.number()
    .min(0)
    .allow(null)
    .default(0)
    .messages({
      'number.min': 'Peso c√°lculo deve ser maior ou igual a zero'
    }),

  observacoes: Joi.string()
    .allow('', null)
    .max(1000)
    .messages({
      'string.max': 'Observa√ß√µes deve ter no m√°ximo 1000 caracteres'
    }),

  previsao_entrega: Joi.string()
    .isoDate()
    .allow('', null)
    .messages({
      'string.isoDate': 'Previs√£o de entrega deve estar no formato ISO (YYYY-MM-DDTHH:mm:ss.sssZ)'
    }),

  chave_nf: Joi.string()
    .allow('', null)
    .length(44)
    .messages({
      'string.length': 'Chave da NF deve ter 44 caracteres'
    }),

  ser: Joi.number()
    .integer()
    .min(1)
    .allow(null)
    .messages({
      'number.integer': 'S√©rie deve ser um n√∫mero inteiro',
      'number.min': 'S√©rie deve ser maior que zero'
    }),

  emi_nf: Joi.string()
    .isoDate()
    .allow('', null)
    .messages({
      'string.isoDate': 'Data de emiss√£o deve estar no formato ISO (YYYY-MM-DDTHH:mm:ss.sssZ)'
    }),

  nro: Joi.number()
    .integer()
    .min(1)
    .required()
    .messages({
      'any.required': 'N√∫mero da NF √© obrigat√≥rio',
      'number.integer': 'N√∫mero deve ser um inteiro',
      'number.min': 'N√∫mero deve ser maior que zero'
    }),

  nro_pedido: Joi.number()
    .integer()
    .min(1)
    .allow(null)
    .messages({
      'number.integer': 'N√∫mero do pedido deve ser um inteiro',
      'number.min': 'N√∫mero do pedido deve ser maior que zero'
    }),

  peso_real: Joi.number()
    .min(0)
    .allow(null)
    .messages({
      'number.min': 'Peso real deve ser maior ou igual a zero'
    }),

  cod_rep: Joi.number()
    .integer()
    .min(1)
    .allow(null)
    .messages({
      'number.integer': 'C√≥digo do representante deve ser um inteiro',
      'number.min': 'C√≥digo do representante deve ser maior que zero'
    }),

  nome_rep: Joi.string()
    .allow('', null)
    .max(255)
    .messages({
      'string.max': 'Nome do representante deve ter no m√°ximo 255 caracteres'
    }),

  qtd_volumes: Joi.number()
    .integer()
    .min(1)
    .allow(null)
    .default(1)
    .messages({
      'number.integer': 'Quantidade de volumes deve ser um inteiro',
      'number.min': 'Quantidade de volumes deve ser maior que zero'
    }),

  metro_cubico: Joi.number()
    .min(0)
    .allow(null)
    .default(0)
    .messages({
      'number.min': 'Metro c√∫bico deve ser maior ou igual a zero'
    }),

  mensagem: Joi.string()
    .allow('', null)
    .max(500)
    .messages({
      'string.max': 'Mensagem deve ter no m√°ximo 500 caracteres'
    }),

  valor: Joi.number()
    .min(0)
    .allow(null)
    .default(0)
    .messages({
      'number.min': 'Valor deve ser maior ou igual a zero'
    }),

  data_entrega: Joi.string()
    .allow('', null)
    .messages({
      'string.base': 'Data de entrega deve ser uma string'
    }),

  status_nf: Joi.string()
    .valid('pendente', 'em_transito', 'entregue', 'devolvida', 'cancelada', 'pedido reservado')
    .allow('', null)
    .default('pendente')
    .messages({
      'any.only': 'Status deve ser: pendente, em_transito, entregue, devolvida, cancelada ou pedido reservado'
    }),

  nf_retida: Joi.boolean()
    .allow(null)
    .default(false)
    .messages({
      'boolean.base': 'NF retida deve ser verdadeiro ou falso'
    }),

  valor_frete: Joi.number()
    .min(0)
    .allow(null)
    .default(0)
    .messages({
      'number.min': 'Valor do frete deve ser maior ou igual a zero'
    }),

  recebedor: Joi.array()
    .items(recebedorSchema)
    .min(1)
    .required()
    .messages({
      'any.required': 'Dados do recebedor s√£o obrigat√≥rios',
      'array.min': 'Deve conter pelo menos um recebedor'
    }),

  endereco_entrega: Joi.array()
    .items(enderecoEntregaSchema)
    .allow(null)
    .messages({
      'array.base': 'Endere√ßo de entrega deve ser um array'
    }),

  remetente: Joi.array()
    .items(remetenteSchema)
    .min(1)
    .required()
    .messages({
      'any.required': 'Dados do remetente s√£o obrigat√≥rios',
      'array.min': 'Deve conter pelo menos um remetente'
    }),

  transportadora: Joi.array()
    .items(transportadoraSchema)
    .min(1)
    .required()
    .messages({
      'any.required': 'Dados da transportadora s√£o obrigat√≥rios',
      'array.min': 'Deve conter pelo menos uma transportadora'
    })
});

const webhookNotaFiscalSchema = Joi.object({
  notfis: Joi.array()
    .items(notaFiscalSchema)
    .min(1)
    .max(100)
    .required()
    .messages({
      'any.required': 'Campo "notfis" √© obrigat√≥rio',
      'array.min': 'Deve conter pelo menos uma nota fiscal',
      'array.max': 'M√°ximo de 100 notas fiscais por requisi√ß√£o',
      'array.base': 'Campo "notfis" deve ser um array'
    })
});

module.exports = {
  // Schemas de notas fiscais
  webhookNotaFiscalSchema,
  notaFiscalSchema,
  recebedorSchema,
  enderecoEntregaSchema,
  remetenteSchema,
  transportadoraSchema,
  
  // Schemas de ocorr√™ncias
  webhookOcorrenciasSchema,
  ocorrenciaSchema
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\swaggerDef.js
================================================================================

// swaggerDef.js - VERS√ÉO CORRETA
module.exports = {
  openapi: '3.0.0',
  info: {
    title: 'Road-RW API',
    version: '1.0.0',
    description: 'Sistema de Gest√£o Log√≠stica - Backend API'
  },
  servers: [
    {
      url: 'http://localhost:3001',
      description: 'Servidor de Desenvolvimento'
    }
  ],
  components: {
    securitySchemes: {
      bearerAuth: {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT'
      }
    }
  },
  tags: [
    { name: 'Auth', description: 'Autentica√ß√£o' },
    { name: 'Transportadoras', description: 'Transportadoras' },
    { name: 'Clientes', description: 'Clientes' },
    { name: 'Embarcadores', description: 'Embarcadores' },
    { name: 'Motoristas', description: 'Motoristas' },
    { name: 'Notas Fiscais', description: 'Notas Fiscais' },
    { name: 'Romaneios', description: 'Romaneios' },
    { name: 'Ocorr√™ncias', description: 'Ocorr√™ncias' },
    { name: 'Jobs', description: 'Jobs de Integra√ß√£o' },
    { name: 'Monitoring', description: 'Monitoramento' },
    { name: 'Integrations', description: 'Integra√ß√µes' },
    { name: 'External APIs', description: 'APIs Externas' },
    { name: 'Webhooks', description: 'Webhooks' },
    { name: 'Logs', description: 'Logs' },
    { name: 'Reports', description: 'Relat√≥rios' }
  ]
};


================================================================================
ARQUIVO: C:\web\rw-nv\backend\swaggerDef.js.backup
================================================================================

const config = require('./src/config/env');

const swaggerDefinition = {
  openapi: '3.0.0',
  info: {
    title: 'Road-RW API - Sistema de Gest√£o Log√≠stica',
    version: '1.0.0',
    description: 'API completa para gest√£o de transportadoras, clientes, motoristas e embarcadores',
    contact: {
      name: 'Road-RW Team',
      email: 'contato@roadrw.com'
    },
    license: {
      name: 'MIT',
      url: 'https://opensource.org/licenses/MIT'
    }
  },
  servers: [
    {
      url: `http://localhost:${config.port}/api`,
      description: 'Servidor de Desenvolvimento'
    },
    {
      url: 'https://api.roadrw.com/api',
      description: 'Servidor de Produ√ß√£o'
    }
  ],
  components: {
    securitySchemes: {
      bearerAuth: {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        description: 'Token JWT obtido atrav√©s do endpoint de login'
      }
    },
    schemas: {
      Error: {
        type: 'object',
        properties: {
          success: {
            type: 'boolean',
            example: false
          },
          message: {
            type: 'string',
            example: 'Mensagem de erro'
          },
          errors: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                field: {
                  type: 'string'
                },
                message: {
                  type: 'string'
                }
              }
            }
          }
        }
      },
      Success: {
        type: 'object',
        properties: {
          success: {
            type: 'boolean',
            example: true
          },
          message: {
            type: 'string',
            example: 'Opera√ß√£o realizada com sucesso'
          },
          data: {
            type: 'object'
          }
        }
      },
      Pagination: {
        type: 'object',
        properties: {
          success: {
            type: 'boolean',
            example: true
          },
          data: {
            type: 'array',
            items: {}
          },
          pagination: {
            type: 'object',
            properties: {
              page: {
                type: 'integer',
                example: 1
              },
              limit: {
                type: 'integer',
                example: 20
              },
              total: {
                type: 'integer',
                example: 100
              },
              pages: {
                type: 'integer',
                example: 5
              }
            }
          }
        }
      }
    },
    responses: {
      UnauthorizedError: {
        description: 'Token de acesso inv√°lido ou expirado',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/Error'
            }
          }
        }
      },
      ForbiddenError: {
        description: 'Acesso negado - privil√©gios insuficientes',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/Error'
            }
          }
        }
      },
      NotFoundError: {
        description: 'Recurso n√£o encontrado',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/Error'
            }
          }
        }
      },
      ValidationError: {
        description: 'Erro de valida√ß√£o dos dados enviados',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/Error'
            }
          }
        }
      }
    }
  },
  tags: [
    {
      name: 'Autentica√ß√£o',
      description: 'Opera√ß√µes de autentica√ß√£o e autoriza√ß√£o'
    },
    {
      name: 'Clientes',
      description: 'Gest√£o de clientes'
    },
    {
      name: 'Transportadoras',
      description: 'Gest√£o de transportadoras'
    },
    {
      name: 'Embarcadores',
      description: 'Gest√£o de embarcadores'
    },
    {
      name: 'Motoristas',
      description: 'Gest√£o de motoristas'
    },
    {
      name: 'Endere√ßos de Entrega',
      description: 'Gest√£o de endere√ßos de entrega'
    },
    {
      name: 'Notas Fiscais',
      description: 'Gest√£o de notas fiscais'
    }
  ]
};

module.exports = swaggerDefinition;


================================================================================
ARQUIVO: C:\web\rw-nv\backend\test-server.js
================================================================================

// test-server.js
require('dotenv').config();
const express = require('express');

const app = express();
const PORT = process.env.PORT || 3001;

app.use(express.json());

app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK',
    env_vars: {
      DB_HOST: process.env.DB_HOST || 'n√£o configurado',
      JWT_SECRET: process.env.JWT_SECRET ? 'configurado' : 'n√£o configurado'
    }
  });
});

app.listen(PORT, () => {
  console.log(`Servidor teste rodando na porta ${PORT}`);
});


================================================================================
ARQUIVO: C:\web\rw-nv\backend\unificar.py
================================================================================

import os
import shutil

def unificar_arquivos(pasta_origem, arquivo_saida='arquivo_unificado.txt', ignorar_pastas=['node_modules']):
    """
    Unifica o conte√∫do de todos os arquivos de uma pasta em um √∫nico arquivo txt.
    
    Args:
        pasta_origem (str): Caminho da pasta a ser processada
        arquivo_saida (str): Nome do arquivo de sa√≠da
        ignorar_pastas (list): Lista de pastas a serem ignoradas
    """
    
    def eh_pasta_ignorada(caminho):
        """Verifica se a pasta deve ser ignorada - CORRIGIDO"""
        # Obt√©m o caminho absoluto normalizado
        caminho_absoluto = os.path.abspath(caminho)
        
        # Verifica se qualquer uma das pastas a ignorar est√° no caminho
        for pasta_ignorada in ignorar_pastas:
            # Cria o padr√£o de pasta a ser ignorada (com separadores)
            pasta_pattern = os.sep + pasta_ignorada + os.sep
            if pasta_pattern in caminho_absoluto:
                return True
            
            # Verifica se √© exatamente a pasta a ser ignorada
            if caminho_absoluto.endswith(os.sep + pasta_ignorada):
                return True
                
        return False
    
    def processar_arquivo(caminho_arquivo, arquivo_saida):
        """Processa um arquivo individual e adiciona ao arquivo unificado"""
        try:
            # Tenta ler com diferentes encodings
            for encoding in ['utf-8', 'latin-1', 'cp1252']:
                try:
                    with open(caminho_arquivo, 'r', encoding=encoding) as arquivo:
                        conteudo = arquivo.read()
                    break
                except UnicodeDecodeError:
                    continue
            else:
                # Se nenhum encoding funcionar, pule o arquivo
                print(f"‚ö†Ô∏è  N√£o foi poss√≠vel ler o arquivo (encoding): {caminho_arquivo}")
                return
                
            with open(arquivo_saida, 'a', encoding='utf-8') as saida:
                saida.write(f"\n{'='*80}\n")
                saida.write(f"ARQUIVO: {caminho_arquivo}\n")
                saida.write(f"{'='*80}\n\n")
                saida.write(conteudo)
                saida.write("\n\n")
                
            print(f"‚úÖ Processado: {caminho_arquivo}")
                
        except Exception as e:
            print(f"‚ùå Erro ao processar {caminho_arquivo}: {e}")
    
    def percorrer_pasta(pasta_atual):
        """Percorre recursivamente todas as pastas e arquivos - CORRIGIDO"""
        # Verifica SE deve ignorar esta pasta ANTES de processar
        if eh_pasta_ignorada(pasta_atual):
            print(f"üö´ Ignorando pasta: {pasta_atual}")
            return
            
        try:
            itens = os.listdir(pasta_atual)
        except PermissionError:
            print(f"üîí Permiss√£o negada para acessar: {pasta_atual}")
            return
        except Exception as e:
            print(f"‚ùå Erro ao acessar {pasta_atual}: {e}")
            return
            
        for item in itens:
            caminho_completo = os.path.join(pasta_atual, item)
            
            # Para diret√≥rios: verifica se deve ignorar antes de recurs√£o
            if os.path.isdir(caminho_completo):
                if eh_pasta_ignorada(caminho_completo):
                    print(f"üö´ Ignorando pasta: {caminho_completo}")
                    continue
                percorrer_pasta(caminho_completo)
            else:
                # Para arquivos: verifica se est√° em pasta ignorada
                if not eh_pasta_ignorada(caminho_completo):
                    processar_arquivo(caminho_completo, arquivo_saida)
                else:
                    print(f"üö´ Ignorando arquivo em pasta ignorada: {caminho_completo}")
    
    # Verifica se a pasta de origem existe
    if not os.path.exists(pasta_origem):
        print(f"‚ùå Erro: A pasta '{pasta_origem}' n√£o existe!")
        return
    
    # Remove o arquivo de sa√≠da se j√° existir
    if os.path.exists(arquivo_saida):
        os.remove(arquivo_saida)
        print(f"üìÑ Arquivo existente '{arquivo_saida}' removido.")
    
    print(f"üöÄ Iniciando unifica√ß√£o da pasta: {pasta_origem}")
    print(f"üö´ Ignorando pastas: {ignorar_pastas}")
    print(f"üíæ Arquivo de sa√≠da: {arquivo_saida}")
    print("-" * 60)
    
    # Inicia o processamento
    percorrer_pasta(os.path.abspath(pasta_origem))
    
    print("-" * 60)
    
    # Verifica se o arquivo foi criado
    if os.path.exists(arquivo_saida):
        tamanho = os.path.getsize(arquivo_saida)
        print(f"‚úÖ Unifica√ß√£o conclu√≠da! Arquivo gerado: {arquivo_saida}")
        print(f"üìä Tamanho do arquivo: {tamanho:,} bytes")
    else:
        print(f"‚ùå Nenhum arquivo foi processado!")

# Vers√£o mais simples para uso r√°pido
def unificar_rapido():
    """Vers√£o simplificada que usa a pasta atual"""
    pasta_atual = os.getcwd()
    arquivo_saida = 'unificado.txt'
    
    print(f"üìÇ Unificando arquivos da pasta atual: {pasta_atual}")
    unificar_arquivos(pasta_atual, arquivo_saida)

# Vers√£o com DEBUG para ver o que est√° sendo ignorado
def unificar_com_debug():
    """Vers√£o com informa√ß√µes de debug"""
    pasta_atual = os.getcwd()
    arquivo_saida = 'unificado_debug.txt'
    pastas_ignorar = ['node_modules']
    
    print("=== MODO DEBUG ===")
    print(f"Pasta atual: {pasta_atual}")
    print(f"Pastas a ignorar: {pastas_ignorar}")
    print("\nVerificando pastas...")
    
    # Lista todas as pastas para debug
    for root, dirs, files in os.walk(pasta_atual):
        for dir in dirs:
            caminho_completo = os.path.join(root, dir)
            if 'node_modules' in caminho_completo:
                print(f"üö´ ENCONTRADO node_modules em: {caminho_completo}")
    
    print("\nIniciando unifica√ß√£o...")
    unificar_arquivos(pasta_atual, arquivo_saida, pastas_ignorar)

if __name__ == "__main__":
    # Op√ß√£o 1: Usar a pasta atual (normal)
    unificar_rapido()
    
    # Op√ß√£o 2: Modo debug para verificar o node_modules
    # unificar_com_debug()
    
    # Op√ß√£o 3: Especificar pasta personalizada
    # unificar_arquivos('/caminho/para/sua/pasta', 'meu_arquivo_unificado.txt')
    
    # Op√ß√£o 4: Adicionar mais pastas para ignorar
    # unificar_arquivos('.', 'unificado.txt', ['node_modules', '.git', '__pycache__', 'venv'])

